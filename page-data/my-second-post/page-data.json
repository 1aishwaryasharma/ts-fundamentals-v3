{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/my-second-post/","result":{"data":{"site":{"siteMetadata":{"title":"Example Blog"}},"markdownRemark":{"id":"db80bb1a-1a5d-516f-b0df-8dd0b40d993f","excerpt":"Introduction For programs to be useful, we need to be able to work with some of the simplest units of data: numbers, strings, structures, boolean values, and…","html":"<h1>Introduction</h1>\n<p>For programs to be useful, we need to be able to work with some of the simplest units of data: numbers, strings, structures, boolean values, and the like.\nIn TypeScript, we support much the same types as you would expect in JavaScript, with a convenient enumeration type thrown in to help things along.</p>\n<h1>Boolean</h1>\n<p>The most basic datatype is the simple true/false value, which JavaScript and TypeScript call a <code>boolean</code> value.</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let isDone: boolean'>isDone</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">boolean</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">false</span><span style=\"color: #24292EFF\">;</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAlgzgIgewHYgFwQEYIaAhkiAXggDNdgYQBuIA'>Try</a></div></pre>\n<h1>Number</h1>\n<p>As in JavaScript, all numbers in TypeScript are floating point values.\nThese floating point numbers get the type <code>number</code>.\nIn addition to hexadecimal and decimal literals, TypeScript also supports binary and octal literals introduced in ECMAScript 2015.</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let decimal: number'>decimal</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">number</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">6</span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let hex: number'>hex</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">number</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">0xf00d</span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let binary: number'>binary</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">number</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">0b1010</span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let octal: number'>octal</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">number</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">0o744</span><span style=\"color: #24292EFF\">;</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAJiDGCWBbAhsAXBAdgV0QIxACcIBeCANgG4AoUSACxAA8Md8jSIAGJgMy65QadCHniZkhAJ6tcBYmS54AjF1XDwEAPawwqWewXctAdgAsZykA'>Try</a></div></pre>\n<h1>String</h1>\n<p>Another fundamental part of creating programs in JavaScript for webpages and servers alike is working with textual data.\nAs in other languages, we use the type <code>string</code> to refer to these textual datatypes.\nJust like JavaScript, TypeScript also uses double quotes (<code>\"</code>) or single quotes (<code>'</code>) to surround string data.</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let color: string'>color</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">string</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">&apos;blue&apos;</span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #24292EFF\"><data-lsp lsp='let color: string'>color</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">&apos;red&apos;</span><span style=\"color: #24292EFF\">;</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAxg9sMCcBcEDOYEEsB2BzCAvBAOQBGwAriMQNwBQs8ChJCIAJrUA'>Try</a></div></pre>\n<p>You can also use <em>template strings</em>, which can span multiple lines and have embedded expressions.\nThese strings are surrounded by the backtick/backquote (<code>`</code>) character, and embedded expressions are of the form <code>${ expr }</code>.</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let fullName: string'>fullName</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">string</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">`Bob Bobbington`</span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let age: number'>age</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">number</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">37</span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let sentence: string'>sentence</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">string</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">`Hello, my name is </span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\"><data-lsp lsp='let fullName: string'>fullName</data-lsp></span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\">.</span></div>\n<div class='line'><span style=\"color: #22863A\">I&apos;ll be </span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\"><data-lsp lsp='let age: number'>age</data-lsp> </span><span style=\"color: #D32F2F\">+</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">1</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\"> years old next month.`</span><span style=\"color: #24292EFF\">;</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAZgrswDkCGBbEAuCBnMAnAlgHYDmEAvBAAYBCA9gEYR331HFi2GUDcAUKJCTEMEQjBT0QuchADMAdj4DsIQmFUBjETgIkZlABIh4tADQQUAT1GoQEfFggASAN6x4yNAF8AdL14AkgDk8BCSzi5CdgDUEACMXhCWIEi4jrTAACaiIAAekCicYAAWPjxAA'>Try</a></div></pre>\n<p>This is equivalent to declaring <code>sentence</code> like so:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let sentence: string'>sentence</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">string</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span></div><div class='line'><span style=\"color: #24292EFF\">  </span><span style=\"color: #22863A\">&apos;Hello, my name is &apos;</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">+</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='let fullName: string'>fullName</data-lsp> </span><span style=\"color: #D32F2F\">+</span></div><div class='line'><span style=\"color: #24292EFF\">  </span><span style=\"color: #22863A\">&apos;.\\n\\n&apos;</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">+</span></div><div class='line'><span style=\"color: #24292EFF\">  </span><span style=\"color: #22863A\">\"I&apos;ll be \"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">+</span></div><div class='line'><span style=\"color: #24292EFF\">  (<data-lsp lsp='let age: number'>age</data-lsp> </span><span style=\"color: #D32F2F\">+</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">) </span><span style=\"color: #D32F2F\">+</span></div><div class='line'><span style=\"color: #24292EFF\">  </span><span style=\"color: #22863A\">&apos; years old next month.&apos;</span><span style=\"color: #24292EFF\">;</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAZgrswDkCGBbEAuCBnMAnAlgHYDmEAvBAAYBCA9gEYR331HFi2GUDcAUKJCTEMEQjBT0QuchADMAdj4B6JRAC0GgMYwwGtf3DYQhMMc0icBEuV4QIAcgASIeLQA0EFAE9RqEBHwsBwgAaltoOEQ-UPD7ADoAHUIk+xi7ACIASXt4CEkIdLSIAAohfxCIAEYASiLUrxAkXCDaYAATURAAD0gUTjAACzj7biA'>Try</a></div></pre>\n<h1>Array</h1>\n<p>TypeScript, like JavaScript, allows you to work with arrays of values.\nArray types can be written in one of two ways.\nIn the first, you use the type of the elements followed by <code>[]</code> to denote an array of that element type:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let list: number[]'>list</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">number</span><span style=\"color: #24292EFF\">[] </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> [</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #1976D2\">2</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #1976D2\">3</span><span style=\"color: #24292EFF\">];</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBMCWDOYC4IDsCuBbARiATgbQF0IBeCPARgBoIAmagZgIG4g'>Try</a></div></pre>\n<p>The second way uses a generic array type, <code>Array&#x3C;elemType></code>:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let list: number[]'>list</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='interface Array&amp;lt;T>'>Array</data-lsp></span><span style=\"color: #24292EFF\">&lt;</span><span style=\"color: #1976D2\">number</span><span style=\"color: #24292EFF\">&gt; </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> [</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #1976D2\">2</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #1976D2\">3</span><span style=\"color: #24292EFF\">];</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBMCWDOYC4IEEBOqCGBPAPAOwFcBbAIxFQD4IBeCAbQEYAaCAJhYGYBdAbiA'>Try</a></div></pre>\n<h1>Tuple</h1>\n<p>Tuple types allow you to express an array with a fixed number of elements whose types are known, but need not be the same. For example, you may want to represent a value as a pair of a <code>string</code> and a <code>number</code>:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #C2C3C5\">// Declare a tuple type</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let x: [string, number]'>x</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> [</span><span style=\"color: #1976D2\">string</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #1976D2\">number</span><span style=\"color: #24292EFF\">];</span></div><div class='line'><span style=\"color: #C2C3C5\">// Initialize it</span></div><div class='line'><span style=\"color: #24292EFF\"><data-lsp lsp='let x: [string, number]'>x</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> [</span><span style=\"color: #22863A\">&apos;hello&apos;</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #1976D2\">10</span><span style=\"color: #24292EFF\">]; </span><span style=\"color: #C2C3C5\">// OK</span></div><div class='line'><span style=\"color: #C2C3C5\">// Initialize it incorrectly</span></div><div class='line'><span style=\"color: #24292EFF\"><data-lsp lsp='let x: [string, number]'>x</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> [</span><span style=\"color: #1976D2\"><data-err>10</data-err></span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\"><data-err>&apos;hello&apos;</data-err></span><span style=\"color: #24292EFF\">]; </span><span style=\"color: #C2C3C5\">// Error</span></div><span class=\"error\"><span>Type 'number' is not assignable to type 'string'.</br>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322<br/>2322</span></span><span class=\"error-behind\">Type 'number' is not assignable to type 'string'.</br>Type 'string' is not assignable to type 'number'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAlACKQDGANgIbSSjmgAuArgA6nV0CeTkOrdoAHqgDaiOtACWAOwDmAGlCSGAWwBGMALoBuPGACSk8XXHlS4gF7VDOfqAC8oIQHIAFpFKk4j+QEYADFtB8AHkAaR1QfUNjUwtQQzjJYgQqYjpSdms7Bz95FzcPRwD8AFFYBCA'>Try</a></div></pre>\n<p>When accessing an element with a known index, the correct type is retrieved:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #1976D2\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #6F42C1\">.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #24292EFF\">(<data-lsp lsp='let x: [string, number]'>x</data-lsp>[</span><span style=\"color: #1976D2\">0</span><span style=\"color: #24292EFF\">]</span><span style=\"color: #6F42C1\">.<data-lsp lsp='(method) String.substring(start: number, end?: number | undefined): string'>substring</data-lsp></span><span style=\"color: #24292EFF\">(</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">)); </span><span style=\"color: #C2C3C5\">// OK</span></div><div class='line'><span style=\"color: #1976D2\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #6F42C1\">.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #24292EFF\">(<data-lsp lsp='let x: [string, number]'>x</data-lsp>[</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">]</span><span style=\"color: #6F42C1\"><data-err>.<data-lsp lsp='any'>substring</data-lsp></data-err></span><span style=\"color: #24292EFF\">(</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">)); </span><span style=\"color: #C2C3C5\">// Error, &apos;number&apos; does not have &apos;substring&apos;</span></div><span class=\"error\"><span>Property 'substring' does not exist on type 'number'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'substring' does not exist on type 'number'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAbSAF1AA9UBtRI6ASwDsBzAGlHoFcBbAIxgF0A3LlKgAvKAoByABaR8+OJNYBGAAyDQIUAHkA0rhBgAtCYDG7IiaO5TceojiEAdAsYAKUhXVPE7btTomN2UAShCBTTA9GzsHZ1cPCmU+Hz8AhndQ8MjQAFFYBFZJDh4YSVAAEzhIRDY4EmkAQwA3SFBJX38aDMkgA'>Try</a></div></pre>\n<p>Accessing an element outside the set of known indices fails with an error:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #24292EFF\"><data-lsp lsp='let x: [string, number]'>x</data-lsp>[</span><span style=\"color: #1976D2\"><data-err>3</data-err></span><span style=\"color: #24292EFF\">] </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">&apos;world&apos;</span><span style=\"color: #24292EFF\">; </span><span style=\"color: #C2C3C5\">// Error, Property &apos;3&apos; does not exist on type &apos;[string, number]&apos;.</span></div><span class=\"error\"><span>Tuple type '[string, number]' of length '2' has no element at index '3'.</span><span class=\"code\">2493</span></span><span class=\"error-behind\">Tuple type '[string, number]' of length '2' has no element at index '3'.</span>\n<div class='line'><span style=\"color: #1976D2\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #6F42C1\">.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #24292EFF\">(<data-lsp lsp='let x: [string, number]'>x</data-lsp>[</span><span style=\"color: #1976D2\"><data-err>5</data-err></span><span style=\"color: #24292EFF\">]</span><span style=\"color: #6F42C1\">.<data-lsp lsp='any'>toString</data-lsp></span><span style=\"color: #24292EFF\">()); </span><span style=\"color: #C2C3C5\">// Error, Property &apos;5&apos; does not exist on type &apos;[string, number]&apos;.</span></div><span class=\"error\"><span>Object is possibly 'undefined'.</br>Tuple type '[string, number]' of length '2' has no element at index '5'.</span><span class=\"code\">2532<br/>2493</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</br>Tuple type '[string, number]' of length '2' has no element at index '5'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYCcBmdBWHNdItAKABtIAXUAD1QG1FroBLAOwHMAaUDgK4BbAEYwAugG4ydUAF5QjAOQALSBQpwlfAIwAGKaBCgA8gGkyIMAFpbAYwHVb1mYxzj5oJQHcEFACZKkkZgAKKwCHwACvAADjDUAJ5eOEqg-nCQiPxwtJB0bCygcBygSfFezKycvPzCYtDiSgB0ZGR2JYhwVM2aXAAUdIz44s3UcADK1dz9AJSzwcbh8NDRcQnJSvhpGVk5eQVFJWWJFUpV7Nx8gqISLUA'>Try</a></div></pre>\n<h1>Enum</h1>\n<p>A helpful addition to the standard set of datatypes from JavaScript is the <code>enum</code>.\nAs in languages like C#, an enum is a way of giving more friendly names to sets of numeric values.</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">enum</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='enum Color'>Color</data-lsp></span><span style=\"color: #24292EFF\"> {</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Red = 0'>Red</data-lsp>,</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Green = 1'>Green</data-lsp>,</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Blue = 2'>Blue</data-lsp>,</span></div><div class='line'><span style=\"color: #24292EFF\">}</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let c: Color'>c</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='enum Color'>Color</data-lsp></span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\"><data-lsp lsp='enum Color'>Color</data-lsp></span><span style=\"color: #24292EFF\">.<data-lsp lsp='(enum member) Color.Green = 1'>Green</data-lsp>;</span></div></code><a href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAwg9gGzgJygbwFBSgJWAEwBosoBxZYUY7AIQTGGIF8MFgAXKAYwC5ZEUUALz8kyAHTlKIANxA'>Try</a></div></pre>\n<p>By default, enums begin numbering their members starting at <code>0</code>.\nYou can change this by manually setting the value of one of its members.\nFor example, we can start the previous example at <code>1</code> instead of <code>0</code>:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">enum</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='enum Color'>Color</data-lsp></span><span style=\"color: #24292EFF\"> {</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Red = 1'>Red</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">,</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Green = 2'>Green</data-lsp>,</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Blue = 3'>Blue</data-lsp>,</span></div><div class='line'><span style=\"color: #24292EFF\">}</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let c: Color'>c</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='enum Color'>Color</data-lsp></span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\"><data-lsp lsp='enum Color'>Color</data-lsp></span><span style=\"color: #24292EFF\">.<data-lsp lsp='(enum member) Color.Green = 2'>Green</data-lsp>;</span></div></code><a href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAwg9gGzgJygbwFBSgJWAEygF4oBGAGiygHFlhRLsAhBMYSgXwwWABcoAxgC5YiFMVFJkAOlr0QAbiA'>Try</a></div></pre>\n<p>Or, even manually set all the values in the enum:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">enum</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='enum Color'>Color</data-lsp></span><span style=\"color: #24292EFF\"> {</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Red = 1'>Red</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">,</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Green = 2'>Green</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">2</span><span style=\"color: #24292EFF\">,</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Blue = 4'>Blue</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">4</span><span style=\"color: #24292EFF\">,</span></div><div class='line'><span style=\"color: #24292EFF\">}</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let c: Color'>c</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='enum Color'>Color</data-lsp></span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\"><data-lsp lsp='enum Color'>Color</data-lsp></span><span style=\"color: #24292EFF\">.<data-lsp lsp='(enum member) Color.Green = 2'>Green</data-lsp>;</span></div></code><a href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAwg9gGzgJygbwFBSgJWAEygF4oBGAGiygHFlhRioAmS7AIQTGEYBZKBfDAmAAXKAGMAXLEQpG8JMgB0teiADcQA'>Try</a></div></pre>\n<p>A handy feature of enums is that you can also go from a numeric value to the name of that value in the enum.\nFor example, if we had the value <code>2</code> but weren’t sure what that mapped to in the <code>Color</code> enum above, we could look up the corresponding name:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">enum</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='enum Color'>Color</data-lsp></span><span style=\"color: #24292EFF\"> {</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Red = 1'>Red</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">,</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Green = 2'>Green</data-lsp>,</span></div><div class='line'><span style=\"color: #24292EFF\">  <data-lsp lsp='(enum member) Color.Blue = 3'>Blue</data-lsp>,</span></div><div class='line'><span style=\"color: #24292EFF\">}</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let colorName: string'>colorName</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">string</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> <data-lsp lsp='enum Color'>Color</data-lsp>[</span><span style=\"color: #1976D2\">2</span><span style=\"color: #24292EFF\">];</span></div>\n<div class='line'><span style=\"color: #1976D2\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #6F42C1\">.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #24292EFF\">(<data-lsp lsp='let colorName: string'>colorName</data-lsp>); </span><span style=\"color: #C2C3C5\">// Displays &apos;Green&apos; as its value is 2 above</span></div></code><a href='https://www.typescriptlang.org/play/#code/KYOwrgtgBAwg9gGzgJygbwFBSgJWAEygF4oBGAGiygHFlhRLsAhBMYSgXwwWABcoAxohQA5AIYRgALigBnXsgCWIAObFYw5AG0ATAF0A3BgxCQsxMAB0SFQAohSZOMkBKA1AD0HqABFFsgAcEMQBPWSgAclp6EAioMXDFXnCANzFWYCh-KB14gCM4FOAgA'>Try</a></div></pre>\n<h1>Any</h1>\n<p>We may need to describe the type of variables that we do not know when we are writing an application.\nThese values may come from dynamic content, e.g. from the user or a 3rd party library.\nIn these cases, we want to opt-out of type checking and let the values pass through compile-time checks.\nTo do so, we label these with the <code>any</code> type:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let notSure: any'>notSure</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">any</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">4</span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #24292EFF\"><data-lsp lsp='let notSure: any'>notSure</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">&apos;maybe a string instead&apos;</span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #24292EFF\"><data-lsp lsp='let notSure: any'>notSure</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">false</span><span style=\"color: #24292EFF\">; </span><span style=\"color: #C2C3C5\">// okay, definitely a boolean</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAdg9mDKBXATiAXBAhlAnhAvBACwDcAULAiiARAOQC2mOARjZhAM5jICWUAcwj9uITABM65SklS0AZpmCcQJCAHp1EGAGtmAGgjiQ8-rzAhgeDixgxQ2IA'>Try</a></div></pre>\n<p>The <code>any</code> type is a powerful way to work with existing JavaScript, allowing you to gradually opt-in and opt-out of type checking during compilation.\nYou might expect <code>Object</code> to play a similar role, as it does in other languages.\nHowever, variables of type <code>Object</code> only allow you to assign any value to them. You can’t call arbitrary methods on them, even ones that actually exist:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let notSure: any'>notSure</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">any</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">4</span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #1976D2\"><data-lsp lsp='let notSure: any'>notSure</data-lsp></span><span style=\"color: #6F42C1\">.<data-lsp lsp='any'>ifItExists</data-lsp></span><span style=\"color: #24292EFF\">(); </span><span style=\"color: #C2C3C5\">// okay, ifItExists might exist at runtime</span></div><div class='line'><span style=\"color: #1976D2\"><data-lsp lsp='let notSure: any'>notSure</data-lsp></span><span style=\"color: #6F42C1\">.<data-lsp lsp='any'>toFixed</data-lsp></span><span style=\"color: #24292EFF\">(); </span><span style=\"color: #C2C3C5\">// okay, toFixed exists (but the compiler doesn&apos;t check)</span></div>\n<div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let prettySure: Object'>prettySure</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='interface Object'>Object</data-lsp></span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">4</span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #1976D2\"><data-lsp lsp='let prettySure: Object'>prettySure</data-lsp></span><span style=\"color: #6F42C1\"><data-err>.<data-lsp lsp='any'>toFixed</data-lsp></data-err></span><span style=\"color: #24292EFF\">(); </span><span style=\"color: #C2C3C5\">// Error: Property &apos;toFixed&apos; doesn&apos;t exist on type &apos;Object&apos;.</span></div><span class=\"error\"><span>Property 'toFixed' does not exist on type 'Object'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'toFixed' does not exist on type 'Object'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAbSAF1ADs4iBlAV2klQENSBPUAXlABYBuXcq2pAB0ASwBmASSIBRAB4jERRAAoAlN1AhQcANYNmAGlDipchUtABbEQHMAFiUjzFoBiWjVSREZch8KNHRCRHAAYiKykAAmahpauvpGIeGRUaBO5oigygBG1CREdpCgAMZwlgAOIoTQoFFwkIikAOQkJUUlOqq4BMSgFXRERMyB9KAA8jkAVpAlJBw8uAPEw6PBYRHRsZpg0rAIqAAK8BUww6CtG6nNdQ1NrenOJHCkoMOnF5Mzc81CQA'>Try</a></div></pre>\n<p>The <code>any</code> type is also handy if you know some part of the type, but perhaps not all of it.\nFor example, you may have an array but the array has a mix of different types:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let list: any[]'>list</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">any</span><span style=\"color: #24292EFF\">[] </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> [</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #1976D2\">true</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">&apos;free&apos;</span><span style=\"color: #24292EFF\">];</span></div>\n<div class='line'><span style=\"color: #24292EFF\"><data-lsp lsp='let list: any[]'>list</data-lsp>[</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">] </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">100</span><span style=\"color: #24292EFF\">;</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBMCWDOYC4IEMB2BPA2gXQgXgkwEYAaCMAJwFcQyByAMwpBDuwG4AoTmeY3AkQAMQ9kA'>Try</a></div></pre>\n<h1>Void</h1>\n<p><code>void</code> is a little like the opposite of <code>any</code>: the absence of having any type at all.\nYou may commonly see this as the return type of functions that do not return a value:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function warnUser(): void'>warnUser</data-lsp></span><span style=\"color: #24292EFF\">()</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">void</span><span style=\"color: #24292EFF\"> {</span></div><div class='line'><span style=\"color: #24292EFF\">  </span><span style=\"color: #1976D2\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #6F42C1\">.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #24292EFF\">(</span><span style=\"color: #22863A\">&apos;This is my warning message&apos;</span><span style=\"color: #24292EFF\">);</span></div><div class='line'><span style=\"color: #24292EFF\">}</span></div></code><a href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAdwIYCcwFUDOBTdACgEoAuRANzhgBNEBvAKEUQgRzgBs8A6TuAOaEA5ABUAFjByIpiALYBPFBjAwwA+Xhw5UAvMOIBuRgF8gA'>Try</a></div></pre>\n<p>Declaring variables of type <code>void</code> is not useful because you can only assign <code>null</code> (only if <code>--strictNullChecks</code> is not specified, see next section) or <code>undefined</code> to them:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let unusable: void'>unusable</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">void</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #24292EFF\"><data-lsp lsp='let unusable: void'>unusable</data-lsp> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">null</span><span style=\"color: #24292EFF\">; </span><span style=\"color: #C2C3C5\">// OK if `--strictNullChecks` is not given</span></div></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BcoBmBDANpApgFDZ7SgCuAdmZJgEbFoBuA9vACagC85Fbe68CnjYBuApWp1iXUFWzYRoEKADyAaVDx0oAAYBaPTATIAcmXkBhABZ5EAa0g7NkWc1IBzeIzwUgA'>Try</a></div></pre>\n<h1>Null and Undefined</h1>\n<p>In TypeScript, both <code>undefined</code> and <code>null</code> actually have their own types named <code>undefined</code> and <code>null</code> respectively.\nMuch like <code>void</code>, they’re not extremely useful on their own:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #C2C3C5\">// Not much else we can assign to these variables!</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let u: undefined'>u</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">undefined</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #24292EFF\">;</span></div><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let n: null'>n</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">null</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">null</span><span style=\"color: #24292EFF\">;</span></div></code><a href='https://www.typescriptlang.org/play/#code/PTAEDkHsBdQWwK4GMAWoCmAbAzu0B3PJAQwDtRjtsBLAc3OklGhXV1ADdiAna4gI0xsAhACghsBAC5QCUgBN0AM2ql080AF5ZC5avUBucelikZpBJkxbQFqwaA'>Try</a></div></pre>\n<p>By default <code>null</code> and <code>undefined</code> are subtypes of all other types.\nThat means you can assign <code>null</code> and <code>undefined</code> to something like <code>number</code>.</p>\n<p>However, when using the <code>--strictNullChecks</code> flag, <code>null</code> and <code>undefined</code> are only assignable to <code>any</code> and their respective types (the one exception being that <code>undefined</code> is also assignable to <code>void</code>).\nThis helps avoid <em>many</em> common errors.\nIn cases where you want to pass in either a <code>string</code> or <code>null</code> or <code>undefined</code>, you can use the union type <code>string | null | undefined</code>.</p>\n<p>Union types are an advanced topic that we’ll cover in a later chapter.</p>\n<blockquote>\n<p>As a note: we encourage the use of <code>--strictNullChecks</code> when possible, but for the purposes of this handbook, we will assume it is turned off.</p>\n</blockquote>\n<h1>Never</h1>\n<p>The <code>never</code> type represents the type of values that never occur.\nFor instance, <code>never</code> is the return type for a function expression or an arrow function expression that always throws an exception or one that never returns.\nVariables also acquire the type <code>never</code> when narrowed by any type guards that can never be true.</p>\n<p>The <code>never</code> type is a subtype of, and assignable to, every type; however, <em>no</em> type is a subtype of, or assignable to, <code>never</code> (except <code>never</code> itself).\nEven <code>any</code> isn’t assignable to <code>never</code>.</p>\n<p>Some examples of functions returning <code>never</code>:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #C2C3C5\">// Function returning never must have unreachable end point</span></div><div class='line'><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function error(message: string): never'>error</data-lsp></span><span style=\"color: #24292EFF\">(<data-lsp lsp='(parameter) message: string'>message</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">string</span><span style=\"color: #24292EFF\">)</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">never</span><span style=\"color: #24292EFF\"> {</span></div><div class='line'><span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">throw</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">new</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\"><data-lsp lsp='var Error: ErrorConstructor&amp;#13;new (message?: string | undefined) => Error'>Error</data-lsp></span><span style=\"color: #24292EFF\">(<data-lsp lsp='(parameter) message: string'>message</data-lsp>);</span></div><div class='line'><span style=\"color: #24292EFF\">}</span></div>\n<div class='line'><span style=\"color: #C2C3C5\">// Inferred return type is never</span></div><div class='line'><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function fail(): never'>fail</data-lsp></span><span style=\"color: #24292EFF\">() {</span></div><div class='line'><span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function error(message: string): never'>error</data-lsp></span><span style=\"color: #24292EFF\">(</span><span style=\"color: #22863A\">&apos;Something failed&apos;</span><span style=\"color: #24292EFF\">);</span></div><div class='line'><span style=\"color: #24292EFF\">}</span></div>\n<div class='line'><span style=\"color: #C2C3C5\">// Function returning never must have unreachable end point</span></div><div class='line'><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function infiniteLoop(): never'>infiniteLoop</data-lsp></span><span style=\"color: #24292EFF\">()</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">never</span><span style=\"color: #24292EFF\"> {</span></div><div class='line'><span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">while</span><span style=\"color: #24292EFF\"> (</span><span style=\"color: #1976D2\">true</span><span style=\"color: #24292EFF\">) {}</span></div><div class='line'><span style=\"color: #24292EFF\">}</span></div></code><a href='https://www.typescriptlang.org/play/#code/PTAEDEFcDsGMBcCWB7aoBOBTel3UdAOajSYBum6oAtpAM7ygAWAhhaDFi7KwEYA2mUJmgATUAAdkBeACgAZjAQo0ldMnQAKapjp0WhTAC5QDdAUIBKE6QpUA3rNCh4TdQHcSmTwFF06rR09A0xLAG5ZAF9ZWRBQAEloeTVMcSwcPBcATwkhRDovOwUlJFRQeRZEfk1LUEdndNxVfw1NAHIAZWQdVwtyysFRNvComLioOFK0Rrw+20oaekZWdk5Mbj5BYTFJaWg5RUmVUAJ5AkR4TAAZZGQJGptyBfrQdyYqoU14dEhQuujIkA'>Try</a></div></pre>\n<h1>Object</h1>\n<p><code>object</code> is a type that represents the non-primitive type, i.e. anything that is not <code>number</code>, <code>string</code>, <code>boolean</code>, <code>symbol</code>, <code>null</code>, or <code>undefined</code>.</p>\n<p>With <code>object</code> type, APIs like <code>Object.create</code> can be better represented. For example:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">declare</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function create(o: object | null): void'>create</data-lsp></span><span style=\"color: #24292EFF\">(<data-lsp lsp='(parameter) o: object | null'>o</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">object</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">null</span><span style=\"color: #24292EFF\">)</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">void</span><span style=\"color: #24292EFF\">;</span></div>\n<div class='line'><span style=\"color: #6F42C1\"><data-lsp lsp='function create(o: object | null): void'>create</data-lsp></span><span style=\"color: #24292EFF\">({ <data-lsp lsp='(property) prop: number'>prop</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">0</span><span style=\"color: #24292EFF\"> }); </span><span style=\"color: #C2C3C5\">// OK</span></div><div class='line'><span style=\"color: #6F42C1\"><data-lsp lsp='function create(o: object | null): void'>create</data-lsp></span><span style=\"color: #24292EFF\">(</span><span style=\"color: #1976D2\">null</span><span style=\"color: #24292EFF\">); </span><span style=\"color: #C2C3C5\">// OK</span></div>\n<div class='line'><span style=\"color: #6F42C1\"><data-lsp lsp='function create(o: object | null): void'>create</data-lsp></span><span style=\"color: #24292EFF\">(</span><span style=\"color: #1976D2\"><data-err>42</data-err></span><span style=\"color: #24292EFF\">); </span><span style=\"color: #C2C3C5\">// Error</span></div><span class=\"error\"><span>Argument of type '42' is not assignable to parameter of type 'object | null'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '42' is not assignable to parameter of type 'object | null'.</span><div class='line'><span style=\"color: #6F42C1\"><data-lsp lsp='function create(o: object | null): void'>create</data-lsp></span><span style=\"color: #24292EFF\">(</span><span style=\"color: #22863A\"><data-err>&apos;string&apos;</data-err></span><span style=\"color: #24292EFF\">); </span><span style=\"color: #C2C3C5\">// Error</span></div><span class=\"error\"><span>Argument of type '\"string\"' is not assignable to parameter of type 'object | null'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"string\"' is not assignable to parameter of type 'object | null'.</span><div class='line'><span style=\"color: #6F42C1\"><data-lsp lsp='function create(o: object | null): void'>create</data-lsp></span><span style=\"color: #24292EFF\">(</span><span style=\"color: #1976D2\"><data-err>false</data-err></span><span style=\"color: #24292EFF\">); </span><span style=\"color: #C2C3C5\">// Error</span></div><span class=\"error\"><span>Argument of type 'false' is not assignable to parameter of type 'object | null'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'false' is not assignable to parameter of type 'object | null'.</span><div class='line'><span style=\"color: #6F42C1\"><data-lsp lsp='function create(o: object | null): void'>create</data-lsp></span><span style=\"color: #24292EFF\">(</span><span style=\"color: #1976D2\"><data-err><data-lsp lsp='var undefined'>undefined</data-lsp></data-err></span><span style=\"color: #24292EFF\">); </span><span style=\"color: #C2C3C5\">// Error</span></div><span class=\"error\"><span>Argument of type 'undefined' is not assignable to parameter of type 'object | null'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'undefined' is not assignable to parameter of type 'object | null'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUACaQDGANgIbSSgBmArgHbEAuAlnA6MVec5ABRxUcAEYArEs1AAfUAzqlSASlQA3OKwIBuPHm6ReAgN6gADvFOoADKAC+SraBCgA8gGk9PPv3mKHTsHddfUN+LDR-ZwBRWARPA28AckRmaFYGAHNEyLAY+Gh40JpyUkRIHNA8uJDvRiIadMgCCqroIA'>Try</a></div></pre>\n<h1>Type assertions</h1>\n<p>Sometimes you’ll end up in a situation where you’ll know more about a value than TypeScript does.\nUsually this will happen when you know the type of some entity could be more specific than its current type.</p>\n<p><em>Type assertions</em> are a way to tell the compiler “trust me, I know what I’m doing.”\nA type assertion is like a type cast in other languages, but performs no special checking or restructuring of data.\nIt has no runtime impact, and is used purely by the compiler.\nTypeScript assumes that you, the programmer, have performed any special checks that you need.</p>\n<p>Type assertions have two forms.\nOne is the “angle-bracket” syntax:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let someValue: any'>someValue</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">any</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">&apos;this is a string&apos;</span><span style=\"color: #24292EFF\">;</span></div>\n<div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let strLength: number'>strLength</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">number</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> (&lt;</span><span style=\"color: #1976D2\">string</span><span style=\"color: #24292EFF\">><data-lsp lsp='let someValue: any'>someValue</data-lsp>).</span><span style=\"color: #1976D2\"><data-lsp lsp='(property) String.length: number'>length</data-lsp></span><span style=\"color: #24292EFF\">;</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAzg9gtiAagQ2AVxALgsgdgTwgF4IByMACwEsoIadowAnK3Ac1IG4Aob0SKMwAyIdpWy40cAEYgmxCAAoAPIJbsAfLAQp0IAJQA6UGIqcgA'>Try</a></div></pre>\n<p>And the other is the <code>as</code>-syntax:</p>\n<pre class=\"shiki twoslash lsp\" style=\"background-color: #fff; color: black\"><div class='code-container'><code><div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let someValue: any'>someValue</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">any</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">&apos;this is a string&apos;</span><span style=\"color: #24292EFF\">;</span></div>\n<div class='line'><span style=\"color: #D32F2F\">let</span><span style=\"color: #24292EFF\"> <data-lsp lsp='let strLength: number'>strLength</data-lsp></span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">number</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> (<data-lsp lsp='let someValue: any'>someValue</data-lsp> </span><span style=\"color: #D32F2F\">as</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">string</span><span style=\"color: #24292EFF\">).</span><span style=\"color: #1976D2\"><data-lsp lsp='(property) String.length: number'>length</data-lsp></span><span style=\"color: #24292EFF\">;</span></div></code><a href='https://www.typescriptlang.org/play/#code/DYUwLgBAzg9gtiAagQ2AVxALgsgdgTwgF4IByMACwEsoIadowAnK3Ac1IG4Aob0SKMwAyIdpWy40cAEYgmxCAApYCFOhA5agluwCUAOlBiKnIA'>Try</a></div></pre>\n<p>The two samples are equivalent.\nUsing one over the other is mostly a choice of preference; however, when using TypeScript with JSX, only <code>as</code>-style assertions are allowed.</p>\n<h1>A note about <code>let</code></h1>\n<p>You may have noticed that so far, we’ve been using the <code>let</code> keyword instead of JavaScript’s <code>var</code> keyword which you might be more familiar with.\nThe <code>let</code> keyword is actually a newer JavaScript construct that TypeScript makes available.\nWe’ll discuss the details later, but many common problems in JavaScript are alleviated by using <code>let</code>, so you should use it instead of <code>var</code> whenever possible.</p>","frontmatter":{"title":"My Second Post!","date":"May 06, 2015","description":null}}},"pageContext":{"slug":"/my-second-post/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}}}},"staticQueryHashes":["1246554614","2841359383"]}