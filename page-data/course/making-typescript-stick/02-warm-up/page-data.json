{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/making-typescript-stick/02-warm-up/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","title":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"full-stack-typescript","title":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"47d07357-35e6-584e-8f92-15c094a9c03e","excerpt":"Question 1 Consider the following situation. Is there a possibility\nof a function foo changing the value held by val\nsuch that the console.log statements print…","html":"<h2 id=\"question-1\" style=\"position:relative;\"><a href=\"#question-1\" aria-label=\"question 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 1</h2>\n<p>Consider the following situation. Is there a possibility\nof a function <code>foo</code> changing the value held by <code>val</code>\nsuch that the <code>console.log</code> statements print something different?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line dim'><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function foo(x: any): void' >foo</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\"><data-lsp lsp='(parameter) x: any' >x</data-lsp></span><span style=\"color: #24292E\">) {</span></div><div class='line dim'><span style=\"color: #24292E\">  </span><span style=\"color: #6A737D\">// ...hidden...</span></div><div class='line dim'><span style=\"color: #24292E\">}</span></div><div class='line dim'><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function main(): void' >main</data-lsp></span><span style=\"color: #24292E\">() {</span></div><div class='line dim'><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const val: void' >val</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(<data-lsp lsp='const val: void' >val</data-lsp>) </span><span style=\"color: #6A737D\">// ...hidden...</span></div><div class='line highlight'><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\"><data-lsp lsp='function foo(x: any): void' >foo</data-lsp></span><span style=\"color: #24292E\">(<data-lsp lsp='const val: void' >val</data-lsp>)</span></div><div class='line dim'><span style=\"color: #24292E\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(<data-lsp lsp='const val: void' >val</data-lsp>)</span></div><div class='line highlight'><span style=\"color: #24292E\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMOcAUAPAlIg3gKEUQHpjEA6SgCxgBNaBTMS8-AX31ElgUQFsAhjDBocBIhAQBnKIgBuAgDaIAvIklgpcRQ3KK4AczQLFOUhWp1GzSoWSpjSrHY1adew49PsgA'>Try</a></div></pre>\n<details>\n<summary>Click here for the answer</summary>\n<p><strong>Yes, but it depends both on the value type of <code>val</code> and the implementation of\n<code>foo</code></strong>. For example, if <code>val</code> is an array, <code>foo</code> could push things into the array.\nIf <code>val</code> is a string, there’s nothing that <code>foo</code> could do to make the\n<code>console.log</code> statements\nprint something different</p>\n</details>\n<h2 id=\"question-2\" style=\"position:relative;\"><a href=\"#question-2\" aria-label=\"question 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 2</h2>\n<p>Which of the following variables (<code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>) hold immutable values</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const a: \"Frontend Masters\"' >a</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"Frontend Masters\"</span></div><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let b: string' >b</data-lsp> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"Frontend Masters\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const c: {&#10;    learnAt: string;&#10;}' >c</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> { <data-lsp lsp='(property) learnAt: string' >learnAt</data-lsp>: </span><span style=\"color: #032F62\">\"Frontend Masters\"</span><span style=\"color: #24292E\"> }</span></div><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let d: {&#10;    learnAt: string;&#10;}' >d</data-lsp> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> { <data-lsp lsp='(property) learnAt: string' >learnAt</data-lsp>: </span><span style=\"color: #032F62\">\"Frontend Masters\"</span><span style=\"color: #24292E\"> }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const e: Readonly&lt;{&#10;    learnAt: string;&#10;}>' >e</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #24292E\">.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) ObjectConstructor.freeze&lt;{&#10;    learnAt: string;&#10;}>(o: {&#10;    learnAt: string;&#10;}): Readonly&lt;{&#10;    learnAt: string;&#10;}> (+2 overloads)' >freeze</data-lsp></span><span style=\"color: #24292E\">({ <data-lsp lsp='(property) learnAt: string' >learnAt</data-lsp>: </span><span style=\"color: #032F62\">\"Frontend Masters\"</span><span style=\"color: #24292E\"> })</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAhjAvDARAMQE7igUzAExgFk5ocMIUAoAGx1gCMlVNs9CSyLqrRJZgzAN4w6cDGACCUAFwssYXAWKlc3GAF9a9GIWQixE6XPQKlHVeUqaqvcNBg5mAeQYArHMCgA6AGYYcHAAvHAAKAxxxKVl5NmVONWsNAEogA'>Try</a></div></pre>\n<details>\n<summary>Click here for the answer</summary>\n<p><strong><code>a</code>, <code>b</code> and <code>e</code> hold immutable values</strong>. Remember, <code>const</code> and <code>let</code>\ndiffer in terms of whether variables can be reassigned, but that has nothing\nto do with whether the values they hold can be modified.</p>\n<p><code>Object.freeze</code> prevents properties of an object from being changed, and\nprevents new properties from being added. This effectively is a “shallow immutability”.</p>\n</details>\n<h2 id=\"question-3\" style=\"position:relative;\"><a href=\"#question-3\" aria-label=\"question 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 3</h2>\n<p>Which of the following variables (<code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>) hold immutable values</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const a: \"Frontend Masters\"' >a</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"Frontend Masters\"</span></div><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let b: string' >b</data-lsp> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"Frontend Masters\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const c: {&#10;    learnAt: string;&#10;}' >c</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> { <data-lsp lsp='(property) learnAt: string' >learnAt</data-lsp>: </span><span style=\"color: #032F62\">\"Frontend Masters\"</span><span style=\"color: #24292E\"> }</span></div><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let d: {&#10;    learnAt: string;&#10;}' >d</data-lsp> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> { <data-lsp lsp='(property) learnAt: string' >learnAt</data-lsp>: </span><span style=\"color: #032F62\">\"Frontend Masters\"</span><span style=\"color: #24292E\"> }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const e: Readonly&lt;{&#10;    learnAt: string;&#10;}>' >e</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #24292E\">.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) ObjectConstructor.freeze&lt;{&#10;    learnAt: string;&#10;}>(o: {&#10;    learnAt: string;&#10;}): Readonly&lt;{&#10;    learnAt: string;&#10;}> (+2 overloads)' >freeze</data-lsp></span><span style=\"color: #24292E\">({ <data-lsp lsp='(property) learnAt: string' >learnAt</data-lsp>: </span><span style=\"color: #032F62\">\"Frontend Masters\"</span><span style=\"color: #24292E\"> })</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAhjAvDARAMQE7igUzAExgFk5ocMIUAoAGx1gCMlVNs9CSyLqrRJZgzAN4w6cDGACCUAFwssYXAWKlc3GAF9a9GIWQixE6XPQKlHVeUqaqvcNBg5mAeQYArHMCgA6AGYYcHAAvHAAKAxxxKVl5NmVONWsNAEogA'>Try</a></div></pre>\n<details>\n<summary>Click here for the answer</summary>\n<p><strong><code>a</code>, <code>b</code> and <code>e</code> hold immutable values</strong>. Remember, <code>const</code> and <code>let</code>\ndiffer in terms of whether variables can be reassigned, but that has nothing\nto do with whether the values they hold can be modified.</p>\n<p><code>Object.freeze</code> prevents properties of an object from being changed, and\nprevents new properties from being added. This effectively is a “shallow immutability”.</p>\n</details>\n<h2 id=\"question-4\" style=\"position:relative;\"><a href=\"#question-4\" aria-label=\"question 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 4</h2>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function getData(): Promise&lt;any>' >getData</data-lsp></span><span style=\"color: #24292E\">() {</span></div><div class='line'><span style=\"color: #24292E\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">\"elephant\"</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const p: Promise&lt;any>' >p</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='var Promise: PromiseConstructor&#10;new &lt;any>(executor: (resolve: (value: any) => void, reject: (reason?: any) => void) => void) => Promise&lt;any>' >Promise</data-lsp></span><span style=\"color: #24292E\">((</span><span style=\"color: #E36209\"><data-lsp lsp='(parameter) resolve: (value: any) => void' >resolve</data-lsp></span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></div><div class='line'><span style=\"color: #24292E\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">\"giraffe\"</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #6F42C1\"><data-lsp lsp='(parameter) resolve: (value: any) => void' >resolve</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">\"lion\"</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">\"zebra\"</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">  })</span></div><div class='line'><span style=\"color: #24292E\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">\"koala\"</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> <data-lsp lsp='const p: Promise&lt;any>' >p</data-lsp></span></div><div class='line'><span style=\"color: #24292E\">}</span></div><div class='line'><span style=\"color: #D73A49\">async</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function main(): Promise&lt;void>' >main</data-lsp></span><span style=\"color: #24292E\">() {</span></div><div class='line'><span style=\"color: #24292E\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">\"cat\"</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const result: any' >result</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">await</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='function getData(): Promise&lt;any>' >getData</data-lsp></span><span style=\"color: #24292E\">()</span></div><div class='line'><span style=\"color: #24292E\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(<data-lsp lsp='const result: any' >result</data-lsp>)</span></div><div class='line'><span style=\"color: #24292E\">}</span></div><div class='line'><span style=\"color: #24292E\"><data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">\"dog\"</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #6F42C1\"><data-lsp lsp='function main(): Promise&lt;void>' >main</data-lsp></span><span style=\"color: #24292E\">().</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Promise&lt;void>.then&lt;void, never>(onfulfilled?: ((value: void) => void | PromiseLike&lt;void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike&lt;never>) | null | undefined): Promise&lt;...>' >then</data-lsp></span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></div><div class='line'><span style=\"color: #24292E\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">\"moose\"</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwKZQCIEMpYBQCUiA3gFCKIQIDOcANqgHR1zJ4BEqDADgBZZgo7AuUo0oibogC8iMKgDuiAAoAnOAFsY1VHjyrUtOgDdURaQD4SoilTBGmLNu2QxVWYMFTCbiA0dMOOngwHwpbGnpHVg4AL1QAI3cwxABfEQj7KOYY9gBrOCw6LBSDKBBVJG5SVNIsagBPSERQSFgERA0sGDBCa0yHHOcIHBS7agl-EDoJWSwFbok0TBx8DLEshiH9Q2moEVrx7KcOABNWHy6ewkYoXlRevst+jcGT9g04OB0fdKA'>Try</a></div></pre>\n<details>\n<summary>Click here for the answer</summary>\n<p>Answer: <strong>dog, cat, elephant, giraffe, zebra, koala, lion, moose</strong></p>\n<ul>\n<li>Are you surprised that <code>giraffe</code> and <code>zebra</code> happen so early? Remember\nthat <code>Promise</code> executors are invoked synchronously in the <code>Promise</code> constructor</li>\n<li>Are you surprised that <code>lion</code> happens so late? Remember that a <code>resolve</code> is\nnot a <code>return</code>. Just because a <code>Promise</code> has resolved, doesn’t mean the\ncorresponding <code>.then</code> (or <code>await</code> is called immediately)</li>\n</ul>\n</details>\n<h2 id=\"question-5\" style=\"position:relative;\"><a href=\"#question-5\" aria-label=\"question 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question 5</h2>\n<p>Look at the following code sample. What happens when we try to run the last\nthree lines?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='class Animal&#10;const Animal: typeof Animal' >Animal</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\"><data-lsp lsp='(parameter) numLegs: any' >numLegs</data-lsp></span><span style=\"color: #24292E\">) {</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='(local function) walk(): void' >walk</data-lsp></span><span style=\"color: #24292E\">() {</span></div><div class='line'><span style=\"color: #24292E\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">`Walking with ${</span><span style=\"color: #24292E\"><data-lsp lsp='(parameter) numLegs: any' >numLegs</data-lsp></span><span style=\"color: #032F62\">} legs!`</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">  }</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(property) Animal.run: any' >run</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> () {</span></div><div class='line'><span style=\"color: #24292E\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">`Running with ${</span><span style=\"color: #24292E\"><data-lsp lsp='(parameter) numLegs: any' >numLegs</data-lsp></span><span style=\"color: #032F62\">} legs!`</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">  }</span></div><div class='line'><span style=\"color: #24292E\">}</span></div><div class='line'><span style=\"color: #005CC5\"><data-lsp lsp='class Animal&#10;const Animal: typeof Animal' >Animal</data-lsp></span><span style=\"color: #24292E\">.</span><span style=\"color: #005CC5\"><data-lsp lsp='(property) Function.prototype: any' >prototype</data-lsp></span><span style=\"color: #24292E\">.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Animal.jump(): void' >jump</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> () {</span></div><div class='line'><span style=\"color: #24292E\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">`Jumping with ${</span><span style=\"color: #24292E\"><data-lsp lsp='any' >numLegs</data-lsp></span><span style=\"color: #032F62\">} legs!`</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">}</span></div><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const a: Animal' >a</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='constructor(numLegs: any): Animal' >Animal</data-lsp></span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">4</span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\"><data-lsp lsp='const a: Animal' >a</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='any' >walk</data-lsp></span><span style=\"color: #24292E\">() </span><span style=\"color: #6A737D\">// ?</span></div><div class='line'><span style=\"color: #24292E\"><data-lsp lsp='const a: Animal' >a</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(property) Animal.run: () => void' >run</data-lsp></span><span style=\"color: #24292E\">() </span><span style=\"color: #6A737D\">// ?</span></div><div class='line'><span style=\"color: #24292E\"><data-lsp lsp='const a: Animal' >a</data-lsp>.</span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) Animal.jump(): void' >jump</data-lsp></span><span style=\"color: #24292E\">() </span><span style=\"color: #6A737D\">// ?</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAgmAlgWwIYBsYF4YDMCuYwUi4MAFGPsgDICmA5hAJQwDeAUDHocaWDADuGANblWnbt1CQQ6OgDp0IBuQAGAdVGIwDIYigALGABI2VWowgBfGPKYBCNcy4xrro4ggKAToWw8RCRk4uyu0uAQcorKqmoASoRIuvpGpubU9Ey29hBOLtzu7ggoGAoADj4gUNUAnuWKAFbU5QEEQfwUEq4yUfJKKuoAUi06eoIGxmYWWTZ2Vvkc7r2wqAFgdILwSGjo5AAsLqgKwuhirAD0FzAA-BzHfmChV7f3Cs3I5c-XN0A'>Try</a></div></pre>\n<details>\n<summary>Click here for the answer</summary>\n<p><strong><code>a.walk()</code> will error, <code>a.run()</code> will print <code>\"Running with 4 legs!\"</code>\nand <code>a.jump()</code> will error</strong></p>\n<ul>\n<li>Remember that <code>walk()</code> is visible only from within the constructor function</li>\n<li>Remember that <code>numLegs</code> is only visible from within the constructor function</li>\n</ul>\n</details>","tableOfContents":"<ul>\n<li><a href=\"#question-1\">Question 1</a></li>\n<li><a href=\"#question-2\">Question 2</a></li>\n<li><a href=\"#question-3\">Question 3</a></li>\n<li><a href=\"#question-4\">Question 4</a></li>\n<li><a href=\"#question-5\">Question 5</a></li>\n</ul>","fields":{"slug":"/course/making-typescript-stick/02-warm-up/"},"frontmatter":{"title":"JS/TS Warm-up Quiz","course":"making-typescript-stick","date":"March 22, 2022","description":"Before jumping in, let's get those neurons firing by taking a quick\nquiz. Remember, wrong answers aren't anything more than an indication\nof where you need a little more practice!\n"}}},"pageContext":{"slug":"/course/making-typescript-stick/02-warm-up/","title":"JS/TS Warm-up Quiz","course":"making-typescript-stick","order":2,"previous":{"fields":{"slug":"/course/making-typescript-stick/01-intro/"},"frontmatter":{"title":"Intro","order":1,"course":"making-typescript-stick","isExercise":null}},"next":{"fields":{"slug":"/course/making-typescript-stick/03-recent-updates-to-typescript/"},"frontmatter":{"title":"Recent updates to TypeScript","order":3,"course":"making-typescript-stick","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}