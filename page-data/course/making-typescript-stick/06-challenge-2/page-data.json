{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/making-typescript-stick/06-challenge-2/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"},{"id":"making-typescript-stick","title":"Making TypeScript Stick","summary":"Completing an introductory TypeScript workshop is a great first step your TS\nlearning journey, but being able to apply the language to solve challenging\nand varied problems can require a deeper understanding, and a well-formed\nmental model. In this workshop, we'll tackle a series of challenges designed\nto reinforce your knowledge and make the important concepts truly \"stick\"\nin your mind.\n"},{"id":"full-stack-typescript","title":"Full Stack TypeScript","summary":"TypeScript offers a delightful authoring experience, but for many apps all\nbets are off once you make an API call and receive an `any` response back.\nIn this workshop we'll combine TypeScript and GraphQL's type systems to\ncreate full-stack, fully-type-checked codebases (even the data layer!)\nthat are shockingly easy to evolve, refactor and maintain.\n"}]}},"markdownRemark":{"id":"b9bee7ee-02de-5401-80a2-157330fd9e52","excerpt":"Type challenges are a great way to\npractice using the TS type system. These are often quite challenging, but they give\nyou valuable practice thinking about how…","html":"<p><a href=\"https://github.com/type-challenges/type-challenges\">Type challenges</a> are a great way to\npractice using the TS type system. These are often quite challenging, but they give\nyou valuable practice thinking about how utility types work.</p>\n<p>Let’s tackle a curated selection of these challenges ourselves!</p>\n<h1 id=\"round-1\" style=\"position:relative;\"><a href=\"#round-1\" aria-label=\"round 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Round 1</h1>\n\n<h2 id=\"ifc-t-f\" style=\"position:relative;\"><a href=\"#ifc-t-f\" aria-label=\"ifc t f permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>If&#x3C;C, T, F></code></h2>\n<p>Implement a type that evaluates to <code>T</code> if the type <code>C</code> is <code>true</code> or <code>F</code> if <code>C</code> is <code>false</code>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6A737D\">// Implement this type</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type If&lt;C, T, F> = never' >If</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) C in type If&lt;C, T, F>' >C</data-lsp></span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) T in type If&lt;C, T, F>' >T</data-lsp></span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) F in type If&lt;C, T, F>' >F</data-lsp></span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6A737D\">// Tests</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type cases = [false, false]' >cases</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type If&lt;C, T, F> = never' >If</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"apple\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"pear\"</span><span style=\"color: #24292E\">&gt;, </span><span style=\"color: #032F62\">\"apple\"</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type If&lt;C, T, F> = never' >If</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"orange\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">42</span><span style=\"color: #24292E\">&gt;, </span><span style=\"color: #005CC5\">42</span><span style=\"color: #24292E\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcoUAAomwowEpxo5q3bdea0AH5QARlCo0l25x4HjphZWkixsvrzazm4e6JYu-EIxAGYqiJC40qSgAHJw+PJKqpo6enyCZD72FAoq6lq6USnKaTEJ6bggoAC0PTQC+D1dGZ0AkgC2xMqQY5z4fAAWAJa8RKSZZCNJ9ADCWoxaAGKlHJAAbjDDYIyQiPiI66A0imm8EgDa-lS0DAW1m-RtLQAIkUxEmkCBwNIimgQOEwNB4Lh8M+1EgdHov1U-yaaWBCEUHAA5hCtFg0PDQOThMJcABdIA'>Try</a></div></pre>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"lengthoftuplet\" style=\"position:relative;\"><a href=\"#lengthoftuplet\" aria-label=\"lengthoftuplet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>LengthOfTuple&#x3C;T></code></h2>\n<p>Implement a type that evaluates to a numeric type literal, equivalent to the\nlength of a specified tuple type <code>T</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6A737D\">// Implement this type</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type LengthOfTuple&lt;T> = never' >LengthOfTuple</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) T in type LengthOfTuple&lt;T>' >T</data-lsp></span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6A737D\">// Tests</span></div><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\"><data-lsp lsp='const Fruits: readonly [\"cherry\", \"banana\"]' >Fruits</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span><span style=\"color: #032F62\">\"cherry\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"banana\"</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">as</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\"><data-lsp lsp='type const = readonly [\"cherry\", \"banana\"]' >const</data-lsp></span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type cases = [false, true, false, false]' >cases</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type LengthOfTuple&lt;T> = never' >LengthOfTuple</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">]&gt;, </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type NotEqual&lt;X, Y> = true extends Equal&lt;X, Y> ? false : true' >NotEqual</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type LengthOfTuple&lt;T> = never' >LengthOfTuple</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">]&gt;, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type LengthOfTuple&lt;T> = never' >LengthOfTuple</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #D73A49\">typeof</span><span style=\"color: #24292E\"> <data-lsp lsp='const Fruits: readonly [\"cherry\", \"banana\"]' >Fruits</data-lsp>>, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type LengthOfTuple&lt;T> = never' >LengthOfTuple</data-lsp></span><span style=\"color: #24292E\">&lt;[]&gt;, </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcoUAAomwowEpxo5q3bdea0AH5QARlCo0l25x4HjphZWkixsvrzazm4e6JYu-EIxAGYqiJC40qSgAHJw+PJKqpo6enyCZD72FAoq6lq6USnKaTEJ6bggoAC0PTQC+D1dGZ0AkgC2xMqQY5z4fAAWAJa8RKSZZAAynADm+PMA8kmMApOQpuKgHJAAbjDDYIyQiPiIuDRwHM+gAGKCiy8XADaACIaPMYNBCMCtMCAEaKDgIxTAgC6oEUvHen3w61ANAxTyB-iotAYBVqWw4uwORxOU3ogNcWjQWgwKOErOEHOJ1EgdHouXyNVUlOph2OpwZTPQrPZzK5Gh5pPo5JFOz24rpZ1WkDgSR+fxeHPQCqVfLJwvooo1tMlgLloAADFzcCigA'>Try</a></div></pre>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"endswitha-b\" style=\"position:relative;\"><a href=\"#endswitha-b\" aria-label=\"endswitha b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>EndsWith&#x3C;A, B></code></h2>\n<p>Implement a type that evaluates to <code>true</code> if the type <code>A</code> ends with the type <code>B</code>,\notherwise false.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6A737D\">// Implement this type</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type EndsWith&lt;A, B> = any' >EndsWith</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) A in type EndsWith&lt;A, B>' >A</data-lsp></span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) B in type EndsWith&lt;A, B>' >B</data-lsp></span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6A737D\">// Tests</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type cases = [false, false]' >cases</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type EndsWith&lt;A, B> = any' >EndsWith</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #032F62\">\"ice cream\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"cream\"</span><span style=\"color: #24292E\">&gt;, </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type EndsWith&lt;A, B> = any' >EndsWith</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #032F62\">\"ice cream\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"chocolate\"</span><span style=\"color: #24292E\">&gt;, </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcoUAAomwowEpxo5q3bdea0AH5QARlCo0l25x4HjphZWkixsvrzazm4e6JYu-EIxAGYqiJC40qSgAHJw+PJKqpo6enyCZD72FAoq6lq6USnKaTEJ6bggoAC0PTQC+D1dGZ0AkgC2xMqQY5z4fAAWAJa8RKSZsvYA6ov48-QAgloAQqWKHITDYIyQiPiI66A0imm8EgDa-lS0DAW15Fs7PYAIkWNDINGgkEUYyBWiBEKhMOEWjawmRn2okDo9F+qn+PG2u3oILBj0h0NhoHh8zgNDgykU7CByNATTSaNwAF0gA'>Try</a></div></pre>\n<details>\n<summary>Click for hints</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type FirstLetter&lt;S> = S extends `${infer F}${string}` ? F : never' >FirstLetter</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) S in type FirstLetter&lt;S>' >S</data-lsp></span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) S in type FirstLetter&lt;S>' >S</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">extends</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`${</span><span style=\"color: #D73A49\">infer</span><span style=\"color: #032F62\"> </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) F' >F</data-lsp></span><span style=\"color: #032F62\">}${</span><span style=\"color: #005CC5\">string</span><span style=\"color: #032F62\">}`</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) F' >F</data-lsp></span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">never</span></div><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let firstLetterOfBird: \"b\"' style='border-bottom: solid 2px lightgrey;'>firstLetterOfBird</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type FirstLetter&lt;S> = S extends `${infer F}${string}` ? F : never' >FirstLetter</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #032F62\">\"bird\"</span><span style=\"color: #24292E\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>let firstLetterOfBird: \"b\"</span></div><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let firstLetterOfDog: \"d\"' style='border-bottom: solid 2px lightgrey;'>firstLetterOfDog</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type FirstLetter&lt;S> = S extends `${infer F}${string}` ? F : never' >FirstLetter</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #032F62\">\"dog\"</span><span style=\"color: #24292E\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>let firstLetterOfDog: \"d\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYglgJwM7ADIWMCCA8BlAPigF4o8oIAPLAOwBMkoADAEgG84aAzbWAX3YoEnAOZ8mAKChQA-LClQAXFBoQAbtgkAbDFC6IU6TNgDyXAEKI6y+MjQYsuAEQAjK04ISA9F+lQAejLauvp2Ro5mACIA9iI2BvbGznSxHt6+0oFAA'>Try</a></div></pre>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"concata-b\" style=\"position:relative;\"><a href=\"#concata-b\" aria-label=\"concata b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Concat&#x3C;A, B></code></h2>\n<p>Implement a type that concatenates two tuple types <code>A</code>, and <code>B</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6A737D\">// Implement this type</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type Concat&lt;A, B> = any' >Concat</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) A in type Concat&lt;A, B>' >A</data-lsp></span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) B in type Concat&lt;A, B>' >B</data-lsp></span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6A737D\">// Tests</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type cases = [false, false, false, false]' >cases</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Concat&lt;A, B> = any' >Concat</data-lsp></span><span style=\"color: #24292E\">&lt;[], []&gt;, []&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Concat&lt;A, B> = any' >Concat</data-lsp></span><span style=\"color: #24292E\">&lt;[], [</span><span style=\"color: #032F62\">\"hello\"</span><span style=\"color: #24292E\">]&gt;, [</span><span style=\"color: #032F62\">\"hello\"</span><span style=\"color: #24292E\">]&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Concat&lt;A, B> = any' >Concat</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #005CC5\">18</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">19</span><span style=\"color: #24292E\">], [</span><span style=\"color: #005CC5\">20</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">21</span><span style=\"color: #24292E\">]&gt;, [</span><span style=\"color: #005CC5\">18</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">19</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">20</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">21</span><span style=\"color: #24292E\">]&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  &gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">      </span><span style=\"color: #E36209\"><data-lsp lsp='type Concat&lt;A, B> = any' >Concat</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #005CC5\">42</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"a\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"b\"</span><span style=\"color: #24292E\">], [</span><span style=\"color: #E36209\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\">&gt;]&gt;,</span></div><div class='line'><span style=\"color: #24292E\">      [</span><span style=\"color: #005CC5\">42</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"a\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"b\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\">&gt;]</span></div><div class='line'><span style=\"color: #24292E\">    &gt;</span></div><div class='line'><span style=\"color: #24292E\">  &gt;</span></div><div class='line'><span style=\"color: #24292E\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcoUAAomwowEpxo5q3bdea0AH5QARlCo0l25x4HjphZWkixsvrzazm4e6JYu-EIxAGYqiJC40qSgAHJw+PJKqpo6enyCZD72FAoq6lq6USnKaTEJ6bggoAC0PTQC+D1dGZ0AkgC2xMqQY5z4fAAWAJa8RKSZZADCcBw0igwAgloAQqWKHITDYIyQiPiI66C7abwSANr+VLQMBbVbO3v0V4AXS0wOEoKBwnBH2okDo9B+qj+uwYwNBACJ5pBlMo4OjIRisTi8ZDoYZPnCGP5yTUkdsUYDXAAOLSuACcINArzQAAYtGhXASuczWWz+Xz0ILhP4yRRYfDqdVCvRFYZkQDXlg0Fp0Yp0TqAEb40EABXgY2WkHoBrgcCmZ2EBNVXK1Or1hv1oDNcAtaWttvtHEdiulhmlQKAA'>Try</a></div></pre>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h1 id=\"round-2\" style=\"position:relative;\"><a href=\"#round-2\" aria-label=\"round 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Round 2</h1>\n<h2 id=\"returnoff\" style=\"position:relative;\"><a href=\"#returnoff\" aria-label=\"returnoff permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ReturnOf&#x3C;F></code></h2>\n<p>Implement a type that emits the return type of a function type <code>F</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6A737D\">// Implement this type</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) F in type ReturnOf&lt;F>' >F</data-lsp></span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6A737D\">// Tests</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='const flipCoin: () => \"heads\" | \"tails\"' >flipCoin</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292E\">.</span><span style=\"color: #005CC5\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0.5</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"heads\"</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"tails\"</span></div><div class='line'><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\"><data-lsp lsp='const rockPaperScissors: (arg: 1 | 2 | 3) => \"rock\" | \"paper\" | \"scissors\"' >rockPaperScissors</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\"><data-lsp lsp='(parameter) arg: 1 | 2 | 3' >arg</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> <data-lsp lsp='(parameter) arg: 1 | 2 | 3' >arg</data-lsp> </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> (</span><span style=\"color: #032F62\">\"rock\"</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">as</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\"><data-lsp lsp='type const = \"rock\"' >const</data-lsp></span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> <data-lsp lsp='(parameter) arg: 2 | 3' >arg</data-lsp> </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> (</span><span style=\"color: #032F62\">\"paper\"</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">as</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\"><data-lsp lsp='type const = \"paper\"' >const</data-lsp></span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> (</span><span style=\"color: #032F62\">\"scissors\"</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">as</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\"><data-lsp lsp='type const = \"scissors\"' >const</data-lsp></span><span style=\"color: #24292E\">)</span></div><div class='line'><span style=\"color: #24292E\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type cases = [false, false, false, false, false, false, false]' >cases</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #6A737D\">// simple 1</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292E\">&lt;() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\">&gt;&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #6A737D\">// simple 2</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">123</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292E\">&lt;() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">123</span><span style=\"color: #24292E\">&gt;&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type ComplexObject = {&#10;    a: [12, \"foo\"];&#10;    bar: \"hello\";&#10;    prev(): number;&#10;}' >ComplexObject</data-lsp></span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292E\">&lt;() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type ComplexObject = {&#10;    a: [12, \"foo\"];&#10;    bar: \"hello\";&#10;    prev(): number;&#10;}' >ComplexObject</data-lsp></span><span style=\"color: #24292E\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  &gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">      </span><span style=\"color: #E36209\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\">&gt;,</span></div><div class='line'><span style=\"color: #24292E\">      </span><span style=\"color: #E36209\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292E\">&lt;() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\">&gt;&gt;</span></div><div class='line'><span style=\"color: #24292E\">    &gt;</span></div><div class='line'><span style=\"color: #24292E\">  &gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"foo\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292E\">&lt;() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"foo\"</span><span style=\"color: #24292E\">&gt;&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #032F62\">\"heads\"</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"tails\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #D73A49\">typeof</span><span style=\"color: #24292E\"> <data-lsp lsp='const flipCoin: () => \"heads\" | \"tails\"' >flipCoin</data-lsp>>></span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  &gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">      </span><span style=\"color: #032F62\">\"rock\"</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"paper\"</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"scissors\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">      </span><span style=\"color: #E36209\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #D73A49\">typeof</span><span style=\"color: #24292E\"> <data-lsp lsp='const rockPaperScissors: (arg: 1 | 2 | 3) => \"rock\" | \"paper\" | \"scissors\"' >rockPaperScissors</data-lsp>></span></div><div class='line'><span style=\"color: #24292E\">    &gt;</span></div><div class='line'><span style=\"color: #24292E\">  &gt;</span></div><div class='line'><span style=\"color: #24292E\">]</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type ComplexObject = {&#10;    a: [12, \"foo\"];&#10;    bar: \"hello\";&#10;    prev(): number;&#10;}' >ComplexObject</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='(property) a: [12, \"foo\"]' >a</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">12</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"foo\"</span><span style=\"color: #24292E\">]</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='(property) bar: \"hello\"' >bar</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"hello\"</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\"><data-lsp lsp='(method) prev(): number' >prev</data-lsp></span><span style=\"color: #24292E\">()</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">number</span></div><div class='line'><span style=\"color: #24292E\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcoUAAomwowEpxo5q3bdea0AH5QARlCo0l25x4HjphZWkixsvrzazm4e6JYu-EIxAGYqiJC40qSgAHJw+PJKqpo6enyCZD72FAoq6lq6USnKaTEJ6bggoAC0PTQC+D1dGZ0AkgC2xMqQY5z4fAAWAJa8RKSZZABKkPgC0BwA8kn0AGKlHJAAbjDDYIyQiPiIGTRwHA+gScqLxADCcIsccTGSxiYT+ACyinw8wAdNBFNw4GMgqIAAwwgCsUQARPNIIoeNiYtj8IpFs1sbgXm85vAaABrAAKilI0AAyjRlogELwJEZFNAAOaodwAH3QoHFGBBogA3v5oNtdoCBYLxGIJK5-IYXEZsXT6UTFLxqQ9zNqYqr1RI0BbddjiCyYEaTa8zRbUHrEJzENykC7QKb8OaAL4ZVZkGjG+5AgDa-k6iEWEymbn8VFoDAKtQARnA4FMEVotjs9od6EFQaA8wX8RxhA2NAmwEmU2RbYYM5A6PRs6pXJhi0qy0dK6IBxgG8Im53qN2GBa+-Q-m3KPscwAredD0sHUcy0AryasddbugN-zT9NznuLmqqC2GRnwMbLSD0GuF+szwy-kvK8sx1AZ8kTfD98y-C9f1AMFDCvWdM17e8KwPbEknzbEdwA-dgiAtCMKnH8u1vaCl1xfFCUlUASTJCksJHegIzgJIPi+X5-nrWCYKIm8F1I5DH2og0iXFB0nWgETqO9LkeUwwT-wYpiWINZlWQ5GSkC4uDL1wABdcMZEPJFjzXTd5yBeVDEUVBYwHLR8LgbF9MMHMBVQcjlGURz-GIRULgsVAOAEMYc2uEMgA'>Try</a></div></pre>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"splits-sep\" style=\"position:relative;\"><a href=\"#splits-sep\" aria-label=\"splits sep permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Split&#x3C;S, SEP></code></h2>\n<p>Implement a type that splits a string literal type <code>S</code> by a delimiter <code>SEP</code>, emitting\na tuple type containing the string literal types for all of the “tokens”</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6A737D\">// Implement this type</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) S in type Split&lt;S extends string, SEP extends string>' >S</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">extends</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) SEP in type Split&lt;S extends string, SEP extends string>' >SEP</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">extends</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6A737D\">// Tests</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type cases = [false, false, false, false, false, false]' >cases</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">      </span><span style=\"color: #E36209\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #032F62\">\"Hi! How are you?\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"z\"</span><span style=\"color: #24292E\">&gt;,</span></div><div class='line'><span style=\"color: #24292E\">      [</span><span style=\"color: #032F62\">\"Hi! How are you?\"</span><span style=\"color: #24292E\">]</span></div><div class='line'><span style=\"color: #24292E\">    &gt;</span></div><div class='line'><span style=\"color: #24292E\">  &gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">      </span><span style=\"color: #E36209\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #032F62\">\"Hi! How are you?\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\" \"</span><span style=\"color: #24292E\">&gt;,</span></div><div class='line'><span style=\"color: #24292E\">      [</span><span style=\"color: #032F62\">\"Hi!\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"How\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"are\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"you?\"</span><span style=\"color: #24292E\">]</span></div><div class='line'><span style=\"color: #24292E\">    &gt;</span></div><div class='line'><span style=\"color: #24292E\">  &gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">      </span><span style=\"color: #E36209\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #032F62\">\"Hi! How are you?\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"\"</span><span style=\"color: #24292E\">&gt;,</span></div><div class='line'><span style=\"color: #24292E\">      [</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"H\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"i\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"!\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\" \"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"H\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"o\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"w\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\" \"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"a\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"r\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"e\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\" \"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"y\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"o\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"u\"</span><span style=\"color: #24292E\">,</span></div><div class='line'><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">\"?\"</span></div><div class='line'><span style=\"color: #24292E\">      ]</span></div><div class='line'><span style=\"color: #24292E\">    &gt;</span></div><div class='line'><span style=\"color: #24292E\">  &gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #032F62\">\"\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"\"</span><span style=\"color: #24292E\">&gt;, []&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #032F62\">\"\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"z\"</span><span style=\"color: #24292E\">&gt;, [</span><span style=\"color: #032F62\">\"\"</span><span style=\"color: #24292E\">]&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"whatever\"</span><span style=\"color: #24292E\">&gt;, </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">[]&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcoUAAomwowEpxo5q3bdea0AH5QARlCo0l25x4HjphZWkixsvrzazm4e6JYu-EIxAGYqiJC40qSgAHJw+PJKqpo6enyCZD72FAoq6lq6USnKaTEJ6bggoAC0PTQC+D1dGZ0AkgC2xMqQY5z4fAAWAJa8RKSZZADKk4sMG6F2PKCI-IscAOZaG+QACvvhRyfnpYochMNgjJDHiBmrZDSKNK8CQAbX8VFoDH8hgKtWhhlAW2UO3oACIABKLACEoHRcAA7qBFNAyIQ4AInKitKiAF6o4QaeGGEEY7G4glEkmgMkU1EAXXhwn8DPB1EgdHo8NhqiZiO2DFZOLxhOJpPJlOpoHpjIRCJZmKxVK1yqNqNVpp5lIFuqFhhFMLFEqlNRlusMSJRivZKq5ltN2tlYLdCIxVNlhlRizDwYjhp1MdRWvjwdDybdqLg0YT+KzKaT4a1ilz6egxd1qMgZZD+ZjWsIVYjmbT5YEDa1lNl1oRttA9oojoY0voHoV-oZoBBfOEfYh4sHLuH8rRprp45Z-On8dnEqHI-ox2gpwuWvx80U7AAbjBtQ9D+dJ9PcHygA'>Try</a></div></pre>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"istuplet\" style=\"position:relative;\"><a href=\"#istuplet\" aria-label=\"istuplet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>IsTuple&#x3C;T></code></h2>\n<p>Implement a type <code>IsTuple</code>, which takes an input type <code>T</code> and returns whether <code>T</code> is tuple type.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6A737D\">// Implement this type</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) T in type IsTuple&lt;T>' >T</data-lsp></span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6A737D\">// Tests</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type cases = [false, false, false, false, false]' >cases</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292E\">&lt;[]&gt;, </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #005CC5\">number</span><span style=\"color: #24292E\">]&gt;, </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #D73A49\">readonly</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">]&gt;, </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292E\">&lt;{ </span><span style=\"color: #E36209\"><data-lsp lsp='(property) length: 1' >length</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> }&gt;, </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">number</span><span style=\"color: #24292E\">[]&gt;, </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcoUAAomwowEpxo5q3bdea0AH5QARlCo0l25x4HjphZWkixsvrzazm4e6JYu-EIxAGYqiJC40qSgAHJw+PJKqpo6enyCZD72FAoq6lq6USnKaTEJ6bggoAC0PTQC+D1dGZ0AkgC2xMqQY5z4fAAWAJa8RKSZZCOIjAKTkKbioIochMNgjJCI+IjroDSKabwSANr+VLQMBbWb27v0TwC6wi0bWEQNe1EgdHon1U3x2Uz+HAEYwARjBAcDyqCNOD3tCarCtvC9tBIIouHAOMpCKAnq4MWUhNjcZCPgT6HDfgBvUBTDgAc3w81Q7gAvkDQE00szDG9WfjChyib8kaiYACJVKRMJcP8gA'>Try</a></div></pre>\n<details>\n<summary>Click for hints</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type TypeExtends&lt;A, B> = A extends B ? true : false' >TypeExtends</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) A in type TypeExtends&lt;A, B>' >A</data-lsp></span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) B in type TypeExtends&lt;A, B>' >B</data-lsp></span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) A in type TypeExtends&lt;A, B>' >A</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">extends</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) B in type TypeExtends&lt;A, B>' >B</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">false</span></div><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let t0: false' >t0</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type TypeExtends&lt;A, B> = A extends B ? true : false' >TypeExtends</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">number</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">6</span><span style=\"color: #24292E\">&gt;</span></div><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let t1: true' >t1</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type TypeExtends&lt;A, B> = A extends B ? true : false' >TypeExtends</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">6</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">number</span><span style=\"color: #24292E\">&gt;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKuEFEAewIDsAmBnAPAQQBooAhAPigF4o8oIV1sSoB+KYAJwFdoAuKAMwCGAGywQAUMIjA2ABj5xIyVJlxpOAWwBGEdkQBspSdLYBGBfGUNc+ouu27SQA'>Try</a></div></pre>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h1 id=\"round-3\" style=\"position:relative;\"><a href=\"#round-3\" aria-label=\"round 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Round 3</h1>\n<h2 id=\"tupletonestedobjectp-v\" style=\"position:relative;\"><a href=\"#tupletonestedobjectp-v\" aria-label=\"tupletonestedobjectp v permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>TupleToNestedObject&#x3C;P, V></code></h2>\n<p>Given a tuple type <code>T</code> that only contains string type, and a type <code>U</code>, build an object recursively.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6A737D\">// Implement this type</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type TupleToNestedObject&lt;P, V> = any' >TupleToNestedObject</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) P in type TupleToNestedObject&lt;P, V>' >P</data-lsp></span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) V in type TupleToNestedObject&lt;P, V>' >V</data-lsp></span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6A737D\">// Tests</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type cases = [false, false, false, false]' >cases</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type TupleToNestedObject&lt;P, V> = any' >TupleToNestedObject</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #032F62\">\"a\"</span><span style=\"color: #24292E\">], </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">&gt;, { </span><span style=\"color: #E36209\"><data-lsp lsp='(property) a: string' >a</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> }&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  &gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">      </span><span style=\"color: #E36209\"><data-lsp lsp='type TupleToNestedObject&lt;P, V> = any' >TupleToNestedObject</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #032F62\">\"a\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"b\"</span><span style=\"color: #24292E\">], </span><span style=\"color: #005CC5\">number</span><span style=\"color: #24292E\">&gt;,</span></div><div class='line'><span style=\"color: #24292E\">      { </span><span style=\"color: #E36209\"><data-lsp lsp='(property) a: {&#10;    b: number;&#10;}' >a</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> { </span><span style=\"color: #E36209\"><data-lsp lsp='(property) b: number' >b</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">number</span><span style=\"color: #24292E\"> } }</span></div><div class='line'><span style=\"color: #24292E\">    &gt;</span></div><div class='line'><span style=\"color: #24292E\">  &gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">      </span><span style=\"color: #E36209\"><data-lsp lsp='type TupleToNestedObject&lt;P, V> = any' >TupleToNestedObject</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #032F62\">\"a\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"b\"</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">\"c\"</span><span style=\"color: #24292E\">], </span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\">&gt;,</span></div><div class='line'><span style=\"color: #24292E\">      { </span><span style=\"color: #E36209\"><data-lsp lsp='(property) a: {&#10;    b: {&#10;        c: boolean;&#10;    };&#10;}' >a</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> { </span><span style=\"color: #E36209\"><data-lsp lsp='(property) b: {&#10;    c: boolean;&#10;}' >b</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> { </span><span style=\"color: #E36209\"><data-lsp lsp='(property) c: boolean' >c</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\"> } } }</span></div><div class='line'><span style=\"color: #24292E\">    &gt;</span></div><div class='line'><span style=\"color: #24292E\">  &gt;,</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type TupleToNestedObject&lt;P, V> = any' >TupleToNestedObject</data-lsp></span><span style=\"color: #24292E\">&lt;[], </span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\">&gt;, </span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcoUAAomwowEpxo5q3bdea0AH5QARlCo0l25x4HjphZWkixsvrzazm4e6JYu-EIxAGYqiJC40qSgAHJw+PJKqpo6enyCZD72FAoq6lq6USnKaTEJ6bggoAC0PTQC+D1dGZ0AkgC2xMqQY5z4fAAWAJa8RKSZZIwCk5CMcNmQiOxcAPIARgBWkHT0AApaAGqlihyEw2CMB-iIGatkNIppXgSADa-iotAY-kMBVqm22u32h0gJwuVwYwIARIoMQBdLSHaCLDgAc2EWgA3qBFKgCUTiaAAL7CfxksHUNH0KHVQqcwx8yRbKYIz7Is6Xa6Y7FaDGnXFaDgCManGCs-mGSnU0CU06oBVKmCMxlc5mGVUUdnXLkw1RcwxwoV7EUo8XorEY6Wy6U0OWgU5wOBTZ5m-ka1DasOgGioP0ByDPQ0Mo38k2gM3gjnWpiCnaOpHOjnAvG+-2Bjhk4uxoPMnFAA'>Try</a></div></pre>\n<details>\n<summary>Click for hints</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type Pets = \"dog\"' >Pets</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"dog\"</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type PetsObj = {&#10;    dog: Promise&lt;number>;&#10;}' >PetsObj</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></div><div class='line'><span style=\"color: #24292E\">  [</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type Pets = \"dog\"' >Pets</data-lsp></span><span style=\"color: #24292E\">]</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #005CC5\">number</span><span style=\"color: #24292E\">&gt;</span></div><div class='line'><span style=\"color: #24292E\">}</span></div><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let x: PetsObj' >x</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type PetsObj = {&#10;    dog: Promise&lt;number>;&#10;}' style='border-bottom: solid 2px lightgrey;'>PetsObj</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type PetsObj = {\n    dog: Promise&lt;number&gt;;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChwGcoF4oCIAmB7A5mgUKJLPAgPIBGAVilAN75RQDaA0lAJYB2JiAugC5YAJywBbDgggAeLgFcxFCMIB8+AL74ANvCgAPIXESUq+APRmmVgHoB+IA'>Try</a></div></pre>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"indexoft-u\" style=\"position:relative;\"><a href=\"#indexoft-u\" aria-label=\"indexoft u permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>IndexOf&#x3C;T, U></code></h2>\n<p>Implement the type version of <code>Array.indexOf</code>, <code>IndexOf&#x3C;T, U></code> takes an Array <code>T</code>, any <code>U</code> and returns the index of the first <code>U</code> in Array <code>T</code>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6A737D\">// Implement this type</span></div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type IndexOf&lt;T, U> = any' >IndexOf</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) T in type IndexOf&lt;T, U>' >T</data-lsp></span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\"><data-lsp lsp='(type parameter) U in type IndexOf&lt;T, U>' >U</data-lsp></span><span style=\"color: #24292E\">&gt; </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6A737D\">// Tests</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='type cases = [false, false, false]' >cases</data-lsp></span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type IndexOf&lt;T, U> = any' >IndexOf</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">], </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">&gt;, </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type IndexOf&lt;T, U> = any' >IndexOf</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">6</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">8</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">4</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">7</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">9</span><span style=\"color: #24292E\">], </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">&gt;, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type Equal&lt;X, Y> = &lt;T>() => T extends X ? 1 : 2 extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #E36209\"><data-lsp lsp='type IndexOf&lt;T, U> = any' >IndexOf</data-lsp></span><span style=\"color: #24292E\">&lt;[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">], </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">&gt;, -</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292E\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcoUAAomwowEpxo5q3bdea0AH5QARlCo0l25x4HjphZWkixsvrzazm4e6JYu-EIxAGYqiJC40qSgAHJw+PJKqpo6enyCZD72FAoq6lq6USnKaTEJ6bggoAC0PTQC+D1dGZ0AkgC2xMqQY5z4fAAWAJa8RKSZZCPcrADySUxaAKqlihyEw2CMkIj4iBmrZDSKabwSANr+VLQMBbWbXDt7V6uLRoLQYAC6IOEWlcwmhH2okDo9B+qj+APor1BoAAbGCtAAOLRYGFaADs+NAAE5IaAMND0HCNAiviiamitpRdpiAAxaPmgHm0tAMrqw4S4cFAA'>Try</a></div></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#round-1\">Round 1</a></p>\n<ul>\n<li><a href=\"#ifc-t-f\"><code>If&#x3C;C, T, F></code></a></li>\n<li><a href=\"#lengthoftuplet\"><code>LengthOfTuple&#x3C;T></code></a></li>\n<li><a href=\"#endswitha-b\"><code>EndsWith&#x3C;A, B></code></a></li>\n<li><a href=\"#concata-b\"><code>Concat&#x3C;A, B></code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#round-2\">Round 2</a></p>\n<ul>\n<li><a href=\"#returnoff\"><code>ReturnOf&#x3C;F></code></a></li>\n<li><a href=\"#splits-sep\"><code>Split&#x3C;S, SEP></code></a></li>\n<li><a href=\"#istuplet\"><code>IsTuple&#x3C;T></code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#round-3\">Round 3</a></p>\n<ul>\n<li><a href=\"#tupletonestedobjectp-v\"><code>TupleToNestedObject&#x3C;P, V></code></a></li>\n<li><a href=\"#indexoft-u\"><code>IndexOf&#x3C;T, U></code></a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/making-typescript-stick/06-challenge-2/"},"frontmatter":{"title":"Challenge 2: Type Challenges","course":"making-typescript-stick","date":"March 22, 2022","description":"We'll explore solving problems using only TypeScript's types\n"}}},"pageContext":{"slug":"/course/making-typescript-stick/06-challenge-2/","title":"Challenge 2: Type Challenges","course":"making-typescript-stick","order":6,"previous":{"fields":{"slug":"/course/making-typescript-stick/05-does-it-compile/"},"frontmatter":{"title":"Game 1: Does it compile?","order":5,"course":"making-typescript-stick","isExercise":null}},"next":{"fields":{"slug":"/course/making-typescript-stick/07-typepardy/"},"frontmatter":{"title":"Game 2: Typepardy","order":7,"course":"making-typescript-stick","isExercise":null}}}},
    "staticQueryHashes": ["2074799692","2841359383"]}