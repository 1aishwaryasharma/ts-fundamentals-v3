{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/course/fundamentals-v3/04-objects-arrays-and-tuples/","result":{"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"}]}},"markdownRemark":{"id":"d452fbbb-0d10-5388-a6a6-54264f486ef2","excerpt":"Now that we know how to type simple variables and functions, let’s make things\na bit more interesting with collections: in JavaScript this includes Objects and…","html":"<p>Now that we know how to type simple variables and functions, let’s make things\na bit more interesting with collections: in JavaScript this includes Objects and Arrays.</p>\n<h2 id=\"objects\" style=\"position:relative;\"><a href=\"#objects\" aria-label=\"objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objects</h2>\n<p>In general, object types are described by defining</p>\n<ul>\n<li>The names of the properties that are (or may be) present</li>\n<li>The types of those properties</li>\n</ul>\n<p>For example, if we had the concept of a <code>Car</code> like “2002 Toyota Corolla” with properties</p>\n<ul>\n<li><code>make</code>: the manufacturer (in this case, “Toyota”)</li>\n<li><code>model</code>: the particular product (in this case, “Corolla”)</li>\n<li><code>year</code>: the “model year” of the product (in this case, 2002)</li>\n</ul>\n<p>We could create a JavaScript object to represent this information</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  make: </span><span style=\"color: #A31515\">\"Toyota\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  model: </span><span style=\"color: #A31515\">\"Corolla\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  year: </span><span style=\"color: #098658\">2002</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>The type that describes this object is</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  make: </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  model: </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  year: </span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>We can use this type using the same <code>:foo</code> notation we’ve already discussed</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let car: {&amp;#13;    make: string;&amp;#13;    model: string;&amp;#13;    year: number;&amp;#13;}' >car</data-lsp></span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAxghgTgLggbwFAQgWxgaxEgZzDgEsA7AcwG50sB7AExGEOPOtoE8R4kyBXTACMQcGgF8qQA'>Try</a></div></pre>\n<p>We could create a function to print values of this type to the console</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Print information about a car to the console</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">car</span><span style=\"color: #008000\"> - the car to print</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printCar(car: {&amp;#13;    make: string;&amp;#13;    model: string;&amp;#13;    year: number;&amp;#13;}): void' >printCar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) car: {&amp;#13;    make: string;&amp;#13;    model: string;&amp;#13;    year: number;&amp;#13;}' >car</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) car: {&amp;#13;    make: string;&amp;#13;    model: string;&amp;#13;    year: number;&amp;#13;}' >car</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) car: {&amp;#13;    make: string;&amp;#13;    model: string;&amp;#13;    year: number;&amp;#13;}' >car</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> (</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) car: {&amp;#13;    make: string;&amp;#13;    model: string;&amp;#13;    year: number;&amp;#13;}' >car</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">)`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgFAnAlgOwC6RQMwPbwLYCGqi2ykBARtgK7oGQDGB8kq2rAFgKaOkDO2ADZcoMAAIAHZgTyNmkALSceTFm0gSkaUcHCZqyBsVIatqAMLMAFKoBckAN6RCAay72+qLQHMA3M+wAEy5BDy8UP0gATy5me2RqPAouFgBfAEpHKF5kAWEAOkFsbysAAwASB1V81y5UyErqvCCQ+qtG5nyY5gzS9N9wVKA'>Try</a></div></pre>\n<p>At this point, you can start to see that we see “completions” when we start\nusing <code>car</code> in the body of this function</p>\n<h2 id=\"array-types\" style=\"position:relative;\"><a href=\"#array-types\" aria-label=\"array types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Types</h2>\n<p>Describing types for arrays is often as easy as adding <code>[]</code> to the end of the\narray member’s type. For example the type for <em>an array of strings</em> would look like <code>string[]</code></p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const fileExtensions: string[]' style='border-bottom: solid 2px lightgrey;'>fileExtensions</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\">&apos;js&apos;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&apos;ts&apos;</span><span style=\"color: #000000\">];</span></div><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>const fileExtensions: string[]</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAZgSwDYFMCiAPKLIPBGAXhgG0ByAKwjIBoYypqBdAbgCgB6DmH3gPQD8QA'>Try</a></div></pre>\n<p>You could use our more complicated car type too, following the type for our\n3-property object with <code>[]</code> as shown in the tooltip below</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const cars: {&amp;#13;    make: string;&amp;#13;    model: string;&amp;#13;    year: number;&amp;#13;}[]' >cars</data-lsp></span><span style=\"color: #000000\"> = [</span></div><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const cars: {\n    make: string;\n    model: string;\n    year: number;\n}[]</span>\n<div class='line'><span style=\"color: #000000\">  {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) make: string' >make</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&apos;Toyota&apos;</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) model: string' >model</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&apos;Corolla&apos;</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) year: number' >year</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2002</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBMCGAnCMC8MDaAoGMD0euMAegPw4wDeFuAtvANYCmAXDAOQAqIAniFPHYAaGjFogAJkwA2bdgGEQiENOmCRRGDyZI2AJgAMBvRpgBfEQF0A3EA'>Try</a></div></pre>\n<h2 id=\"tuples\" style=\"position:relative;\"><a href=\"#tuples\" aria-label=\"tuples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuples</h2>\n<p>Sometimes we may want to work with a multi-element, ordered data structure, where\nposition of each item has some special meaning or convention. We call this kind of\nstructure a <a href=\"https://en.wikipedia.org/wiki/Tuple\">tuple</a>.</p>\n<p>Let’s imagine we define a convention where we can represent the same “2002 Toyota Corrola”\nas</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myCar</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">2002</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Toyota\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Corolla\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #008000\">// destructured assignment is conveninent here!</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> [ </span><span style=\"color: #0070C1\">year</span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\">make</span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\">model</span><span style=\"color: #000000\"> ] = </span><span style=\"color: #001080\">myCar</span></div></code></div></pre>\n<p>Let’s see how TypeScript handles inferrence in this case</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myCar: (string | number)[]' style='border-bottom: solid 2px lightgrey;'>myCar</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">2002</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Toyota\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Corolla\"</span><span style=\"color: #000000\">]</span></div><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let myCar: (string | number)[]</span>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> [ </span><span style=\"color: #0070C1\"><data-lsp lsp='const year: string | number' >year</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\"><data-lsp lsp='const make: string | number' >make</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\"><data-lsp lsp='const model: string | number' style='border-bottom: solid 2px lightgrey;'>model</data-lsp></span><span style=\"color: #000000\"> ] = </span><span style=\"color: #001080\"><data-lsp lsp='let myCar: (string | number)[]' >myCar</data-lsp></span></div><span class='popover-prefix'>                     </span><span class='popover'><div class='arrow'></div>const model: string | number</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgngwgQwE4QLwQNoCYAMOsA0EARACoD2M5YCxRxc5S5wwtAugFAD03E--AHoB+TgGNyAOwDOkDBBghkRKAgDWIFeQAmIYBHZpo8ZDz4CLlqxBFA'>Try</a></div></pre>\n<p>Interesting, we’re seeing some <code>|</code> symbol — for now let’s just consider that to\nbe the type equivalent of <code>OR</code>, meaning <code>string | number</code> means “either a string or a number”.</p>\n<p>This is not quite what we wanted, in that </p>\n<ul>\n<li>it allows us to break our convention where the year <em>always</em> comes first</li>\n<li>it doesn’t quite help us with the “finite length” aspect of tuples</li>\n</ul>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myCar: (string | number)[]' >myCar</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">2002</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Toyota\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Corolla\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let myCar: (string | number)[]' >myCar</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\">\"Honda\"</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2017</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Accord\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Sedan\"</span><span style=\"color: #000000\">] </span><span style=\"color: #008000\">// not the same convention or length!</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgngwgQwE4QLwQNoCYAMOsA0EARACoD2M5YCxRxc5S5wwtAugFCyIrobEAEuQB2AE1pFcARgDs9AIIBjJUzF0SAZRASRxdhAD0hiCOoQwACxAQAzgig3VIgG4gRYAJaiITCKBEAcysAQiA'>Try</a></div></pre>\n<p>In this case, TypeScript could infer myCar to be one of two things. Which\ndo you think is more commonly used?</p>\n<div class=\"custom-block question\"><div class=\"custom-block-heading\">🙋 Which is the more useful assumption, most of the time?</div><div class=\"custom-block-body\"><ol>\n<li><code>[2002, \"Toyota\", \"Corolla\"]</code> should be assumed to be a mixed array of numbers and strings</li>\n<li><code>[2002, \"Toyota\", \"Corolla\"]</code> should be assumed to be a tuple of fixed length (3)</li>\n</ol><p><strong>Consider</strong>: Which do you use more often?</p></div></div>\n<p>If TypeScript made a <em>more specific</em> assumption as it inferred the type of <code>myCar</code>,\nit would get in our way much of the time</p>\n<p>There’s no major problem here, but it does mean that <strong>we need to explicitly state the type of a tuple</strong>.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myCar: [number, string, string]' >myCar</data-lsp></span><span style=\"color: #000000\">: [</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">] = [</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">2002</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Toyota\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Corolla\"</span></div><div class='line'><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #008000\">// not the right convention</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let myCar: [number, string, string]' >myCar</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\"><data-err>&quot;Honda&quot;</data-err></span><span style=\"color: #000000\">, </span><span style=\"color: #098658\"><data-err>2017</data-err></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Accord\"</span><span style=\"color: #000000\">]</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</br>Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322<br/>2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</br>Type 'number' is not assignable to type 'string'.</span><div class='line'><span style=\"color: #008000\">// too many items</span></div><div class='line'><span style=\"color: #001080\"><data-err><data-lsp lsp='let myCar: [number, string, string]' >myCar</data-lsp></data-err></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">2017</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Honda\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Accord\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Sedan\"</span><span style=\"color: #000000\">]</span></div><span class=\"error\"><span>Type '[number, string, string, string]' is not assignable to type '[number, string, string]'.\n  Source has 4 element(s) but target allows only 3.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '[number, string, string, string]' is not assignable to type '[number, string, string]'.\n  Source has 4 element(s) but target allows only 3.</span><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> [ </span><span style=\"color: #0070C1\"><data-lsp lsp='const year: number' style='border-bottom: solid 2px lightgrey;'>year</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\"><data-lsp lsp='const make: string' >make</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\"><data-lsp lsp='const model: string' >model</data-lsp></span><span style=\"color: #000000\"> ] = </span><span style=\"color: #001080\"><data-lsp lsp='let myCar: [number, string, string]' >myCar</data-lsp></span></div><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>const year: number</span>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='const make: string' style='border-bottom: solid 2px lightgrey;'>make</data-lsp></span></div><span class='popover-prefix'> </span><span class='popover'><div class='arrow'></div>const make: string</span>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='const model: string' style='border-bottom: solid 2px lightgrey;'>model</data-lsp></span></div><span class='popover-prefix'> </span><span class='popover'><div class='arrow'></div>const model: string</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vVnnsAoAG0gBdQBbATwGEBDaVAbQDsBXSgIxgBpREZaAEtWAc36CR4gLqgAvKGaFQ6AAxq0-AEQAVONThl62nbQRxixE4RmEQoVkdBkAFpFAixrigGM4rABukKxkwgGENAzQCkraABIBACYm-GhqAIwA7DoAgr7+0Enadg5kcHBU9KzUoMJkkJSIkXSMsczp2TqJrCmmoNr5hcU6AMqQKawlhP6sgkqg1JCM-JT0ANaQq3BJkMSgcopRjPZgqucAegD8kRuQp6DXkTt7D9dAA'>Try</a></div></pre>\n<p>Now, we get errors in the places we expect, and all types work out as we hoped.</p>","tableOfContents":"<ul>\n<li><a href=\"#objects\">Objects</a></li>\n<li><a href=\"#array-types\">Array Types</a></li>\n<li><a href=\"#tuples\">Tuples</a></li>\n</ul>","frontmatter":{"title":"Objects, Arrays and Tuples","course":"fundamentals-v3","date":"May 01, 2015","description":"Now that we know how to type simple variables and functions, let's make things\na bit more interesting with collections: in JavaScript this includes Objects and Arrays.\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/04-objects-arrays-and-tuples/","title":"Objects, Arrays and Tuples","course":"fundamentals-v3","order":4,"previous":{"fields":{"slug":"/course/fundamentals-v3/03-variables-and-values/"},"frontmatter":{"title":"Variables and Values","order":3,"course":"fundamentals-v3"}},"next":{"fields":{"slug":"/course/fundamentals-v3/05-structural-vs-nominal-types/"},"frontmatter":{"title":"Structural vs. Nominal Types","order":5,"course":"fundamentals-v3"}}}},"staticQueryHashes":["1246554614","2841359383"]}