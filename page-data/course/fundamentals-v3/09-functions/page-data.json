{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/course/fundamentals-v3/09-functions/","result":{"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"}]}},"markdownRemark":{"id":"1f0f9925-6d38-59e1-a449-d99e9648469a","excerpt":"We’ve dealt with function argument and return types, but there\nare a few more in-depth features we need to cover. Callable types Both type aliases and and…","html":"<p>We’ve dealt with function argument and return types, but there\nare a few more in-depth features we need to cover.</p>\n<h2 id=\"callable-types\" style=\"position:relative;\"><a href=\"#callable-types\" aria-label=\"callable types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callable types</h2>\n<p>Both type aliases and and interfaces offer the capability for describing call signatures</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface TwoNumberCalculation' >TwoNumberCalculation</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #267F99\">number</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type TwoNumberCalc = (x: number, y: number) => number' >TwoNumberCalc</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">number</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const add: TwoNumberCalculation' >add</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface TwoNumberCalculation' >TwoNumberCalculation</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' style='border-bottom: solid 2px lightgrey;'>a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' style='border-bottom: solid 2px lightgrey;'>a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span></div><span class='popover-prefix'>                                  </span><span class='popover'><div class='arrow'></div>(parameter) a: number</span>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const subtract: TwoNumberCalc' >subtract</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type TwoNumberCalc = (x: number, y: number) => number' >TwoNumberCalc</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' style='border-bottom: solid 2px lightgrey;'>x</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' style='border-bottom: solid 2px lightgrey;'>x</data-lsp></span><span style=\"color: #000000\"> - </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span></div><span class='popover-prefix'>                                </span><span class='popover'><div class='arrow'></div>(parameter) x: number</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgCoHcD2A5ArgWwCNoBhOAGwV3LjGExGQG8AoZZACgA8AuZEAsSgAaZAE8+AotACUkwdBYBfFizBiADigw4FUMpWQBeTr357RE89KgzjAPmtDVCBgGcwyOABNvfHXg2BlQ0dAzGnHCihHZGjnDIANTIhCwA9GnsWdk5uXm5AHoA-CyuIB7IbriEYFCIYP5YgULBEdyWsY5cyAC04umZ+UPDWcVAA'>Try</a></div></pre>\n<p>Let’s stop to notice a few things</p>\n<ul>\n<li>The return type for an interface is <code>:number</code>, and for the type alias it’s <code>=> number</code></li>\n<li>Because we provide types for the functions <code>add</code> and <code>subtract</code>, we don’t need to provide type annotations for each individual function’s argument list or return type</li>\n</ul>\n<h3 id=\"void\" style=\"position:relative;\"><a href=\"#void\" aria-label=\"void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>void</code><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></h3>\n<p>Sometimes functions don’t return anything, and we know from\nexperience with JS, what actually happens in the situation below\nis that <code>x</code> will be <code>undefined</code></p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printFormattedJSON(obj: string[]): void' >printFormattedJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string[]' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #267F99\"><data-lsp lsp='var JSON: JSON' >JSON</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) JSON.stringify(value: any, replacer?: (string | number)[] | null | undefined, space?: string | number | undefined): string (+1 overload)' >stringify</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string[]' >obj</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"  \"</span><span style=\"color: #000000\">))</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const x: void' style='border-bottom: solid 2px lightgrey;'>x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function printFormattedJSON(obj: string[]): void' >printFormattedJSON</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">])</span></div><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>const x: void</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAYnVBbAQyigFMATAKQGUB5AOQAo4AjAKwC5EBnKdMAcwDaAXQCUiAN4AoRIggIucADYkAdErj8G1eqp59+MYAE8mbADSIwIJUssAiWfdGipAXylT5YHogAeiAC8KHzYuITE5DqMgvYAFiS2cPYOAO64SmT2YlIA9LmysgB6APxAA'>Try</a></div></pre>\n<p>so what is it showing up as <code>void</code>?</p>\n<p><code>void</code> is a special type, that’s specifically for use when describing\nfunction return values, and it has the following meaning:</p>\n<blockquote>\n<p>The return value of a void function is intended to be <em>ignored</em></p>\n</blockquote>\n<p>We could type functions as returning <code>undefined</code>, but there are some interesting\ndifferences that highlight the reason for <code>void</code>’s existence</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function invokeInFourSeconds(callback: () => undefined): void' >invokeInFourSeconds</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: () => undefined' >callback</data-lsp></span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">undefined</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) callback: () => undefined' >callback</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4000</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function invokeInFiveSeconds(callback: () => void): void' >invokeInFiveSeconds</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: () => void' >callback</data-lsp></span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">void</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) callback: () => void' >callback</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5000</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const values: number[]' >values</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">[] = []</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function invokeInFourSeconds(callback: () => undefined): void' >invokeInFourSeconds</data-lsp></span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const values: number[]' >values</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">))</span></div><span class=\"error\"><span>Type 'number' is not assignable to type 'undefined'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'number' is not assignable to type 'undefined'.</span><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function invokeInFiveSeconds(callback: () => void): void' >invokeInFiveSeconds</data-lsp></span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const values: number[]' >values</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">))</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNAqIDc4BrSASSIDE4DoBlSEtQAmiABQkAhgBspAIwkkmqUQEpQAXgB8oYkMh46kIWoDeOUKESQyAFQoBbSNzLjpchUwA0oACwAGAJUcAF98YnIqGjpGFnYOCnpIfkEiEVcZeUVlNS1QRgpjUDMLK1sHJwIXSQyPbwBWAL8g0JwUxDI86QJIFFAiAntZGABtAF0NUDGcaOY2Tm4+AWExVQ1tei6egDoABwJEAAtRHxUgmdjOBKSl1JWc9c3EXf2jk5UgA'>Try</a></div></pre>\n<p>It happens that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>Array.prototype.push</code></a> returns a number,\nand our <code>invokeInFourSeconds</code> function above is unhappy about this being returned from the callback.</p>\n<h3 id=\"construct-signatures\" style=\"position:relative;\"><a href=\"#construct-signatures\" aria-label=\"construct signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Construct signatures</h3>\n<p>Construct signatures are similar to call signatures, except they describe what should happen with the <code>new</code> keyword.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface DateConstructor' >DateConstructor</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) value: number' >value</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #267F99\"><data-lsp lsp='interface Date' >Date</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let MyDateConstructor: DateConstructor' >MyDateConstructor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface DateConstructor' >DateConstructor</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor' >Date</data-lsp></span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const d: Date' style='border-bottom: solid 2px lightgrey;'>d</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='let MyDateConstructor: DateConstructor&amp;#13;new () => Date (+5 overloads)' >MyDateConstructor</data-lsp></span><span style=\"color: #000000\">()</span></div><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>const d: Date</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYCsGBQBLAOwBcYAzAQwGNJQARC0gYTkMWOgFcriFQBvXKFCFIAd1AAKAG4UANp0ipCnALYAjGAEpUDUrgC+uXHMjFQAWQCeeyCzYduvaLsZ3W7Ljz4Beem9wqD3MAE1A-UQlrW3tPJwRJLVwQYWEAPQB+IA'>Try</a></div></pre>\n<p>These are rare, but now you know what they are, if you ever happen to come across them</p>\n<h2 id=\"function-overloads\" style=\"position:relative;\"><a href=\"#function-overloads\" aria-label=\"function overloads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function overloads</h2>\n<p>Imagine the following situation</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'><span style=\"color: #800000\">&lt;iframe</span><span style=\"color: #000000\"> </span><span style=\"color: #FF0000\">src</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"https://example.com\"</span><span style=\"color: #000000\"> </span><span style=\"color: #CD3131\">/</span><span style=\"color: #800000\">&gt;</span></div><div class='line'><span style=\"color: #008000\">&lt;!-- // --&gt;</span></div><div class='line'><span style=\"color: #800000\">&lt;form&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;input</span><span style=\"color: #000000\"> </span><span style=\"color: #FF0000\">type</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"text\"</span><span style=\"color: #000000\"> </span><span style=\"color: #FF0000\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"name\"</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;input</span><span style=\"color: #000000\"> </span><span style=\"color: #FF0000\">type</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"text\"</span><span style=\"color: #000000\"> </span><span style=\"color: #FF0000\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"email\"</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;input</span><span style=\"color: #000000\"> </span><span style=\"color: #FF0000\">type</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"password\"</span><span style=\"color: #000000\"> </span><span style=\"color: #FF0000\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"password\"</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;input</span><span style=\"color: #000000\"> </span><span style=\"color: #FF0000\">type</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"submit\"</span><span style=\"color: #000000\"> </span><span style=\"color: #FF0000\">value</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"Login\"</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'><span style=\"color: #800000\">&lt;/form&gt;</span></div></code></div></pre>\n<p>What if we had to create a function that allowed us to register a “main event listener”.</p>\n<ul>\n<li>If we’re passed a <code>form</code> element, we should allow registration of a “submit callback”</li>\n<li>If we’re passed an <code>iframe</code> element, we should allow registration of a “postmessage callback”</li>\n</ul>\n<p>Let’s give it a shot:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) data: FormData' >data</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface FormData' >FormData</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">void</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent) => void' >MessageHandler</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) evt: MessageEvent&amp;lt;any>' >evt</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface MessageEvent&amp;lt;T = any>' >MessageEvent</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">void</span></div>\n<div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement | HTMLIFrameElement, handler: FormSubmitHandler | MessageHandler): void' >handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) elem: HTMLFormElement | HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) handler: FormSubmitHandler | MessageHandler' >handler</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent&amp;lt;any>) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #000000\">) {}</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const myFrame: HTMLIFrameElement' style='border-bottom: solid 2px lightgrey;'>myFrame</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Document.getElementsByTagName&amp;lt;&amp;quot;iframe&amp;quot;>(qualifiedName: &amp;quot;iframe&amp;quot;): HTMLCollectionOf&amp;lt;HTMLIFrameElement> (+2 overloads)' >getElementsByTagName</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"iframe\"</span><span style=\"color: #000000\">)[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]</span></div><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const myFrame: HTMLIFrameElement</span>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement | HTMLIFrameElement, handler: FormSubmitHandler | MessageHandler): void' >handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const myFrame: HTMLIFrameElement' >myFrame</data-lsp></span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) val: any' style='border-bottom: solid 2px lightgrey;'>val</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><span class='popover-prefix'>                          </span><span class='popover'><div class='arrow'></div>(parameter) val: any</span>\n<div class='line'><span style=\"color: #000000\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFBb6LWgBi0ATvAMoCuARvGwAJMpAAmyau1ABeUAAoxZLGWJtOAEWVkAlLIB8oAG7RUY+o2YBZapUpkA5tRHjJ0ufOpGsxG3cfUAKJG1JBYejKGJma0tCQ8kOhYqNCQoAAWohLUVmSokMGhWPK0oKDUkvDEQgAqVgAy6vCBlUWgAD6gtQ2wLOxk8EGtYQA0pRlZbmoc3PyCWC7Z0p1+9k6LbrR6AN4AvrHoqZRYoPD4fQPMcmLQ6DyDYQB0Tlgt1A9YlABC+DWOAHKXeQAIlQJH6g2BOgA2gAGAC6tBAZRRAD0APy0TKuHJ5AohMLyM4XQYjBRGCgRQzbcbIlH0hmM+kY2i7HRAA'>Try</a></div></pre>\n<p>This isn’t good — we allow too many possibilities here, including things we don’t aim to support (e.g., using a <code>HTMLIFrameElement</code> in combination with the <code>FormSubmitHandler</code>, which doesn’t make much sense)</p>\n<p>We can solve this using <em>function overloads</em>, where we define multiple function heads that serve as entry points to a single implementation</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) data: FormData' >data</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface FormData' >FormData</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">void</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent) => void' >MessageHandler</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) evt: MessageEvent&amp;lt;any>' >evt</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface MessageEvent&amp;lt;T = any>' >MessageEvent</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">void</span></div>\n<div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) elem: HTMLFormElement' >elem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) handler: FormSubmitHandler' >handler</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLIFrameElement, handler: MessageHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) elem: HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) handler: MessageHandler' >handler</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent&amp;lt;any>) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) elem: HTMLFormElement | HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) handler: FormSubmitHandler | MessageHandler' >handler</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent&amp;lt;any>) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #000000\">) {}</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const myFrame: HTMLIFrameElement' style='border-bottom: solid 2px lightgrey;'>myFrame</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Document.getElementsByTagName&amp;lt;&amp;quot;iframe&amp;quot;>(qualifiedName: &amp;quot;iframe&amp;quot;): HTMLCollectionOf&amp;lt;HTMLIFrameElement> (+2 overloads)' >getElementsByTagName</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"iframe\"</span><span style=\"color: #000000\">)[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]</span></div><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const myFrame: HTMLIFrameElement</span>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const myForm: HTMLFormElement' style='border-bottom: solid 2px lightgrey;'>myForm</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Document.getElementsByTagName&amp;lt;&amp;quot;form&amp;quot;>(qualifiedName: &amp;quot;form&amp;quot;): HTMLCollectionOf&amp;lt;HTMLFormElement> (+2 overloads)' >getElementsByTagName</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"form\"</span><span style=\"color: #000000\">)[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]</span></div><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const myForm: HTMLFormElement</span>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLIFrameElement, handler: MessageHandler): any (+1 overload)' style='border-bottom: solid 2px lightgrey;'>handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const myFrame: HTMLIFrameElement' >myFrame</data-lsp></span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) val: MessageEvent&amp;lt;any>' >val</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>function handleMainEvent(elem: HTMLIFrameElement, handler: MessageHandler): any (+1 overload)</span>\n<div class='line'><span style=\"color: #000000\">})</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' style='border-bottom: solid 2px lightgrey;'>handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const myForm: HTMLFormElement' >myForm</data-lsp></span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) val: FormData' >val</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)</span>\n<div class='line'><span style=\"color: #000000\">})</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFBb6LWgBi0ATvAMoCuARvGwAJMpAAmyau1ABeUAAoxZLGWJtOAEWVkAlLIB8oAG7RUY+o2YBZapUpkA5tRHjJ0ufOpGsxG3cfUAKJG1JBYejKGJma0tCQ8kOhYqNCQoAAWohLUVmSokMGhWPK0oKDUkvDEQgAqVgAy6vCBlUUANKUZWW5qHNz8glgu2ey0OnEJSSlpma45eQUhYSVlFdRVoLUNsCzsZPBBrWEdZbMjvrb2TsNuYxOJyaldc7n5hcudaxtbjX0t60VQAAfTZ1eo7PYHf4HY6dM49Vh9XgCYTdKTA0B+K7ONGjPQAbwAvrF0KlKFhQPB8Lt9sw5GJoOgeDCsAA6JxYaFFSgAIXwNUcADlafIAESoEiQ6iinQAbQADABdWggMpqgB6AH5aKTIOTKdS+rJQAymSz2dROUcsLz+UKRaKSH0ZQrlaq1aAtbR4fM3ktilSaQc2gojBQIoZ8Z13R6yl7CeMfa9FkV5IG+iH5GHkBHQFGyjHY-GdEA'>Try</a></div></pre>\n<p>Look at that! We’ve effectively created a linkage between\nthe first and second arguments, which allows our callback’s\nargument type to change, based on the type of <code>handleMainEvent</code>’s first argument</p>\n<p>Let’s take a closer look at the function declaration</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) elem: HTMLFormElement' >elem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) handler: FormSubmitHandler' >handler</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLIFrameElement, handler: MessageHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) elem: HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) handler: MessageHandler' >handler</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent&amp;lt;any>) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) elem: HTMLFormElement | HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) handler: FormSubmitHandler | MessageHandler' >handler</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent&amp;lt;any>) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #000000\">) {}</span></div>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' style='border-bottom: solid 2px lightgrey;'>handleMainEvent</data-lsp></span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFBb6LWgBi0ATvAMoCuARvGwAJMpAAmyau1ABeUAAoxZLGWJtOAEWVkAlLIB8oAG7RUY+o2YBZapUpkA5tRHjJ0ufOpGsxG3cfUAKJG1JBYejKGJma0tCBgALRJ6DxYSQm0JDyQ6Fio0JCgABaiEtRWZKiQwaFY8rSgoNSS8MRCACpWADLq8IEttQA0DcWlbmoc3PyCWC5l7LQ6mdm5+YUlruWV1SFh9Y3N1K2gHd2wLOxk8EEDYcONG-O+tvZOc26Lyzl5BaObFVUansRodjqcepN+kdaqAAD4nTpdc6Xa5Q653EaPcasSa8ATCMZSOGgPyvZyEhZ6ADeAF9YlitoDdlg4mAAHoAfiAA'>Try</a></div></pre>\n<p>This looks like three function declarations, but it’s really\ntwo “heads” that define an <a href=\"https://262.ecma-international.org/#prod-ArgumentList\">argument list</a> and a return type,\nfollowed by our original implementation.</p>\n<p>If you take a close look at tooltips and autocomplete feedback you get from the TypeScript language server,\nit’s clear that you’re only able to call into the two “heads”, leaving the underlying “third head + implementation” inaccessable from the outside world</p>\n<p>One last thing that’s important to note: that “implementation” function signature must be <em>general enough to include everything that’s possible through the exposed first and second function heads</em>. For example, this wouldn’t work</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) elem: HTMLFormElement' >elem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) handler: FormSubmitHandler' >handler</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type FormSubmitHandler = (data: FormData) => void' >FormSubmitHandler</data-lsp></span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-err><data-lsp lsp='function handleMainEvent(elem: HTMLIFrameElement, handler: MessageHandler): any (+1 overload)' >handleMainEvent</data-lsp></data-err></span><span style=\"color: #000000\">(</span></div><span class=\"error\"><span>This overload signature is not compatible with its implementation signature.</span><span class=\"code\">2394</span></span><span class=\"error-behind\">This overload signature is not compatible with its implementation signature.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) elem: HTMLIFrameElement' >elem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLIFrameElement' >HTMLIFrameElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) handler: MessageHandler' >handler</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type MessageHandler = (evt: MessageEvent&amp;lt;any>) => void' >MessageHandler</data-lsp></span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' >handleMainEvent</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) elem: HTMLFormElement' >elem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLFormElement' >HTMLFormElement</data-lsp></span><span style=\"color: #000000\">) {}</span></div>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)' style='border-bottom: solid 2px lightgrey;'>handleMainEvent</data-lsp></span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>function handleMainEvent(elem: HTMLFormElement, handler: FormSubmitHandler): any (+1 overload)</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCcAWAUCBAHZwCSAtgA4A2AlgMa0AuAgkQJ6oBmAhtYpDxN2lSKABiCcgGUArgCNyzABI8iAE2oxQAXlAAKdTyY9Uk6OQAixngEpdAPlAA3OLXVCRYgLKREiHgBzSFUNLWhdA0hnJlRffyDIAFFnSCImex0nV3c8AkIAWiL6WSYigrwuWSJ6Jlo4IlAACzVNSG8eWiIUtKZ9PFBQSC1yVGUAFW8AGXNyJJHegBoB5tbwsyk5RRU1mDxbSura+saWsPbO7tT0-sHhyFHQCenScWgecmSF9OXBs7boHE-AFgqEAftDjU6g1VucOl0ejd7o9njMpPMHr17ABvAC+eX+WnhV16+VAAD0APxAA'>Try</a></div></pre>\n<h2 id=\"this-types\" style=\"position:relative;\"><a href=\"#this-types\" aria-label=\"this types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>this</code> types</h2>\n<p>Sometimes we have a free-standing function that has a strong opinion around\nwhat <code>this</code> will end up being, at the time it’s invoked.</p>\n<p>For example, if we had a DOM event listener for a button</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'><span style=\"color: #800000\">&lt;button</span><span style=\"color: #000000\"> </span><span style=\"color: #FF0000\">onClick</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"myClickHandler\"</span><span style=\"color: #800000\">&gt;</span><span style=\"color: #000000\">Click Me!</span><span style=\"color: #800000\">&lt;/button&gt;</span></div></code></div></pre>\n<p>We could define <code>myClickHandler</code> as follows</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function myClickHandler(event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) event: Event' >event</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Event' >Event</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >disabled</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span></div><span class=\"error\"><span>'this' implicitly has type 'any' because it does not have a type annotation.</span><span class=\"code\">2683</span></span><span class=\"error-behind\">'this' implicitly has type 'any' because it does not have a type annotation.</span><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function myClickHandler(event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='var Event: new (type: string, eventInitDict?: EventInit | undefined) => Event' >Event</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"click\"</span><span style=\"color: #000000\">)) </span><span style=\"color: #008000\">// seems ok</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcBmAUAGYCuAdgMYAuAlnCaALYCeAwgDZVkDWAEgIYkATVjAAUkAG6QSFVAFFJ0gJSgA3nlCgKACyqIAdAN28ARsIGgAvJuhFIeAL548TNhx78hokpADuoeVIUIgBEZOxcwYrKIKCIkJD0iKBwnEA'>Try</a></div></pre>\n<p>Oops! TypeScript isn’t happy with us. Despite the fact that <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#the_value_of_this_within_the_handler\">we know that <code>this</code> will be element that fired the event</a>, the compiler doesn’t seem to be happy with us using it in this way.</p>\n<p>To address the problem, we need to give this function a <strong><code>this</code> type</strong></p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\"><data-lsp lsp='(parameter) this: HTMLButtonElement' >this</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLButtonElement' >HTMLButtonElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) event: Event' >event</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Event' >Event</data-lsp></span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) HTMLButtonElement.disabled: boolean' style='border-bottom: solid 2px lightgrey;'>disabled</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span></div><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) HTMLButtonElement.disabled: boolean</span>\n<div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='var Event: new (type: string, eventInitDict?: EventInit | undefined) => Event' >Event</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"click\"</span><span style=\"color: #000000\">)) </span><span style=\"color: #008000\">// seems no longer ok</span></div><span class=\"error\"><span>The 'this' context of type 'void' is not assignable to method's 'this' of type 'HTMLButtonElement'.</span><span class=\"code\">2684</span></span><span class=\"error-behind\">The 'this' context of type 'void' is not assignable to method's 'this' of type 'HTMLButtonElement'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcAWd2cAoAMwFcA7AYwBcBLOc0AWwE8BhAG1soGsAJAIbkAJhxgAKQqFDUAFrRSg+AFQCyAGQBCpatQYBRMU0jlqAGimhIANxPVU+26cIBKUAG9LchQDphCgQAjMWFQAF4ZaFJISxBpUAA9AH5CAF9CQlZObn4hUQlySAB3UEc7cQAiSi5eCpc3OMRISCZEUHI4UA4GAHMYUDgeIA'>Try</a></div></pre>\n<p>Now when we try to directly invoke <code>myClickHandler</code> on the last line of the code snippet above\nwe get a new compiler error. Effectively, we have failed to provide the <code>this</code> that this function\nstates it wants.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\"><data-lsp lsp='(parameter) this: HTMLButtonElement' >this</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HTMLButtonElement' >HTMLButtonElement</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) event: Event' >event</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Event' >Event</data-lsp></span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) HTMLButtonElement.disabled: boolean' style='border-bottom: solid 2px lightgrey;'>disabled</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span></div><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) HTMLButtonElement.disabled: boolean</span>\n<div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' style='border-bottom: solid 2px lightgrey;'>myClickHandler</data-lsp></span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>function myClickHandler(this: HTMLButtonElement, event: Event): void</span>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const myButton: HTMLButtonElement' >myButton</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Document.getElementsByTagName&amp;lt;&amp;quot;button&amp;quot;>(qualifiedName: &amp;quot;button&amp;quot;): HTMLCollectionOf&amp;lt;HTMLButtonElement> (+2 overloads)' >getElementsByTagName</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"button\"</span><span style=\"color: #000000\">)[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const boundHandler: (event: Event) => void' style='border-bottom: solid 2px lightgrey;'>boundHandler</data-lsp></span></div><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>const boundHandler: (event: Event) =&gt; void</span>\n<div class='line'><span style=\"color: #000000\">  = </span><span style=\"color: #001080\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.bind&amp;lt;(this: HTMLButtonElement, event: Event) => void>(this: (this: HTMLButtonElement, event: Event) => void, thisArg: HTMLButtonElement): (event: Event) => void (+5 overloads)' >bind</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const myButton: HTMLButtonElement' >myButton</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='const boundHandler: (event: Event) => void' >boundHandler</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='var Event: new (type: string, eventInitDict?: EventInit | undefined) => Event' >Event</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"click\"</span><span style=\"color: #000000\">)) </span><span style=\"color: #008000\">// bound version: ok</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='function myClickHandler(this: HTMLButtonElement, event: Event): void' >myClickHandler</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.call&amp;lt;HTMLButtonElement, [Event], void>(this: (this: HTMLButtonElement, args_0: Event) => void, thisArg: HTMLButtonElement, args_0: Event): void' >call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const myButton: HTMLButtonElement' >myButton</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='var Event: new (type: string, eventInitDict?: EventInit | undefined) => Event' >Event</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"click\"</span><span style=\"color: #000000\">)) </span><span style=\"color: #008000\">// also ok</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcAWAUAGYCuAdgMYAuAlnCaALYCeAwgDZVkDWAEgIYkATVjAAUeUKAoALKilDcAKgFkAMgCEiFCrQCiw+pBIUANONCQAboYqodVo3gCUoAN5npsgHQDZvAEbCAqAAvJLQRJBmIBKgAHoA-HgAvnhMbBw8-EIweNEJeGS0iBQMjBpatCGgAnBkRAZGngDmkBR6kA0UiGqMCrxNAHK8BiIARH6a2iSjjgDaAAwAugVFJX5wpAJ8gsLQuWAx+RKhaexc29nQnn5UgiJM5VOOeOubF7siJJAA7qB21mMyGdODNnNFXoJQFYkDQSKg4JxUixge8YJ4yLxWKx7mVJrRjKAvr9-kZAcDQaBopjEHBQAigA'>Try</a></div></pre>\n<p>Note TypeScript understands that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>.bind</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>.call</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>.apply</code></a> will result in the proper <code>this</code> being passed to the function as part of its invocation</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>There’s a native javascript concept of a native <code>void</code> keyword, but it’s not related to the TypeScript concept of the same name</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#callable-types\">Callable types</a></p>\n<ul>\n<li><a href=\"#void\"><code>void</code></a></li>\n<li><a href=\"#construct-signatures\">Construct signatures</a></li>\n</ul>\n</li>\n<li><a href=\"#function-overloads\">Function overloads</a></li>\n<li><a href=\"#this-types\"><code>this</code> types</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v3/09-functions/"},"frontmatter":{"title":"Functions","course":"fundamentals-v3","date":"May 01, 2015","description":"So far, we have dealt with function argument and return types. There\nare a few more in-depth features we need to cover, including\nmultiple function heads and callable types.\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/09-functions/","title":"Functions","course":"fundamentals-v3","order":9,"previous":{"fields":{"slug":"/course/fundamentals-v3/08-exercise-json-types/"},"frontmatter":{"title":"JSON types","order":8,"course":"fundamentals-v3","isExercise":true}},"next":{"fields":{"slug":"/course/fundamentals-v3/10-classes/"},"frontmatter":{"title":"Classes","order":10,"course":"fundamentals-v3","isExercise":null}}}},"staticQueryHashes":["1246554614","2841359383"]}