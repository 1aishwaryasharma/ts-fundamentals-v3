{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/course/fundamentals-v3/03-variables-and-values/","result":{"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"}]}},"markdownRemark":{"id":"f6c173a3-b885-52a3-99f9-f36e3352466c","excerpt":"Now that we’ve compiled a simple TypeScript program, let’s look a bit at \nthe basics of the programming language Variable Declarations & Inference In JavaScript…","html":"<p>Now that we’ve compiled a simple TypeScript program, let’s look a bit at\nthe basics of the programming language</p>\n<h2 id=\"variable-declarations--inference\" style=\"position:relative;\"><a href=\"#variable-declarations--inference\" aria-label=\"variable declarations  inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variable Declarations &#x26; Inference</h2>\n<p>In JavaScript we declare variables all the time with <code>let</code> and <code>const</code> like this</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let age: number' style='border-bottom: solid 2px lightgrey;'>age</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">;</span></div><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>let age: number</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAhg5iEF4IDYDcAoA9JiuB6A-EA'>Try</a></div></pre>\n<p>As we can see, TypeScript is able to infer that <code>age</code> is a number, based on the\nfact that we’re assigning a value to it <em>as we are declaring it</em>.</p>\n<p>In TypeScript, variables are “born” with their types, and although\nthere are ways of making them more specific in certain branches of code,\nthere’s no (useful) way of changing <code>age</code>’s type from <code>number</code> to <code>string</code>.</p>\n<p>Let’s try the same thing with <code>const</code></p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const age: 6' style='border-bottom: solid 2px lightgrey;'>age</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">;</span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const age: 6</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAhgcwKYwLwwGwG4BQB6PGIogPQH4g'>Try</a></div></pre>\n<p>Notice that the type of this variable is not <code>number</code>, it’s <code>6</code>. TS is able to make\na more specific assumption here, because</p>\n<ul>\n<li>const variable declarations cannot be reassigned</li>\n<li>the initial value assigned to <code>age</code> is a number, which is an immutable value type</li>\n</ul>\n<p>Therefore, <code>age</code> will always be <code>6</code> in this program.</p>\n<p>This is called a <strong>literal type</strong>. If our <code>let</code> declaration is a varable\nthat can hold any <code>number</code>, the <code>const</code> declaration is one that can hold any <code>6</code> —\na specific number.</p>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\">Theme: Inferring with safe specificity</div><div class=\"custom-block-body\"><p>There’s a common idea you’ll see again and again when working with TypeScript.\nInferrence is made specificially, but not so specific as to get in the way\nof common behavior.\n<br />\n<br />\nFor example, the <code>let</code> variable declaration above could have assumed <code>age</code> to\nbe of type <code>6</code>, but this would have interfered with our ability to set this\nreassignable variable to <code>7</code> or <code>8</code>.</p></div></div>\n<h2 id=\"implicit-any-and-type-annotations\" style=\"position:relative;\"><a href=\"#implicit-any-and-type-annotations\" aria-label=\"implicit any and type annotations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implicit any and type annotations</h2>\n<p>Sometimes, we need to declare a variable before it gets initialized</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// between 500 and 1000</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.round(x: number): number' >round</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() * </span><span style=\"color: #098658\">500</span></div><div class='line'><span style=\"color: #000000\">) + </span><span style=\"color: #098658\">500</span><span style=\"color: #000000\">;</span></div>\n<div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let startTime: Date' >startTime</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let endTime: any' style='border-bottom: solid 2px lightgrey;'>endTime</data-lsp></span><span style=\"color: #000000\">;</span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let endTime: any</span>\n\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='let endTime: any' >endTime</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='let endTime: any' >endTime</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}, </span><span style=\"color: #0070C1\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMBYBQJQAjSAFwHdJIA7UDABjtAEMqATUARgbtwGM4qiEqABKAQQByAEQDyAWQD6AdTEBJACoL1quQFFQAXlBymJABYA6eAFc2AClyhjpy9Bas4AWzsBKUACpaBlw-AGogugBuXFwAG1JQISZoEnUAS09IQ1AqSDJQKVNIX2j44WpWdMzogidQAD0AfhjEUirIOGsSO19DAD5QAG9HUAr27KiRsYyso1z8wpJin2iAXwAaUUlZRRUNLR1dFaA'>Try</a></div></pre>\n<p><code>endTime</code> is kind of “born” without a type, so it’s what we call an\nimplicit <code>any</code>. TypeScript doesn’t have enough information around the declaration\nsite to infer what <code>endTime</code> should be, so it gets the most flexible type: <code>any</code>.</p>\n<p>Think of <code>any</code> as “the normal way JS variables work”, in that you could assign <code>endTime</code> to a <code>number</code>, then later a <code>function</code>, then a <code>string</code> — anything goes.</p>\n<p>If we want a little more safety here, we can add a type annotation</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// between 500 and 1000</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.round(x: number): number' >round</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() * </span><span style=\"color: #098658\">500</span></div><div class='line'><span style=\"color: #000000\">) + </span><span style=\"color: #098658\">500</span><span style=\"color: #000000\">;</span></div>\n<div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let startTime: Date' >startTime</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let endTime: Date' style='border-bottom: solid 2px lightgrey;'>endTime</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">;</span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let endTime: Date</span>\n\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='let endTime: Date' >endTime</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'number' is not assignable to type 'Date'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'number' is not assignable to type 'Date'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='let endTime: Date' >endTime</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}, </span><span style=\"color: #0070C1\"><data-lsp lsp='const RANDOM_WAIT_TIME: number' >RANDOM_WAIT_TIME</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAlAEaQAuA7pJAHagCsADHaAIaUAmoAjA3TgMZyVExUACUAggDkAIgHkAsgH0A6mICSAFQXrVcgKKgAvKDlNiACwB08AK5sAFDlDHTl6C1ZwAtnYCUoAFS0DDh+ANRBdADcODgANiSgQkzQxOoAlp6QhqCUkKSgUqaQvtHxwlSs6ZmohcSQ0fhOoAB6APwxiCRVkHDWxHa+hgB8oADejqAV3dlRE1MZWUa5+bXFPtEAvgA0opKyiioaWjq660A'>Try</a></div></pre>\n<p>now TypeScript will correctly alert us when we try to flip flop between the number <code>0</code> and\na <code>Date</code>.</p>\n<h2 id=\"function-arguments-and-return-values\" style=\"position:relative;\"><a href=\"#function-arguments-and-return-values\" aria-label=\"function arguments and return values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function arguments and return values</h2>\n<p>This <code>:foo</code> syntax can be used to describe function arguments and return values.\nIn this example, it’s not clear, even from the implementation of the function\nwhether <code>add</code> should accept numbers or strings.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function add(a: any, b: any): any' >add</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: any' >b</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: any' >b</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0koZAJlwBRkAaUACMAlKADetUKABO1LA1kcyoANQiA3LQC+QA'>Try</a></div></pre>\n<p>Here’s what your in-editor autocomplete would give you if you were using this function</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const result: any' >result</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function add(a: any, b: any): any' style='border-bottom: solid 2px lightgrey;'>add</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&apos;4&apos;</span><span style=\"color: #000000\">);</span></div><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>function add(a: any, b: any): any</span>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='const result: any' style='border-bottom: solid 2px lightgrey;'>result</data-lsp></span></div><span class='popover-prefix'>  </span><span class='popover'><div class='arrow'></div>const result: any</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0koZAJlwBRkAaUACMAlKADetUKABO1LA1kcyoANQiA3LQC+tEGAC0x9AyzHDtWunaUsc6pQbJ7AXk49eAZiEByACy+otogMmHhEQB6APy08k4u+mAxQA'>Try</a></div></pre>\n<p>Without type annotations, “anything goes” for the arguments passed into <code>add</code>. Why is this a problem?</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const result: any' >result</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function add(a: any, b: any): any' >add</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&apos;4&apos;</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const p: Promise&amp;lt;unknown>' >p</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Promise: PromiseConstructor&amp;#13;new &amp;lt;unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise&amp;lt;unknown>' >Promise</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const result: any' style='border-bottom: solid 2px lightgrey;'>result</data-lsp></span><span style=\"color: #000000\">);</span></div><span class='popover-prefix'>                        </span><span class='popover'><div class='arrow'></div>const result: any</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0koZAJlwBRkAaUACMAlKADetUKABO1LA1kcyoANQiA3LQC+tEGAC0x9AyzHDtdO0pY51Sg2R2AvJx68AzEIDkAFh9RbWtIW1BEUDdIagB3UAAFWWh4VBpeeUdnIP0wGTz8gsKAPQB+IA'>Try</a></div></pre>\n<p>If you’ve ever created a <code>Promise</code> using the promise constructor, you may see\nthat we’re using a <code>string</code> where we <em>should</em> use a two-argument function. This\nis the kind of thing we’d hope that TypeScript could catch for us.</p>\n<p>Without type annotations, “anything goes” for the arguments passed into <code>add</code>. Why is this a problem?</p>\n<p>Let’s add some type annotations to our function’s arguments</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const result: number' >result</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\"><data-err>&apos;4&apos;</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'string' is not assignable to parameter of type 'number'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'string' is not assignable to parameter of type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAIYAmjAFPaiUQLYBGMANKB4dufaAEpQAbzyhQ0SBSLQ69UAGohAbjwBfPGVqIK8yIiIAbEwF4GzFhkEByLE-FagA'>Try</a></div></pre>\n<p>Great, now we can enforce that only values of type <code>number</code> are passed into the function,\nand TS can now determine the return type automatically.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const result: number' >result</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function add(a: number, b: number): number' style='border-bottom: solid 2px lightgrey;'>add</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">)</span></div><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>function add(a: number, b: number): number</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAIYAmjAFPaiUQLYBGMANKB4dufaAEpQAbzyhQ0SBSLQ69UAGohAbjwBfPGVqIK8yIiIAbEwF4GzFhkFZxeEHPcfPAPQD8QA'>Try</a></div></pre>\n<p>If we wanted to specifically state a return type, we could do so using the <code>:foo</code> syntax in one more place</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #267F99\"><data-err>number</data-err></span><span style=\"color: #000000\"> {}</span></div><span class=\"error\"><span>A function whose declared type is neither 'void' nor 'any' must return a value.</span><span class=\"code\">2355</span></span><span class=\"error-behind\">A function whose declared type is neither 'void' nor 'any' must return a value.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCsWBQAzAVwDsBjAFwEs5jQBDAEwYAo7VjCBbAIxgBpQ3dl17QAlMJ4xQAbwC+QA'>Try</a></div></pre>\n<p>This is a great way for code authors to state their intentions up-front. TypeScript will make sure\nthat we live up to this intention, and errors will be surfaced <em>at the location of the function declaration</em>\ninstead of <em>where we use the value returned by the function</em>.</p>","tableOfContents":"<ul>\n<li><a href=\"#variable-declarations--inference\">Variable Declarations &#x26; Inference</a></li>\n<li><a href=\"#implicit-any-and-type-annotations\">Implicit any and type annotations</a></li>\n<li><a href=\"#function-arguments-and-return-values\">Function arguments and return values</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v3/03-variables-and-values/"},"frontmatter":{"title":"Variables and Values","course":"fundamentals-v3","date":"May 01, 2015","description":"We'll begin our study of the TypeScript language with simple variables\nand functions\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/03-variables-and-values/","title":"Variables and Values","course":"fundamentals-v3","order":3,"previous":{"fields":{"slug":"/course/fundamentals-v3/02-hello-typescript/"},"frontmatter":{"title":"Hello TypeScript","order":2,"course":"fundamentals-v3"}},"next":{"fields":{"slug":"/course/fundamentals-v3/04-objects-arrays-and-tuples/"},"frontmatter":{"title":"Objects, Arrays and Tuples","order":4,"course":"fundamentals-v3"}}}},"staticQueryHashes":["1246554614","2841359383"]}