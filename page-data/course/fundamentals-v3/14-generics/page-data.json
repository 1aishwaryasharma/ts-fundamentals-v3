{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/course/fundamentals-v3/14-generics/","result":{"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"}]}},"markdownRemark":{"id":"3fe00beb-ed37-5a34-9674-1650eb17fac9","excerpt":"Generics allow us to parameterize types, which unlocks great opportunity\nto reuse types broadly across a TypeScript project. This is a somewhat abstract concept…","html":"<p><a href=\"https://www.typescriptlang.org/docs/handbook/2/generics.html\">Generics</a> allow us to parameterize types, which unlocks great opportunity\nto reuse types broadly across a TypeScript project.</p>\n<p>This is a somewhat abstract concept, so let’s start by grounding ourselves\nin a practical example.</p>\n<h2 id=\"a-motivating-use-case\" style=\"position:relative;\"><a href=\"#a-motivating-use-case\" aria-label=\"a motivating use case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A motivating use case</h2>\n<p>In an earlier chapter, we discussed the concept of dictionary\ndata structures that could be typed using index signatures:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const phones: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >phones</data-lsp></span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">} = {}</span></div>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='const phones: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >phones</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >home</data-lsp></span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const phones: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >phones</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >work</data-lsp></span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const phones: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >phones</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >fax</data-lsp></span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const phones: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >phones</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >mobile</data-lsp></span></div><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>{\n    customerId: string;\n    areaCode: string;\n    num: string;\n}</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBADgC3AUwgLhgbwFAxgbQGsNoAnASzAHMBdDHPPYAV2hAFtlSBJAExKgVquRgENSyUQGEQvZAKFUReMM3YLKSvAF9s2mAF4su7IhQQAdEk6mkYVBYDuIUoVvmLAM1EAPd-ct2EAAjcgAbZGwAeijGOIA9AH4gA'>Try</a></div></pre>\n<p>Let’s take as a given that sometimes it is more convenient to\norganize collections as key-value dictionaries, and other times\nit is more convenient to use arrays or lists.</p>\n<p>It would be nice to have some kind of utility that would allow\nus to convert a “list of things into” a “dictionary of things”.</p>\n<p>So, let’s treat this array of objects as our starting point:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const phoneList: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}[]' >phoneList</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0001\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"321\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"123-4566\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0002\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"174\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"142-3626\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0003\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"192\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"012-7190\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0005\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"402\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"652-5782\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0004\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"301\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"184-8501\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBADgC3AUwDIEtowLwwNoBQMMA3jMAK7QgC2yATgJIAmAXDAEQAMPAjBwBoYAQ3rJhAYRDNk7DgGYATPyFgKNOb0XyAtABYArADYjHGAF8BRUuSpRaDFnJ5dFgkWMnTZnXgHY9dzUNXz1FHXkjRVMLK2IySmo6JjZOF3l3UXEpGU0ATjdVdWctHT9ePK4zS2sEuwcU5x4DTM8cnw49VyDiziMDcIM-AA43WNrbJMdU7h5AoSyvXM55LhUYYM1hvR1hgzXqqwBdIA'>Try</a></div></pre>\n<p>… and this as what we aim to get in the end…</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const phoneDict: {&amp;#13;    &amp;quot;0001&amp;quot;: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;    &amp;quot;0002&amp;quot;: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >phoneDict</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"0001\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0001\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"321\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"123-4566\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"0002\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0002\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"174\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"142-3626\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/*... and so on */</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBADgC3AUwCIEtiwLwwN4BQMMARAAwUCMJAXPkcTMAK7QgC2yATgJIAmdclRIAaBsQCGXZBIDCIPskEBmAEzUxjGGGbtBlVcoC0AFgCsANguiGAX02kKZVbXpaWbTrwGOKLh5LScgpKpJQA7CY2Wjp6YSaqRsoWqtYO9gwA9ABUAHT5MBJgfDAQIDDgMNmZBLZAA'>Try</a></div></pre>\n<p>In the end, we hope to arrive at a solution that will work for\n<em>any</em> list we wish to transform into an equivalent dictionary —\nnot just this one specific use case.</p>\n<p>We will need one thing first — a way to produce the “key” for each\nobject we encounter in the <code>phoneList</code> array. To remain flexible, we will\ndesign our function such that whoever is asking for the list-to-dictionary conversion\nshould also provide a function that we can use to obtain a “key” from each item in the list.</p>\n<p>Maybe our function signature would look something like this:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) PhoneInfo.customerId: string' >customerId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) PhoneInfo.areaCode: string' >areaCode</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) PhoneInfo.num: string' >num</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: PhoneInfo[], idGen: (arg: PhoneInfo) => string): {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: PhoneInfo[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #008000\">// take the list as an argument</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: PhoneInfo) => string' >idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: PhoneInfo' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// a callback to get Ids</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\"> } {</span></div><span class=\"error\"><span>A function whose declared type is neither 'void' nor 'any' must return a value.</span><span class=\"code\">2355</span></span><span class=\"error-behind\">A function whose declared type is neither 'void' nor 'any' must return a value.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// return a dictionary</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCsWBQBLAOwBcYAzAQwGNJQAFACzkMgElCy5QBvXUUKgFdExOAFsYrACaoR0IgHM+oCtEgUAwnCmRZxeYSX9CgsXoNKAvrlxlBhKsXzNQAG3wiAKnAAi+RwAUyu4iqIzMbBxwANoAugA0oCCgxBQA1rTEDLQhxCqIKoQq0AqmkCTK+FIA4uWoAaoKYUws7JwAlKAAvAB8oHKKSWAUAhSurgBG1GkpXAqQedKIuO2o3KDRaeaKsc0RbVyWPMrJasSC0EUjUv5OzKoAnriWQA'>Try</a></div></pre>\n<p>Of course, we will see an error message as things stand right now,\nbecause we haven’t implemented the function yet.</p>\n<p>This isn’t too difficult to implement. Let’s make\na very specific solution right now with a <code>forEach</code> function - which we can refactor\nand generalize as a next step.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: PhoneInfo[], idGen: (arg: PhoneInfo) => string): {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: PhoneInfo[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #008000\">// take the list as an argument</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: PhoneInfo) => string' >idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: PhoneInfo' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// a callback to get Ids</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// create an empty dictionary</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\"> } = {}</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Loop through the array</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: PhoneInfo[]' >list</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;PhoneInfo>.forEach(callbackfn: (value: PhoneInfo, index: number, array: PhoneInfo[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: PhoneInfo' >element</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: PhoneInfo) => string' >idGen</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: PhoneInfo' >element</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: PhoneInfo' >element</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// store element under key</span></div><div class='line'><span style=\"color: #000000\">  })</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// return the dictionary</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >dict</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: PhoneInfo[], idGen: (arg: PhoneInfo) => string): {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const phoneList: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}[]' >phoneList</data-lsp></span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: PhoneInfo' >item</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: PhoneInfo' >item</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) PhoneInfo.customerId: string' >customerId</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoAsD2IIEkQybIDeAUMsggK4DOYmAttLgCYBcydUoA5ucnCgQ4AYUwsIHLr34gqDKWG4g+AX1KkE2OsgAOWHABlgOgLzIA2v2KVa9JlFYcARAAZ3ARmcAaAUNHiksjOAMwATF6+cgrBHmEhALQALACsAGxpzsiq3ta2dIzM7MHurmE+fsJiEi4eAOxJFdG1SWEJIWlhmdm5FDbUBQ5OJe4hFYJVgbUAnOVR8i6ucQl1HtOuWTl5A-ZFi+4p4-7VQc5JZU0LwWkpbSl1ABzlPdt2hY7Fbu6NvhMBNcEQktLjFnB4HkkEg8UsCXgBdDQAemRyASaOoYDRCVIMCoIAQYGA2GQABsTGAACqYAAiwAJAAp+GS6BwMNg8ARMBY4b4UWA4ABrFBgdAoZlgAQ0AQgPw8eQQcD8YAsADiCo49MEPFZBg5hAAlMhTAA+ThKXjIFFwShwEkkgBGiAFyHoyB4EAlrBopH1HBsFgFimUPDhOvZ+EI2RI-BRCH8kGlyAgDF0YAAnsgWHTCdhBGn+FoQDoswS-ZZA2bg6G0LqI0RVEaSOoY4jkIZMJhdC70FBMFQeOhuyhBFA4PmKOKAHSEKAAUUQ6Hp9IgJOTCrAhpN0YoFELxezAGkIBnzMq1SBl6umOB9fwKCWwBYH0e03DGyu1+BLa2CkIk1f12QPEJCgZAhXHbJbxbZAhDAKgoBlEUUAfIkQDzfhYPgmUH1IZs90wVdJxJTAeEZCdySpWkGX0dljDoXx6WASAGE3U0mOTScdneVhb31IA'>Try</a></div></pre>\n<p>Click the <code>Try</code> button for the code snippet above, click “Run”\nin the TypeScript playground, and you should see that this solution works\nfor our specific example.</p>\n<p>Now, let’s attempt to generalize this, and make it so that\nit works for lists and dictionaries of our <code>PhoneInfo</code> type,\nbut lots of other types as well. How about if we replace every\n<code>PhoneInfo</code> type with <code>any</code>…</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: any[], idGen: (arg: any) => string): {&amp;#13;    [k: string]: any;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: any[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">[],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: any) => string' >idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">///   ⬆️ focus here  ⬆️</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// nothing changed in the code below</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> } = {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: any[]' >list</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;any>.forEach(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: any' >element</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: any) => string' >idGen</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: any' >element</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: any' >element</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  })</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: any[], idGen: (arg: any) => string): {&amp;#13;    [k: string]: any;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  [{ </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Mike\"</span><span style=\"color: #000000\"> }, { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Mark\"</span><span style=\"color: #000000\"> }],</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: any' >item</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: any' >item</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >name</data-lsp></span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>Mike</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>I</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>should</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>not</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>be</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>able</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>to</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>do</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>this</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>NOOOOOOO</data-lsp></span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>any</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgZygFTgERtACgChEV0oAuRAQzAE8BtAXQBoTEYATAcQFMwqBagCcA5lVp0AlIgC8APkQZhMMKKJSqAb0QMA1lWWrRTCfUQBfRFvYB6e6USAwakDwf4mBwIINIgAWvYV5SVyI7W0QwOChfY0QIX1pRXk4OJGigiDhOIIAjXmQ4AHd2TLAMRE58SmtdAyUoFTVTGnMrWWsLdlQMADoPYQBRaniCAnzeAFt+KBkFa3ZSUvLK6ABpXjo5Dh5+MeRJ6akFiqqGFah1uiYt8amwKHYLI9JAqBBhJHOiTqIlqBPoFtulhcFViKQGDowNQplQAEQAWRgel4cMsLBq0NhiERIj0aIsrHYBBgUEms0UpMmPSxvA0vwQaDg+x6BVEBHOR3OPSRKJ6AEkemhfHAQMhODSoj08j1qDkWVA4D1OErougegA5ADyOt1WqIDkcAD0APxAA'>Try</a></div></pre>\n<p>Ok, this works at runtime if we test it in the TypeScript playground,\nbut every item in our dictionary is an <code>any</code>. In becoming more flexible\nand seeking to handle a variety of different items, we essentially\nlose all of our helpful type information.</p>\n<p><strong>What we need here is some mechanism of defining a relationship\nbetween the type of the thing we’re passed, and the type of the thing\nwe’ll return. This is what Generics are all about</strong></p>\n<h2 id=\"defining-a-type-parameter\" style=\"position:relative;\"><a href=\"#defining-a-type-parameter\" aria-label=\"defining a type parameter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining a type parameter</h2>\n<p>Type parameters can be thought of as “function arguments, but for types”.</p>\n<p>Functions may return different values, depending on the arguments you pass them.</p>\n<blockquote>\n<p>Generics may change their type, depending on the type parameters you use with them.</p>\n</blockquote>\n<p>Our function signature is going to now include a type parameter <code>T</code>:</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">listToDict</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">list</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">[],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">idGen</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dict</span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\"> } = {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dict</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Let’s look at what this code means.</p>\n<h3 id=\"the-typeparam-and-usage-to-provide-an-argument-type\" style=\"position:relative;\"><a href=\"#the-typeparam-and-usage-to-provide-an-argument-type\" aria-label=\"the typeparam and usage to provide an argument type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The TypeParam, and usage to provide an argument type</h3>\n<ul>\n<li><strong>&#x3C;T> to the right of <code>listDict</code></strong> <br/> means that the type of this function is now parameterized in terms of a type parameter <code>T</code> (which may change on a per-usage basis)</li>\n<li>\n<p><strong><code>list: T[]</code> as a first argument</strong> <br /> means we accept a list of <code>T</code>‘s.</p>\n<ul>\n<li><strong>TypeScript will infer what <code>T</code> is, on a per-usage basis, depending on what kind of array we pass in</strong>. If we use a <code>string[]</code>, <code>T</code> will be <code>string</code>, if we use a <code>number[]</code>, <code>T</code> will be <code>number</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Try to convince yourself of these first two ideas with the following much simpler (and more pointless) example:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function wrapInArray&amp;lt;T>(arg: T): [T]' >wrapInArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in wrapInArray&amp;lt;T>(arg: T): [T]' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in wrapInArray&amp;lt;T>(arg: T): [T]' >T</data-lsp></span><span style=\"color: #000000\">): [</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in wrapInArray&amp;lt;T>(arg: T): [T]' >T</data-lsp></span><span style=\"color: #000000\">] {</span></div><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>function wrapInArray&lt;T&gt;(arg: T): [T]</span>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAdwE4EMAOBJMBBVDATwB4AVAPgAp1UBzALkTIEomBtMgXUQG8AoRIgD0woeKEA9APyDEqAKZQQqJO1p0u-AL5A'>Try</a></div></pre>\n<p>Note how, in the three <code>wrapInArray</code> examples below, the <code>&#x3C;T></code> we see in the tooltip above is replaced\nby “the type of the thing we pass as an argument” - number, Date, and RegExp:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function wrapInArray&amp;lt;number>(arg: number): [number]' >wrapInArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)</span></div><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>function wrapInArray&lt;number&gt;(arg: number): [number]</span>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function wrapInArray&amp;lt;Date>(arg: Date): [Date]' >wrapInArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">())</span></div><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>function wrapInArray&lt;Date&gt;(arg: Date): [Date]</span>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function wrapInArray&amp;lt;RegExp>(arg: RegExp): [RegExp]' >wrapInArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var RegExp: RegExpConstructor&amp;#13;new (pattern: string | RegExp, flags?: string | undefined) => RegExp (+2 overloads)' >RegExp</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"/s/\"</span><span style=\"color: #000000\">))</span></div><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>function wrapInArray&lt;RegExp&gt;(arg: RegExp): [RegExp]</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAdwE4EMAOBJMBBVDATwB4AVAPgAp1UBzALkTIEomBtMgXUQG8AoRIlQBTKCFRJ2tOl34BffgHoViALQaIIKBrX80WXAWJUAzC2VKhiAHoB+fRhz5C6IlTAjkiACLooIlQsFqpC9o6GLiae3gBKInQAogAemFQAREoAzkrpwZbWtnZAA'>Try</a></div></pre>\n<p>Ok, back to the more meaningful example of our <code>listToDict</code> function:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">[],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' style='border-bottom: solid 2px lightgrey;'>idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span></div><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>(parameter) idGen: (arg: T) =&gt; string</span>\n<div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\"> } = {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgZygFTgERtAHkwD4AKAKERXSgC5FMBtAXQBpLEYATAcQFMw9UgEMATgHN6mAJSIAvMUQZRMMOI4B6DQD0A-OWn0A3okYBrestXjmUxAF9ERjhAQZEXfHSemLSqCpqtgwO8k72HKJ8UCCiSJ7Q5PZAA'>Try</a></div></pre>\n<ul>\n<li>\n<p><strong><code>idGen: (arg: T) => string</code></strong> is a callback that <em>also</em> uses <code>T</code> as an argument. This means that…</p>\n<ul>\n<li>we will get the benefits of type-checking, within <code>idGen</code> function</li>\n<li>we will get some type-checking alignment between the array and the <code>idGen</code> function</li>\n</ul>\n</li>\n</ul>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;Date>(list: Date[], idGen: (arg: Date) => string): {&amp;#13;    [k: string]: Date;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  [</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new (value: string | number | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"10-01-2021\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new (value: string | number | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"03-14-2021\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new (value: string | number | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"06-03-2021\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new (value: string | number | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"09-30-2021\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new (value: string | number | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"02-17-2021\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new (value: string | number | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"05-21-2021\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">  ],</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Date' >arg</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Date' >arg</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Date.toISOString(): string' style='border-bottom: solid 2px lightgrey;'>toISOString</data-lsp></span><span style=\"color: #000000\">()</span></div><span class='popover-prefix'>                   </span><span class='popover'><div class='arrow'></div>(method) Date.toISOString(): string</span>\n<div class='line'><span style=\"color: #000000\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgZygFTgERtAHkwD4AKAKERXSgC5FMBtAXQBpEB6DxKAQwGsApjwAWw1BkS80UpLwBOAcxABbQWCiVEMACYBxdfVILF9TAEpEAXmKIM8mGEWduvRBF7JkAI14R+PHCIioJQiACSOmjk5vQA3oiM-PT2jorMZogAvohxWhAIkjr4dLmJyXZQDk4ZDNnWuVla8qEg8kjF0ORNXNwAtAMQIFADfeQSWLglFFSMWlRgggDuiDi8UIKkAEQAjAAMfXs7fQBMeyc7W+as84iLK2sb23sAzH07ACyn55fXt-erdabLZ7ABshzeZwuVxuVAWy0BTxBAE4+i8DlDfrC4QDHsDzu8AOzfaF-OF3BF454AVlOx0xMK0bC0xiUlhsUiUADooHBwgBlADy-KqaVI5i0XHJ0plVAAegB+GJAA'>Try</a></div></pre>\n<p>One last thing to examine: the <code>return</code> type. Based on the way we have\ndefined this function, a <code>T[]</code> will be turned into a <code>{ [k: string]: T }</code>\n<em>for any <code>T</code> of our choosing</em>.</p>\n<p>Now, let’s put this all together with the original example we started with:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">[],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' >idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\"> } = {}</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;T>.forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: T' >element</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' >idGen</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: T' >element</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: T' >element</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  })</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict1: {&amp;#13;    [k: string]: {&amp;#13;        name: string;&amp;#13;    };&amp;#13;}' >dict1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;{&amp;#13;    name: string;&amp;#13;}>(list: {&amp;#13;    name: string;&amp;#13;}[], idGen: (arg: {&amp;#13;    name: string;&amp;#13;}) => string): {&amp;#13;    [k: string]: {&amp;#13;        name: string;&amp;#13;    };&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><span class='popover-prefix'>                  </span><span class='popover'><div class='arrow'></div>function listToDict&lt;{\n    name: string;\n}&gt;(list: {\n    name: string;\n}[], idGen: (arg: {\n    name: string;\n}) =&gt; string): {\n    [k: string]: {\n        name: string;\n    };\n}</span>\n<div class='line'><span style=\"color: #000000\">  [{ </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Mike\"</span><span style=\"color: #000000\"> }, { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Mark\"</span><span style=\"color: #000000\"> }],</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: {&amp;#13;    name: string;&amp;#13;}' >item</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: {&amp;#13;    name: string;&amp;#13;}' >item</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const dict1: {&amp;#13;    [k: string]: {&amp;#13;        name: string;&amp;#13;    };&amp;#13;}' >dict1</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const dict1: {&amp;#13;    [k: string]: {&amp;#13;        name: string;&amp;#13;    };&amp;#13;}' >dict1</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    name: string;&amp;#13;}' >Mike</data-lsp></span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict2: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >dict2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;{&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}>(list: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}[], idGen: (arg: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}) => string): {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const phoneList: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}[]' >phoneList</data-lsp></span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >p</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >p</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp></span><span style=\"color: #000000\">)</span></div><span class='popover-prefix'>                  </span><span class='popover'><div class='arrow'></div>function listToDict&lt;{\n    customerId: string;\n    areaCode: string;\n    num: string;\n}&gt;(list: {\n    customerId: string;\n    areaCode: string;\n    num: string;\n}[], idGen: (arg: {\n    customerId: string;\n    areaCode: string;\n    num: string;\n}) =&gt; string): {\n    [k: string]: {\n        customerId: string;\n        areaCode: string;\n        num: string;\n    };\n}</span>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='const dict2: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >dict2</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >fax</data-lsp></span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const dict2: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >dict2</data-lsp></span><span style=\"color: #000000\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoAsD2IIEkQybIDeAUMsggK4DOYmAttLgCYBcydUoA5ucnCgQ4AYUwsIHLr34gqDKWG4g+AX1KkE2OsgAOWHABlgOgLzIA2v2KVa9JlFYcARAAZ3ARmcAaAUNHiksjOAMwATF6+cgrBHmEhALQALACsAGxpzsiq3ta2dIzM7MHurmE+fsJiEi4eAOxJFdG1SWEJIWlhmdm5FDbUBQ5OJe4hFYJVgbUAnOVR8i6ucQl1HtOuWTl5A-ZFi+4p4-7VQc5JZU0LwWkpbSl1ABzlPdt2hY7Fbu6NvhMBNcEQktLjFnB4HkkEg8UsCXgBdUgAemRyASaOoYDRCVIMCoIAQYGA2GQABsTGAACqYAAiwAJAB4KQA+AAU-DJdA4FIscN6yGALAA4hAQBwWYIeFyAJTIUxMzhKGRSjg2CwAa0Uyh4cK52RI-C0IB0LDpYBVlg1Cq1OuQFL15mI6nZ5IAdIQoABRRDoFksiAkiBMcAyuX6igUQ3G00AaQgAE9ZfyhSK-QGg2ApfwKCaCRYc2BY3G4Yn-YGRWB+KpM-whGAqFAQMh86QnZGwE3TR5ExzKTTTWyKCjw8ORwA9AD8-AsNhAcCYLgAssA1RBNr4Z3PTgvBGrNrz+CzgJAGCH5UfAy7Z0xSJnI5gAy6SZgeCz8x5M2+XUuV5ptO382E3bklStIEiy+jYBAxh0L44GnnoLo7O8rCZkOI7oWOk4AW6cAAB6-ka94QI+z6vqaYRSkAA'>Try</a></div></pre>\n<p>Let’s look at this closely and make sure that we understand what’s going on:</p>\n<ul>\n<li>Run this in the TypeScript playground, and verify that you see the logging you should see</li>\n<li>Take a close look at the types of the items in <code>dict1</code> and <code>dict2</code> above, to convince yourself that <strong>we get a different kind of dictionary out of <code>listToDict</code>, depending on the type of the array we pass in</strong></li>\n</ul>\n<p>This is much better than our “dictionary of <code>any</code>s”, in that we lose no type information as a side effect of going through the list-to-dictionary transformation.</p>","tableOfContents":"<ul>\n<li><a href=\"#a-motivating-use-case\">A motivating use case</a></li>\n<li>\n<p><a href=\"#defining-a-type-parameter\">Defining a type parameter</a></p>\n<ul>\n<li><a href=\"#the-typeparam-and-usage-to-provide-an-argument-type\">The TypeParam, and usage to provide an argument type</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/fundamentals-v3/14-generics/"},"frontmatter":{"title":"Generics","course":"fundamentals-v3","date":"June 08, 2021","description":"Generics allow us to parameterize types, which unlocks great opportunity\nto reuse types broadly across a TypeScript project.\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/14-generics/","title":"Generics","course":"fundamentals-v3","order":14,"previous":{"fields":{"slug":"/course/fundamentals-v3/13-nullish-values/"},"frontmatter":{"title":"Nullish values","order":13,"course":"fundamentals-v3","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v3/15-dict-map-filter-reduce/"},"frontmatter":{"title":"Dictionary map, filter and reduce","order":15,"course":"fundamentals-v3","isExercise":true}}}},"staticQueryHashes":["2074799692","2841359383"]}