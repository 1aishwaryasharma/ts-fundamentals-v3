{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/course/fundamentals-v3/14-generics/","result":{"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"}]}},"markdownRemark":{"id":"3fe00beb-ed37-5a34-9674-1650eb17fac9","excerpt":"Generics allow us to parameterize types, which unlocks great opportunity\nto reuse types broadly across a TypeScript project. This is a somewhat abstract concept…","html":"<p>Generics allow us to parameterize types, which unlocks great opportunity\nto reuse types broadly across a TypeScript project.</p>\n<p>This is a somewhat abstract concept, so let’s start by grounding ourselves\nin a practical example.</p>\n<h2 id=\"a-motivating-use-case\" style=\"position:relative;\"><a href=\"#a-motivating-use-case\" aria-label=\"a motivating use case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A motivating use case</h2>\n<p>In an earlier chapter, we discussed the concept of dictionary\ndata structures that could be typed using index signatures</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const phones: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >phones</data-lsp></span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">} = {}</span></div>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='const phones: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >phones</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >mobile</data-lsp></span></div><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>{\n    customerId: string;\n    areaCode: string;\n    num: string;\n}</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBADgC3AUwgLhgbwFAxgbQGsNoAnASzAHMBdDHPPYAV2hAFtlSBJAExKgVquRgENSyUQGEQvZAKFUReMM3YLKSvAF9s2mAF4su7IhQQAdOxAAjcgBtk2APTPG7gHoB+IA'>Try</a></div></pre>\n<p>Let’s take as a given that sometimes it’s more convenient to\norganize collections as key-value dictionaries, and other times\nit’s more convenient to use arrays or lists.</p>\n<p>It would be nice to have some kind of utility that would allow\nus to convert from a list of things to dictionary of things.</p>\n<p>So, let’s treat something like this as our starting point</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const phoneList: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}[]' >phoneList</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0001\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"321\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"555-5555\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0002\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"321\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"555-5556\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0003\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"321\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"555-5557\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0004\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"321\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"555-5558\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0005\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"321\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"555-5559\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBADgC3AUwDIEtowLwwNoBQMMA3jMAK7QgC2yATgJIAmAXDAEQAMPAjBwBoYAQ3rJhAYRDNk7DgGYATPyFgKNOQFZtAWm3aOMAL4CipclSi0GLOTy6LBIsZOmzOSlTDUbO+vdoAbIYmZmSU1HRMbJz28k6i4lIycp5OPlq6+gDsIabE4ZbW0XY8ACwJLsnuCsrp6pmaAZoAHHlhFpE2Mdw8mpVJbql1qg1+WdoAnO0AukA'>Try</a></div></pre>\n<p>… and this as what we aim to get in the end…</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const phoneDict: {&amp;#13;    &amp;quot;0001&amp;quot;: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;    &amp;quot;0002&amp;quot;: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >phoneDict</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"0001\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0001\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"321\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"555-5555\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"0002\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"0002\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) areaCode: string' >areaCode</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"321\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) num: string' >num</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"555-5556\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/*... and so on */</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBADgC3AUwCIEtiwLwwN4BQMMARAAwUCMJAXPkcTMAK7QgC2yATgJIAmdclRIAaBsQCGXZBIDCIPskEBmAEzUxjGGGbtBAVkMBaQ4dEMAvptIUyq2vS0s2nXgJsV71ydLkKlpGoa4tq6BsamAGzmxFYMAPQAVAB0qTASYHwwECAw4DCJ8QQWQA'>Try</a></div></pre>\n<p>In the end, we hope to arrive at a solution that will work for\n<em>any</em> list we wish to transform into an equivalent dictionary —\nnot just this one specific use case.</p>\n<p>We’ll need one thing first — a way to produce the “key” for each\nobject we encounter in the <code>phoneList</code> array. To remain flexible,\nand to keep our</p>\n<p>Let’s take a function as an argument so that we leave it to\nthe caller of our function to <em>tell us</em> how to calculate “dictionary keys”</p>\n<p>Maybe our function signature would look something like this</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) PhoneInfo.customerId: string' >customerId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) PhoneInfo.areaCode: string' >areaCode</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) PhoneInfo.num: string' >num</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: PhoneInfo[], idGen: (arg: PhoneInfo) => string): {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: PhoneInfo[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #008000\">// take the list as an argument</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: PhoneInfo) => string' >idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: PhoneInfo' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// a callback to get Ids</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\"> } {</span></div><span class=\"error\"><span>A function whose declared type is neither 'void' nor 'any' must return a value.</span><span class=\"code\">2355</span></span><span class=\"error-behind\">A function whose declared type is neither 'void' nor 'any' must return a value.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// return a dictionary</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCsWBQBLAOwBcYAzAQwGNJQAFACzkMgElCy5QBvXUUKgFdExOAFsYrACaoR0IgHM+oCtEgUAwnCmRZxeYSX9CgsXoNKAvrlxlBhKsXzNQAG3wiAKnAAi+RwAUyu4iqIzMbBxwANoAugA0oCCgxBQA1rTEDLQhxCqIKoQq0AqmkCTK+FIA4uWoAaoKYUws7JwAlKAAvAB8oHKKSWAUAhSurgBG1GkpXAqQedKIyskADmrETjAAtPgKhAiQuO2o3KDRaeaKsc0RbVyWPCtgG4LQRSNS-k7MqgCeuEsQA'>Try</a></div></pre>\n<p>Of course, we will see an error message as things stand right now,\nbecause we haven’t implemented the function yet.</p>\n<p>Ok, this shouldn’t be too difficult to implement. Let’s make\na very specific solution right now, and then we can refactor\nand generalize as a next step.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: PhoneInfo[], idGen: (arg: PhoneInfo) => string): {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: PhoneInfo[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #008000\">// take the list as an argument</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: PhoneInfo) => string' >idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: PhoneInfo' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// a callback to get Ids</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// create an empty dictionary</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='interface PhoneInfo' >PhoneInfo</data-lsp></span><span style=\"color: #000000\"> } = {}</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Loop through the array</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: PhoneInfo[]' >list</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;PhoneInfo>.forEach(callbackfn: (value: PhoneInfo, index: number, array: PhoneInfo[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: PhoneInfo' >element</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: PhoneInfo) => string' >idGen</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: PhoneInfo' >element</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: PhoneInfo' >element</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// store element under key</span></div><div class='line'><span style=\"color: #000000\">  })</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// return the dictionary</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >dict</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: PhoneInfo[], idGen: (arg: PhoneInfo) => string): {&amp;#13;    [k: string]: PhoneInfo;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const phoneList: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}[]' >phoneList</data-lsp></span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: PhoneInfo' >item</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: PhoneInfo' >item</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) PhoneInfo.customerId: string' >customerId</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoAsD2IIEkQybIDeAUMsggK4DOYmAttLgCYBcydUoA5ucnCgQ4AYUwsIHLr34gqDKWG4g+AX1KkE2OsgAOWHABlgOgLzIA2v2KVa9JlFYcARAAZ3ARmcAaAUNHiksjOAMwATF6+cgrBAKzxALTx8c7Iqt7WtnSMzOzB7q5hPn7CYhIu4ZHI0S7JSfEAbKnpmdTZDk757iHFgqWBFRHFNXGJyQDszRkUNm32uS4FACy9-mVBoUNR8rVj8QAcU612OY55bu6xq-3lwZXDO6Ox9bEAnEcAuhoA9L-ICQDqGAAQlSDAqCAEGBgNhkAAbExgAAqmAAIsAoQAKfgIugcDDYPAETAWD6+P5gOAAaxQYHQKFxYAENAEID8PHkEHA-GALAA4lyOJjBDx8QYiYQAJTIUwAPk4Sl4yD+cEocDhcIARogqch6MgeBAmawaPw-rohGBodAEsAeCBMEJSJKODYLFTFMoeB8xYT8IQ0iQzd9KP5IKzkBAGLowABPZAsDHQ7CCWP8LQgHSJqGuywehVen1ocX+oiqGUkdTB5CGTCYXR69BQTBUHjoRsoQRQOBpiiMgB0hCgAFFEOhMZiIHCo1ywNK5UGKBQM1mkwBpCDx8y8gUgSfTpjgSX8CjZsAWM8b2MfCtTmfgZUh7JCSMH2fICESKDIGm9tLH6tLSoKA2TpFAzxhEBU34ICQITJNSCrFdMGnfs4UwHhsT7REUXRLF9EJYw6F8TFgEgBh53lMio37OZTlYY9JSAA'>Try</a></div></pre>\n<p>Click the <code>Try</code> button for the code snippet above, click “Run”\nin the TypeScript playground, and you should see that this solution works\nfor our specific use case.</p>\n<p>Now, let’s attempt to generalize this, and make it so that\nit works for lists and dictionaries of our <code>PhoneInfo</code> type,\nbut lots of other types as well.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: any[], idGen: (arg: any) => string): {&amp;#13;    [k: string]: any;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: any[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">[], </span><span style=\"color: #008000\">// take the list as an argument</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: any) => string' >idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// a callback to get Ids</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// create an empty dictionary</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> } = {}</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Loop through the array</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: any[]' >list</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;any>.forEach(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: any' >element</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: any) => string' >idGen</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: any' >element</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: any' >element</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// store element under key</span></div><div class='line'><span style=\"color: #000000\">  })</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// return the dictionary</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: any[], idGen: (arg: any) => string): {&amp;#13;    [k: string]: any;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  [{ </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Mike\"</span><span style=\"color: #000000\"> }, { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Mark\"</span><span style=\"color: #000000\"> }],</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: any' >item</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: any' >item</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >name</data-lsp></span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: any;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>Mike</data-lsp></span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>any</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgZygFTgERtACgChEV0oAuRAQzAE8BtAXQBpEB6dxKagawFNuAC0GoMNNDSTUATgHMQAW35goJRDAAmAcRVUCsuVVp0AlIgC8APkQYZMMHI5dqiCNWTIARtQi9ucIhy-FCIAJKaaESmVADeiAy8VHYOckzG9IgAvoix6pxuMvzUUIK0iPyKAA5QdIia+LAIsnTqEAjiDdBxCUm2UPaO6VJ1ORa5WUT5XAAycHBVwjJwIHJCwmUyMtStpGJQAHTAcDIAor5CBAT8yJUqUObWueqk7WCdjQDS-HXjWrpga63ZSqUwveqNBhdKDfOhMSwVYH3Zz9E6CG53VSIcCafgyRACXbZMHTRBFKAgGRIKAiCHQeBgFrqcmUpDQoiTIhvD7QBH7bB4QjqBjxRnKKgAIgAsjABBLsmxRdRxYhpbJePKsqx1AQYKVFI8bHrKgcxfxolyOnBbgdkHA5ARoWDoQcZQIiAVSIgAHoAfiAA'>Try</a></div></pre>\n<p>Ok, this works at runtime if we test it in the TypeScript playground,\nbut every item in our dictionary is an <code>any</code>. In becoming more flexible\nand seeking to handle a variety of different items, we essentially\nlose all of our helpful type information.</p>\n<p><strong>What we need here is some mechanism of defining a relationship\nbetween the type of the thing we’re passed, and the type of the thing\nwe’ll return. This is what Generics are all about</strong></p>\n<h2 id=\"defining-a-type-parameter\" style=\"position:relative;\"><a href=\"#defining-a-type-parameter\" aria-label=\"defining a type parameter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining a type parameter</h2>\n<p>Type parameters can be thought of as “function arguments, but for types”.</p>\n<p>Functions may return different values, depending on the arguments you pass them.</p>\n<blockquote>\n<p>Generics may change their type, depending on the type parameters you use with them.</p>\n</blockquote>\n<p>Before we get too abstract, let’s bring this back to our practical example</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #008000\">// take the list as an argument</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' >idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// a callback to get Ids</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// create an empty dictionary</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\"> } = {}</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Loop through the array</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;T>.forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: T' >element</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' >idGen</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: T' >element</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='const dictKey: string' >dictKey</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) element: T' >element</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// store element under key</span></div><div class='line'><span style=\"color: #000000\">  })</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// return the dictionary</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict1: {&amp;#13;    [k: string]: {&amp;#13;        name: string;&amp;#13;    };&amp;#13;}' >dict1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;{&amp;#13;    name: string;&amp;#13;}>(list: {&amp;#13;    name: string;&amp;#13;}[], idGen: (arg: {&amp;#13;    name: string;&amp;#13;}) => string): {&amp;#13;    [k: string]: {&amp;#13;        name: string;&amp;#13;    };&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  [{ </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Mike\"</span><span style=\"color: #000000\"> }, { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Mark\"</span><span style=\"color: #000000\"> }],</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: {&amp;#13;    name: string;&amp;#13;}' >item</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: {&amp;#13;    name: string;&amp;#13;}' >item</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const dict1: {&amp;#13;    [k: string]: {&amp;#13;        name: string;&amp;#13;    };&amp;#13;}' >dict1</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const dict1: {&amp;#13;    [k: string]: {&amp;#13;        name: string;&amp;#13;    };&amp;#13;}' >dict1</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    name: string;&amp;#13;}' >Mike</data-lsp></span></div><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>{\n    name: string;\n}</span>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict2: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >dict2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;{&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}>(list: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}[], idGen: (arg: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}) => string): {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const phoneList: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}[]' >phoneList</data-lsp></span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >p</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: {&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >p</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) customerId: string' >customerId</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const dict2: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >dict2</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    customerId: string;&amp;#13;    areaCode: string;&amp;#13;    num: string;&amp;#13;}' >fax</data-lsp></span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>{\n    customerId: string;\n    areaCode: string;\n    num: string;\n}</span>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const dict2: {&amp;#13;    [k: string]: {&amp;#13;        customerId: string;&amp;#13;        areaCode: string;&amp;#13;        num: string;&amp;#13;    };&amp;#13;}' >dict2</data-lsp></span><span style=\"color: #000000\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoAsD2IIEkQybIDeAUMsggK4DOYmAttLgCYBcydUoA5ucnCgQ4AYUwsIHLr34gqDKWG4g+AX1KkE2OsgAOWHABlgOgLzIA2v2KVa9JlFYcARAAZ3ARmcAaAUNHiksjOAMwATF6+cgrBAKzxALTx8c7Iqt7WtnSMzOzB7q5hPn7CYhIu4ZHI0S7JSfEAbKnpmdTZDk757iHFgqWBFRHFNXGJyQDszRkUNm32uS4FACy9-mVBoUNR8rVj8QAcU612OY55bu6xq-3lwZXDO6Ox9bEAnEcAuqQA9L-ICQDqGAAQlSDAqCAEGBgNhkAAbExgAAqmAAIsAoQAeJEAPgAFPwEXQOEiLB9fH8wHAANYoMDoFBEsACGgCEB+HjyCDgfjAFgAcW5HDxgh4JIAlMhTDjOEpeMg-nBKHA4XCAEaIanIejIHgQZmsGikcUcGwWamKZQ8D4ktIkfh-BD+SBs5AQBi6MAAT2QLAx0Owgi9-C0IB0fqhpssFtlVptyCRdvMxHUDu+yEMmEwum16CgmCoPHQuZQgigcGDFCZADpCFAAKKIdB4vEQOHu7lgSXS+0UCih8P+gDSEB95j5gpArfbTHA4v4FAjYAsS5HXo+UrdM87CvT2SEW474GQEIkUGQtMraXnaeQQjAVCg7PpKCXMJAQf498f7KXpFTA7MkuHibkyKLolCBIUBYNgfkwLgALLALSUwkNUcDwcECGCNSzTkvweLAJADDdjKRHutWcEQMamjaJg7bVnCmA8HiwHzsB1ZIbSPzpn2AB6AD8tFhkB-phKBiLgf6eL6NgEDGHQvgyaRejVnMpysOxYm1nAAAePF9hQgnCTQ9EQIxzGsWJ4pAA'>Try</a></div></pre>\n<p>First, let’s take a close look at this and understand that it works</p>\n<ul>\n<li>Run this in the TypeScript playground, and verify that you see the logging you should see</li>\n<li>Take a close look at the types of the items in <code>dict1</code> and <code>dict2</code> above, to convince yourself that <strong>we get a different kind of dictionary out of <code>listToDict</code>, depending on the type of the array we pass in</strong></li>\n</ul>\n<p>This is much better than our “dictionary of <code>any</code>s”, in that we lose no type information as a side effect of going through the list-to-dictionary transformation.</p>\n<p>Now that we realize we’ve arrived at a good result, let’s unpack the solution a bit and\nexamine various parts and what they mean. To do this, let’s strip out almost the entire\nalgorithm, leaving only things that relate to this <code>T</code> thing that’s been introduced to the code</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">listToDict</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">list</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">[], </span><span style=\"color: #008000\">// take the list as an argument</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">idGen</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// a callback to get Ids</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dict</span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\"> } = {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dict</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Here’s what this code means:</p>\n<ul>\n<li><strong>&#x3C;T> to the right of <code>listDict</code></strong> means that the type of this function is now parameterized in terms of a type <code>T</code> (which may change on a per-usage basis)</li>\n<li>The fact that our first argument is now <strong><code>list: T[]</code></strong> means we accept a list of <code>T</code>’s as an argument. TypeScript’s inference will actually take this to mean <strong>use the array we pass as the first argument in order to <em>determine</em> <code>T</code></strong>. If we use a <code>string[]</code>, <code>T</code> will be <code>string</code>, if we use a <code>number[]</code>, <code>T</code> will be <code>number</code>. </li>\n</ul>\n<p>Try to convince yourself of these first two ideas with the following much simpler (and more pointless) example</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function wrapInArray&amp;lt;T>(arg: T): [T]' >wrapInArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in wrapInArray&amp;lt;T>(arg: T): [T]' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in wrapInArray&amp;lt;T>(arg: T): [T]' >T</data-lsp></span><span style=\"color: #000000\">): [</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in wrapInArray&amp;lt;T>(arg: T): [T]' >T</data-lsp></span><span style=\"color: #000000\">] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function wrapInArray&amp;lt;number>(arg: number): [number]' >wrapInArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">);</span></div><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>function wrapInArray&lt;number&gt;(arg: number): [number]</span>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function wrapInArray&amp;lt;Date>(arg: Date): [Date]' >wrapInArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">());</span></div><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>function wrapInArray&lt;Date&gt;(arg: Date): [Date]</span>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function wrapInArray&amp;lt;RegExp>(arg: RegExp): [RegExp]' >wrapInArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var RegExp: RegExpConstructor&amp;#13;new (pattern: string | RegExp, flags?: string | undefined) => RegExp (+2 overloads)' >RegExp</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&apos;/</span><span style=\"color: #EE0000\">\\s</span><span style=\"color: #A31515\">/&apos;</span><span style=\"color: #000000\">));</span></div><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>function wrapInArray&lt;RegExp&gt;(arg: RegExp): [RegExp]</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAdwE4EMAOBJMBBVDATwB4AVAPgAp1UBzALkTIEomBtMgXUQG8AoRIlQBTKCFRJ2tOlwDc-AL79+aLLgLEqAZhYKA9PqGIAegH5VGHPkLoiVMCOSIAIuigiqLPf0PHzluo2Wo7OAEoidACiAB6YVADk+gA6AM76Cd4GRsb+ZkA'>Try</a></div></pre>\n<p>Ok, back to the more meaningful code</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">listToDict</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">list</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">[], </span><span style=\"color: #008000\">// take the list as an argument</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">idGen</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// a callback to get Ids</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dict</span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\"> } = {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dict</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<ul>\n<li><code>idGen</code> is a callback that <em>also</em> uses <code>T</code> as an argument. This means that\nwe’ll get some type-checking alignment between the array and the <code>idGen</code> function</li>\n</ul>\n<p>Here’s an example of a misalignment that TypeScript will now catch for us</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;string>(list: string[], idGen: (arg: string) => string): {&amp;#13;    [k: string]: string;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">&apos;a&apos;</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&apos;b&apos;</span><span style=\"color: #000000\">], (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: string' style='border-bottom: solid 2px lightgrey;'>arg</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: string' style='border-bottom: solid 2px lightgrey;'>arg</data-lsp></span><span style=\"color: #000000\">)</span></div><span class='popover-prefix'>                        </span><span class='popover'><div class='arrow'></div>(parameter) arg: string</span>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;number>(list: number[], idGen: (arg: number) => string): {&amp;#13;    [k: string]: number;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">15</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">16</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: number' style='border-bottom: solid 2px lightgrey;'>arg</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: number' style='border-bottom: solid 2px lightgrey;'>arg</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span></div><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>(parameter) arg: number</span>\n<div class='line'><span style=\"color: #000000\">)</span></div>\n<div class='line'><span style=\"color: #008000\">// this should break -- mismatch between string/number</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;number>(list: number[], idGen: (arg: number) => string): {&amp;#13;    [k: string]: number;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\"><data-err>&apos;a&apos;</data-err></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\"><data-err>&apos;b&apos;</data-err></span><span style=\"color: #000000\">], (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: number' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: number' >arg</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">)</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</br>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322<br/>2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</br>Type 'string' is not assignable to type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vVtAoAMwFcA7AYwBcBLOU0AG2sUoBU4ARaqgHlYD4AFPlCNmlVKwDaAXQA0oEKEoBDANaRlAC01MWoFYgP0V0AObEAtpFKURoagBMA4jdSDTZyQEpQAXn5QFmhqUjNFMBVQchUGBgAjFXI1ZThQM0hKUABJR0R8b1QAb1ApNVRg0LMZSVAAX1Ai+3I6fUduCUbS8qDKELCa0FZ6-0a6+2hM4mh6dqp8cZAwAFpV8mJKVeX8PTZODsEpAHIVI4Uj+KP5UA9zXwCDO-wlUVe394-RAD0Afh3xdhcKjCURSAAsCgAHAoAIwAVlhADYFJgFGC0PJ7LczPdAgADAAkRU8dTxzzAoF+BXw5O0zCCWjgxAYjlA8Um6lAq1AlmYlhUlHIWjZmQA7pAbL1+mZgKQrPEYP8WICDsdTudLtdsag5ZYFdBcaBCcTzKTvEA'>Try</a></div></pre>\n<p>Let’s look at the code in question one more time</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">listToDict</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">list</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">[], </span><span style=\"color: #008000\">// take the list as an argument</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">idGen</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// a callback to get Ids</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dict</span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\">T</span><span style=\"color: #000000\"> } = {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">dict</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>One last thing to examine: the <code>return</code> type. The way we’ve\ndefined this, a <code>T[]</code> will be turned into a <code>{ [k: string]: T }</code>\n<em>for any <code>T</code> of our choosing</em></p>","tableOfContents":"<ul>\n<li><a href=\"#a-motivating-use-case\">A motivating use case</a></li>\n<li><a href=\"#defining-a-type-parameter\">Defining a type parameter</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v3/14-generics/"},"frontmatter":{"title":"Generics","course":"fundamentals-v3","date":"May 01, 2015","description":"Generics allow us to parameterize types, which unlocks great opportunity\nto reuse types broadly across a TypeScript project\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/14-generics/","title":"Generics","course":"fundamentals-v3","order":14,"previous":{"fields":{"slug":"/course/fundamentals-v3/13-nullish-values/"},"frontmatter":{"title":"Nullish values","order":13,"course":"fundamentals-v3","isExercise":null}},"next":null}},"staticQueryHashes":["1246554614","2841359383"]}