{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v3/08-exercise-json-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"},{"id":"making-typescript-stick","title":"Making TypeScript Stick","summary":"Completing an introductory TypeScript workshop is a great first step your TS\nlearning journey, but being able to apply the language to solve challenging\nand varied problems can require a deeper understanding, and a well-formed\nmental model. In this workshop, we'll tackle a series of challenges designed\nto reinforce your knowledge and make the important concepts truly \"stick\"\nin your mind.\n"},{"id":"full-stack-ts","title":"Full Stack TypeScript","summary":"TypeScript offers a delightful authoring experience, but for many apps all\nbets are off once you make an API call and receive an `any` response back.\nIn this workshop we'll combine TypeScript and GraphQL's type systems to\ncreate full-stack, fully-type-checked codebases (even the data layer!)\nthat are shockingly easy to evolve, refactor and maintain.\n"}]}},"markdownRemark":{"id":"475bae91-7d1e-5efc-8491-0f84ddc80366","excerpt":"Let’s put our knowledge to the test, by defining a type\nthat describes any allowable JSON value. Here’s the relevant section of the specification: Here’s your…","html":"<p>Let’s put our knowledge to the test, by defining a type\nthat describes any allowable JSON value.</p>\n<p>Here’s the relevant section of the specification:</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">A JSON value MUST be an\n\n- object\n- array\n- number\n- string,\n\nor one of the following three literal names:\n\n- false\n- true\n- null</span></div></code></div></pre>\n<p>Here’s your starting point code:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONObject = any' >JSONObject</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">any</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONArray = any' >JSONArray</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">any</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONValue = any' >JSONValue</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">any</span></div>\n<div class='line'><span style=\"color: #008000\">////// DO NOT EDIT ANY CODE BELOW THIS LINE //////</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONValue = any' >JSONValue</data-lsp></span><span style=\"color: #000000\">) {}</span></div>\n<div class='line'><span style=\"color: #008000\">// POSITIVE test cases (must pass)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">15</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">16</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">])</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) greeting: string' >greeting</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> })</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: {&amp;#13;    b: (string | number)[];&amp;#13;}' >a</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) b: (string | number)[]' >b</data-lsp>:</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">] } })</span></div>\n<div class='line'><span style=\"color: #008000\">// NEGATIVE test cases (must fail)</span></div><div class='line'><span style=\"color: #008000\"><data-err>// @ts-expect-error</data-err></span></div><span class=\"error\"><span>Unused '@ts-expect-error' directive.</span><span class=\"code\">2578</span></span><span class=\"error-behind\">Unused '@ts-expect-error' directive.</span><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #008000\"><data-err>// @ts-expect-error</data-err></span></div><span class=\"error\"><span>Unused '@ts-expect-error' directive.</span><span class=\"code\">2578</span></span><span class=\"error-behind\">Unused '@ts-expect-error' directive.</span><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> {})</span></div><div class='line'><span style=\"color: #008000\"><data-err>// @ts-expect-error</data-err></span></div><span class=\"error\"><span>Unused '@ts-expect-error' directive.</span><span class=\"code\">2578</span></span><span class=\"error-behind\">Unused '@ts-expect-error' directive.</span><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='any' >BigInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">143</span><span style=\"color: #000000\">))</span></div><div class='line'><span style=\"color: #008000\"><data-err>// @ts-expect-error</data-err></span></div><span class=\"error\"><span>Unused '@ts-expect-error' directive.</span><span class=\"code\">2578</span></span><span class=\"error-behind\">Unused '@ts-expect-error' directive.</span><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsAOAUAC4CeADpKAFIDKA8gHI0BGAVpAMYGgC8oAhgHZFCpctXoBBWLyLc+g4WUq06ANV4AbAK7keAoXhCGwAERqgGAFVABRYwEkr4ugE1QAYRrHroAELWAMjQA6qAWABJ2VKD+dnTeRiB4AGaa-BwAlnD8oOmIYnQAFLzQAOao+WpakACUoADeAL54BmAACjRUDnYq3gSQiJxsvIj9oAUAtpoDoCTDiNV4ufkFAEQAFpDq6nArC0vKBQDaACwANKA45wCMGNcAbOdoAMznx2gAunt5B3WgJdCQSAEdL8MqgdabbYrUANL7LJIaEZwg4EaDaZH0Ar8TRbDGFX68VC-RioQ5oc4vcFJOA7d4wmELFrmawAcXEFm6vX6g2GowmU04CPS6gWIAgBEQAFpIAAPMgcaWwBCLb6Ygq1LgAPnBuyZ4Al0rl7AIivg0BVyzY6jm9VheoNsvlJpgZotB1SABNIEkQZAPaKwPqpY7jablftMfxIAB3XzpEp2fgEApXY5PaoB8XBo0Kl3h1WFCN0apAA'>Try</a></div></pre>\n<details>\n  <summary>Spoiler warning // Click to reveal answer</summary>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONPrimitive = string | number | boolean | null' >JSONPrimitive</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\">boolean</span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\">null</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONObject = {&amp;#13;    [k: string]: JSONValue;&amp;#13;}' >JSONObject</data-lsp></span><span style=\"color: #000000\"> = { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONValue = JSONPrimitive | JSONObject | JSONArray' >JSONValue</data-lsp></span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONArray = JSONValue[]' >JSONArray</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONValue = JSONPrimitive | JSONObject | JSONArray' >JSONValue</data-lsp></span><span style=\"color: #000000\">[]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONValue = JSONPrimitive | JSONObject | JSONArray' >JSONValue</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONArray = JSONValue[]' >JSONArray</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONObject = {&amp;#13;    [k: string]: JSONValue;&amp;#13;}' >JSONObject</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONPrimitive = string | number | boolean | null' >JSONPrimitive</data-lsp></span></div>\n<div class='line'><span style=\"color: #008000\">////// DO NOT EDIT ANY CODE BELOW THIS LINE //////</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: JSONValue' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type JSONValue = JSONPrimitive | JSONObject | JSONArray' >JSONValue</data-lsp></span><span style=\"color: #000000\">) {}</span></div>\n<div class='line'><span style=\"color: #008000\">// POSITIVE test cases (must pass)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">15</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">16</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">])</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) greeting: string' >greeting</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> })</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: {&amp;#13;    b: (string | number)[];&amp;#13;}' >a</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) b: (string | number)[]' >b</data-lsp>:</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">] } })</span></div>\n<div class='line'><span style=\"color: #008000\">// NEGATIVE test cases (must fail)</span></div><div class='line'><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> {})</span></div><div class='line'><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='any' >BigInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">143</span><span style=\"color: #000000\">))</span></div><div class='line'><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #000000\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsAOAUAC4CeADpKAFIDKA8gHIAK0AlgLbMHMBu5AvKIgIsAdgHNQAH1DCArqwBGMSaHlw4AG0gBDYctnr1hUuWr0a8gFaQAxgVD8A3qADaAa1SCRogLqpTdADUtdRlyAF8jMkpaOgBBWC0ie2j6IJDIZ29Ikxi00OT-eOhE5X9zK1tSmKY2Dm5IPDwQZrAAERpQOhoAFVAAUVaASV7YugBNUABhGla+0AAhPoAZGgB1UG6ACUGqUCXBujmWkDwAMxlhW2Y4XWZEfwAKLWhRP1zg0IBKUAcIprAGDQqMNBgE5gRIIJQNYtIhIaAHqwZFCSLDEJ88HdHgAiAAWkAMcGxGKxMQezgALAAaUA4GkARgwDIAbDS0ABmGkUtDeEn3MlOUTQSCQThiVB4gnqImgMJ8x6nYJw+VkoRfTH8+gPfTqFVapxaVBOeSoZxoGmc0DY05qbHeWWyjH-Tp9ADisW6oPBkLsMLhiARSKhiuYuud4AIiAAtJAAB5kWwx2AIDWPB7fXgAPitxPDkZj8ZsBCT8GgqbJ1nUaJ+crz0bjCeLMFL5a1FwAJpBTsxhJB2xiQBB8w2iyWU6Stb2AO4LZiiQbCAgPekU9mfAdgCP1wuJ5vjzV0B4TuifIA'>Try</a></div></pre>\n</details>","tableOfContents":"","fields":{"slug":"/course/fundamentals-v3/08-exercise-json-types/"},"frontmatter":{"title":"JSON types","course":"fundamentals-v3","date":"June 08, 2021","description":"We will take on our first challenge together: defining types\nthat describe any valid JSON value\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/08-exercise-json-types/","title":"JSON types","course":"fundamentals-v3","order":8,"previous":{"fields":{"slug":"/course/fundamentals-v3/07-interfaces-and-type-aliases/"},"frontmatter":{"title":"Interfaces and Type Aliases","order":7,"course":"fundamentals-v3","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v3/09-functions/"},"frontmatter":{"title":"Functions","order":9,"course":"fundamentals-v3","isExercise":null}}}},
    "staticQueryHashes": ["2074799692","2841359383"]}