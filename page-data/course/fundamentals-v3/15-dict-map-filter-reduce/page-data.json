{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/course/fundamentals-v3/15-dict-map-filter-reduce/","result":{"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"},{"id":"making-typescript-stick","title":"Making TypeScript Stick","summary":"Completing an introductory TypeScript workshop is a great first step your TS\nlearning journey, but being able to apply the language to solve challenging\nand varied problems can require a deeper understanding, and a well-formed\nmental model. In this workshop, we'll tackle a series of challenges designed\nto reinforce your knowledge and make the important concepts truly \"stick\"\nin your mind.\n"},{"id":"full-stack-ts","title":"Full Stack TypeScript","summary":"TypeScript offers a delightful authoring experience, but for many apps all\nbets are off once you make an API call and receive an `any` response back.\nIn this workshop we'll combine TypeScript and GraphQL's type systems to\ncreate full-stack, fully-type-checked codebases (even the data layer!)\nthat are shockingly easy to evolve, refactor and maintain.\n"}]}},"markdownRemark":{"id":"86b2e49f-8370-5d02-b472-cb28013bff61","excerpt":"Let’s put our newfound knowledge around Generics to the test by building out\nsome higher-order functions that operate on dictionaries:","html":"<p>Let’s put our newfound knowledge around <strong>Generics</strong> to the test by building out\nsome higher-order functions that operate on dictionaries:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">///// SAMPLE DATA FOR YOUR EXPERIMENTATION PLEASURE (do not modify)</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const fruits: {&amp;#13;    apple: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    grape: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    banana: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    lemon: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    pear: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    orange: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    raspberry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    cherry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;}' >fruits</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) apple: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >apple</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) grape: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >grape</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) banana: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >banana</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"yellow\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">183</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) lemon: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >lemon</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"yellow\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">80</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) pear: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >pear</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"green\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">178</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) orange: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >orange</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"orange\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">262</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) raspberry: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >raspberry</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) cherry: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >cherry</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in Dict&amp;lt;T>' >T</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #008000\">// Array.prototype.map, but for Dict</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function mapDict(...args: any[]): any' >mapDict</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">[]): </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #008000\">// Array.prototype.filter, but for Dict</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function filterDict(...args: any[]): any' >filterDict</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">[]): </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #008000\">// Array.prototype.reduce, but for Dict</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function reduceDict(...args: any[]): any' >reduceDict</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">[]): </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> {}</span></div>\n<div class='line'><span style=\"color: #008000\">/////////////////////////////////////////</span></div><div class='line'><span style=\"color: #008000\">///////////// TEST SUITE ///////////////</span></div><div class='line'><span style=\"color: #008000\">//////// no need to modify these ////////</span></div><div class='line'><span style=\"color: #008000\">/////////////////////////////////////////</span></div>\n<div class='line'><span style=\"color: #008000\">// MAP</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const fruitsWithKgMass: any' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function mapDict(...args: any[]): any' >mapDict</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const fruits: {&amp;#13;    apple: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    grape: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    banana: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    lemon: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    pear: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    orange: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    raspberry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    cherry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;}' >fruits</data-lsp></span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) fruit: any' >fruit</data-lsp></data-err></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) name: any' >name</data-lsp></data-err></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> ({</span></div><span class=\"error\"><span>Parameter 'fruit' implicitly has an 'any' type.</br>Parameter 'name' implicitly has an 'any' type.</span><span class=\"code\">7006<br/>7006</span></span><span class=\"error-behind\">Parameter 'fruit' implicitly has an 'any' type.</br>Parameter 'name' implicitly has an 'any' type.</span><div class='line'><span style=\"color: #000000\">  ...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: any' >fruit</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) kg: number' >kg</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0.001</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: any' >fruit</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >mass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: any' >name</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}))</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const lemonName: string' >lemonName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: any' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >lemon</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >name</data-lsp></span></div><div class='line'><span style=\"color: #008000\">// @ts-ignore-error</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const failLemonName: number' >failLemonName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: any' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >lemon</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >name</data-lsp></span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertOk(value: any, message: string): void' >assertOk</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: any' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[MAP] mapDict returns something truthy\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;any>(found: any, expected: any, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: any' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >cherry</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >name</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"cherry\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">&apos;[MAP] .cherry has a \"name\" property with value \"cherry\"&apos;</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;any>(found: any, expected: any, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: any' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >cherry</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >kg</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">0.005</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">&apos;[MAP] .cherry has a \"kg\" property with value 0.005&apos;</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;any>(found: any, expected: any, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: any' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >cherry</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >mass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">&apos;[MAP] .cherry has a \"mass\" property with value 5&apos;</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;number>(found: number, expected: number, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)' >keys</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: any' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">).</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&amp;lt;string>.length: number' >length</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[MAP] fruitsWithKgMass should have 8 keys\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div>\n<div class='line'><span style=\"color: #008000\">// FILTER</span></div><div class='line'><span style=\"color: #008000\">// only red fruits</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const redFruits: any' >redFruits</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function filterDict(...args: any[]): any' >filterDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruits: {&amp;#13;    apple: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    grape: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    banana: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    lemon: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    pear: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    orange: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    raspberry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    cherry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;}' >fruits</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) fruit: any' >fruit</data-lsp></data-err></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: any' >fruit</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >color</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"red\"</span></div><span class=\"error\"><span>Parameter 'fruit' implicitly has an 'any' type.</span><span class=\"code\">7006</span></span><span class=\"error-behind\">Parameter 'fruit' implicitly has an 'any' type.</span><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertOk(value: any, message: string): void' >assertOk</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const redFruits: any' >redFruits</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[FILTER] filterDict returns something truthy\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;number>(found: number, expected: number, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)' >keys</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const redFruits: any' >redFruits</data-lsp></span><span style=\"color: #000000\">).</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&amp;lt;string>.length: number' >length</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[FILTER] 4 fruits that satisfy the filter\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;string>(found: string, expected: string, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)' >keys</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const redFruits: any' >redFruits</data-lsp></span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;string>.sort(compareFn?: ((a: string, b: string) => number) | undefined): string[]' >sort</data-lsp></span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;string>.join(separator?: string | undefined): string' >join</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\", \"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"apple, cherry, grape, raspberry\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">&apos;[FILTER] Keys are \"apple, cherry, grape, raspberry\"&apos;</span></div><div class='line'><span style=\"color: #000000\">)</span></div>\n<div class='line'><span style=\"color: #008000\">// REDUCE</span></div><div class='line'><span style=\"color: #008000\">// If we had one of each fruit, how much would the total mass be?</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const oneOfEachFruitMass: any' >oneOfEachFruitMass</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function reduceDict(...args: any[]): any' >reduceDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruits: {&amp;#13;    apple: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    grape: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    banana: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    lemon: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    pear: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    orange: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    raspberry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    cherry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;}' >fruits</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) currentMass: any' >currentMass</data-lsp></data-err></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) fruit: any' >fruit</data-lsp></data-err></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) currentMass: any' >currentMass</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: any' >fruit</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >mass</data-lsp></span><span style=\"color: #000000\">,</span></div><span class=\"error\"><span>Parameter 'currentMass' implicitly has an 'any' type.</br>Parameter 'fruit' implicitly has an 'any' type.</span><span class=\"code\">7006<br/>7006</span></span><span class=\"error-behind\">Parameter 'currentMass' implicitly has an 'any' type.</br>Parameter 'fruit' implicitly has an 'any' type.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">0</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertOk(value: any, message: string): void' >assertOk</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const redFruits: any' >redFruits</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[REDUCE] reduceDict returns something truthy\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;string>(found: string, expected: string, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const oneOfEachFruitMass: any' >oneOfEachFruitMass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[REDUCE] reduceDict returns a number\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;any>(found: any, expected: any, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const oneOfEachFruitMass: any' >oneOfEachFruitMass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">817</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[REDUCE] 817g mass if we had one of each fruit\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQ18ZXgUNIAIAqBRAykgkgOQOIIFUsAZTLdBeYOSBAOwHt6BTZgEwQBcmBbBtgJYAzAJ5cAFswDOzSpBpVFS0DQQABZgCdNDTVIBcCAOwAGEwDZjZy6YtW7t8zADGDOlIYAbZgDpn3gENNAAoAShgYIQBXOmdOATcEAKkZTU4UAEcogM8pAB4kAD5gmAQEIQYYtkMkABpShGYADwAHZjj2GvqynmkpAIBzZkMpTk0BOgGYUIQAbwbhBGCKqoQAQgBeDcbW9s52cLKyznEdAHcWC5RtXRKjo4ADQBlyBABBFK14xKEAgW9qhAAElmvRSg2YAF8ADp0ZptDoA4FwvbsaF0FZ0RGzDFsCEPBplQ4IVzuLy+TwMAbBB6AUHIEAB5ADSQJBfXBePCEIi0ViXzoSQ+aXpAGtggA3HJRYZJOgiWoIUH9IYjMYTAYzeZlRbBNYSzxSonHU4MC6wq43ELPN6CvnlX7-QzAxXsh5Ekkebw+ClU2kM5lOtlDDkwLmgBAAWkjziinEj4Yi4AQaFeAFkAArEFAIAAiryQrwQADF6QAlBAATXpBDLKAAGmmUCXMCmUNh81h6dgEBmUK80NWs8E2ExGJwFfxhCJwu6x0JNFEBJwpAhtpqki0Wt5DLNiV5dIYAESadgH+U8ZIGBAARjMCAh3QQA00ATa293FM0h+PbFPCovhgAVjvB8ACMAjocCAjfVwP0PERmE8Ckzl-c8UkMK8AA4AGZgIabw+DoaC90-BAD3gxCTRQ-8EAwkxcLKNogiI2DSKfVg6CotDryMDD6IQXRwOVOZ333UiBMmZhOMvAAmcxpL458pBaECtE0ERmNEo8TzPaiABY+OcSRtHU4SYM078pMA3CuRgCZ9k0H5nFkbMBDiApCjmBoAG1hRVcZJgAXRqEME2AN5tACEQfBaHRuE4EQ2h8c8WnlECY3KXQc1czhIhiOIEn5ZKXLiYIfDKoIBkvcCRC8gLQkMaq5lDMLXgiqKYoYOKEt8IQ-ns1L0oqTQsriXLeQK8o+q0YrOFK8rNEqhrZVq+qZTEWZmvC592tizrup8b8oicgbZ0ymaxvyxJDqcma5p8CqquWuqlvWmzlHexQFHgZB0CQJMCDILN3q+sB6BHVgOG4cdBFECRpFkKAQY+5GVFUFNXjTFw3FGcp50XKQAHVF3ERkBhTC8Vz-FpbrnBcl3lZY8c4eUIN6GYNg84I1zKnxacXB9hQGQwTB8MwrwQAAqXG6aSi8H1Z5h6ghUJp2xsd8LcbAAl6Py1UpvmlyJk5SfJlIvWYAifAV1Q1CXcMBAGRhj3DVTdCx9xZ3tYgLc17XpToKIeBU4btgNwniZNi9zct62L0+EU7ml-GjZJsm5YaA8vPRtMAqpmaEGPTgok0dwEA8XoTj1sYY3EEQD2mGA47STJslyROw5TyOzcM1SooVh8Dx74zTwaAByLOMdzvwjLUhBxGSJJSIVg8EA6to0jEM5iYQPUpVIoe1IPUeG6b9IshyKR26Z8PjbT7uZ6iwWHxFswAIfcfs6ng+xHn5cAlIwWK816fE3tvXesgX4mAAsfcIp8W4XyvnTG+qdTZSGnr3WWKQHxvzHhPHOCB0HGTngvf+B5UJSCATode8UEBbxODvSUshoEnxtPAtuDR6QgQAFZ7B8MKZgIhL4dwjnfKQoRzaTBOA+DCA88G52EbfVBZdxCVE8BweeYpZC8X4YI+u4RVCFkwMQVAJZVBuE8GIb8Sclzuxxt+Qs199ZTU0LdBoYcHyMzpuzDyBs-DERXFsUiFkWGpE4AnBo9jr6yMMcYxs8jnH50LsXUu5dmCV0mFwecJw64hM+Gwy+HDuG8J0ZfSJSDxHeEkeIB8ulolGJMbnfSYcJABDHP0eIUhYYnFkL1Tw9k9GN1YefdhZROE8LiHwgRpT2AOPKT4DwaQwg+C4QwCYwRfwHlCAPF8m5FbEgfvKJ8L49mKWUr3EeZRx4xIaQgRkUykjHlIjs7w8pv6HOfG0eUpzg6HxgaFBAJYUDZgIAAYRQKoTAQhaGyHnhwNwsgGBQuYAEQy1j5QqIuDwI64haGqMhpILgnUch-hSAgFSAB+WxY54X0iECgFF4hZmLiUdsa6zBXFlHcQ0YI0ZtDMDoJwVB8oDbeOJMXY8AqlEAGprGYKkM-XJQpRQRJmVEjOXlAXArBbnNliS0nJOXKk9JAxMk1xybAoZrcCnHG6oi-isJaX0sMkywV6cygHgDkHLQFzSIaqBaClAOr2BHXZdlAu+qS5-3oIHYOAy4HDOtfa5gjqGUuqFQ0DCV4jCyM1QG3OmajAmvIQgRYZwYUBDhbCfiSKGXWL0UAA'>Try</a></div></pre>\n<details>\n  <summary>Spoiler warning // Click to reveal answer</summary>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">///// SAMPLE DATA FOR YOUR EXPERIMENTATION PLEASURE (do not modify)</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const fruits: {&amp;#13;    apple: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    grape: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    banana: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    lemon: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    pear: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    orange: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    raspberry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    cherry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;}' >fruits</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) apple: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >apple</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) grape: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >grape</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) banana: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >banana</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"yellow\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">183</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) lemon: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >lemon</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"yellow\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">80</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) pear: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >pear</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"green\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">178</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) orange: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >orange</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"orange\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">262</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) raspberry: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >raspberry</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) cherry: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;}' >cherry</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"red\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in Dict&amp;lt;T>' >T</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #008000\">// Array.prototype.map, but for Dict</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function mapDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, mapFunction: (original: T, key: string) => S): Dict&amp;lt;S>' >mapDict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in mapDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, mapFunction: (original: T, key: string) => S): Dict&amp;lt;S>' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in mapDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, mapFunction: (original: T, key: string) => S): Dict&amp;lt;S>' >S</data-lsp></span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputDict: Dict&amp;lt;T>' >inputDict</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in mapDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, mapFunction: (original: T, key: string) => S): Dict&amp;lt;S>' >T</data-lsp></span><span style=\"color: #000000\">&gt;,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) mapFunction: (original: T, key: string) => S' >mapFunction</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) original: T' >original</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in mapDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, mapFunction: (original: T, key: string) => S): Dict&amp;lt;S>' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in mapDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, mapFunction: (original: T, key: string) => S): Dict&amp;lt;S>' >S</data-lsp></span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in mapDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, mapFunction: (original: T, key: string) => S): Dict&amp;lt;S>' >S</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const outDict: Dict&amp;lt;S>' >outDict</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in mapDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, mapFunction: (original: T, key: string) => S): Dict&amp;lt;S>' >S</data-lsp></span><span style=\"color: #000000\">&gt; = {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)' >keys</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputDict: Dict&amp;lt;T>' >inputDict</data-lsp></span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const thisVal: T' >thisVal</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputDict: Dict&amp;lt;T>' >inputDict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='const outDict: Dict&amp;lt;S>' >outDict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) mapFunction: (original: T, key: string) => S' >mapFunction</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const thisVal: T' >thisVal</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const outDict: Dict&amp;lt;S>' >outDict</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// Array.prototype.filter, but for Dict</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function filterDict&amp;lt;T>(inputDict: Dict&amp;lt;T>, filterFunction: (value: T, key: string) => boolean): Dict&amp;lt;T>' >filterDict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in filterDict&amp;lt;T>(inputDict: Dict&amp;lt;T>, filterFunction: (value: T, key: string) => boolean): Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputDict: Dict&amp;lt;T>' >inputDict</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in filterDict&amp;lt;T>(inputDict: Dict&amp;lt;T>, filterFunction: (value: T, key: string) => boolean): Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt;,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) filterFunction: (value: T, key: string) => boolean' >filterFunction</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) value: T' >value</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in filterDict&amp;lt;T>(inputDict: Dict&amp;lt;T>, filterFunction: (value: T, key: string) => boolean): Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">boolean</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in filterDict&amp;lt;T>(inputDict: Dict&amp;lt;T>, filterFunction: (value: T, key: string) => boolean): Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const outDict: Dict&amp;lt;T>' >outDict</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in filterDict&amp;lt;T>(inputDict: Dict&amp;lt;T>, filterFunction: (value: T, key: string) => boolean): Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)' >keys</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputDict: Dict&amp;lt;T>' >inputDict</data-lsp></span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const thisVal: T' >thisVal</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputDict: Dict&amp;lt;T>' >inputDict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) filterFunction: (value: T, key: string) => boolean' >filterFunction</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const thisVal: T' >thisVal</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\">)) </span><span style=\"color: #001080\"><data-lsp lsp='const outDict: Dict&amp;lt;T>' >outDict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='const thisVal: T' >thisVal</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const outDict: Dict&amp;lt;T>' >outDict</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// Array.prototype.reduce, but for Dict</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function reduceDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, reducerFunction: (currentVal: S, dictItem: T, key: string) => S, initialValue: S): S' >reduceDict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in reduceDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, reducerFunction: (currentVal: S, dictItem: T, key: string) => S, initialValue: S): S' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in reduceDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, reducerFunction: (currentVal: S, dictItem: T, key: string) => S, initialValue: S): S' >S</data-lsp></span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputDict: Dict&amp;lt;T>' >inputDict</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in reduceDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, reducerFunction: (currentVal: S, dictItem: T, key: string) => S, initialValue: S): S' >T</data-lsp></span><span style=\"color: #000000\">&gt;,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) reducerFunction: (currentVal: S, dictItem: T, key: string) => S' >reducerFunction</data-lsp></span><span style=\"color: #000000\">: (</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) currentVal: S' >currentVal</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in reduceDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, reducerFunction: (currentVal: S, dictItem: T, key: string) => S, initialValue: S): S' >S</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dictItem: T' >dictItem</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in reduceDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, reducerFunction: (currentVal: S, dictItem: T, key: string) => S, initialValue: S): S' >T</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  ) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in reduceDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, reducerFunction: (currentVal: S, dictItem: T, key: string) => S, initialValue: S): S' >S</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) initialValue: S' >initialValue</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in reduceDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, reducerFunction: (currentVal: S, dictItem: T, key: string) => S, initialValue: S): S' >S</data-lsp></span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) S in reduceDict&amp;lt;T, S>(inputDict: Dict&amp;lt;T>, reducerFunction: (currentVal: S, dictItem: T, key: string) => S, initialValue: S): S' >S</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let value: S' >value</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) initialValue: S' >initialValue</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)' >keys</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputDict: Dict&amp;lt;T>' >inputDict</data-lsp></span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const thisVal: T' >thisVal</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) inputDict: Dict&amp;lt;T>' >inputDict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='let value: S' >value</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) reducerFunction: (currentVal: S, dictItem: T, key: string) => S' >reducerFunction</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let value: S' >value</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='const thisVal: T' >thisVal</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='let k: string' >k</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let value: S' >value</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #008000\">/////////////////////////////////////////</span></div><div class='line'><span style=\"color: #008000\">///////////// TEST SUITE ///////////////</span></div><div class='line'><span style=\"color: #008000\">//////// no need to modify these ////////</span></div><div class='line'><span style=\"color: #008000\">/////////////////////////////////////////</span></div>\n<div class='line'><span style=\"color: #008000\">// MAP</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const fruitsWithKgMass: Dict&amp;lt;{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function mapDict&amp;lt;{&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}, {&amp;#13;    ...;&amp;#13;} | ... 6 more ... | {&amp;#13;    ...;&amp;#13;}>(inputDict: Dict&amp;lt;...>, mapFunction: (original: {&amp;#13;    ...;&amp;#13;} | ... 6 more ... | {&amp;#13;    ...;&amp;#13;}, key: string) => {&amp;#13;    ...;&amp;#13;} | ... 6 more ... | {&amp;#13;    ...;&amp;#13;}): Dict&amp;lt;...>' >mapDict</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const fruits: {&amp;#13;    apple: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    grape: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    banana: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    lemon: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    pear: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    orange: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    raspberry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    cherry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;}' >fruits</data-lsp></span><span style=\"color: #000000\">, (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >fruit</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> ({</span></div><div class='line'><span style=\"color: #000000\">  ...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >fruit</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) kg: number' >kg</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0.001</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >fruit</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}))</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const lemonName: string' >lemonName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: Dict&amp;lt;{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >lemon</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span></div><div class='line'><span style=\"color: #008000\">// @ts-ignore-error</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const failLemonName: number' >failLemonName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: Dict&amp;lt;{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >lemon</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertOk(value: any, message: string): void' >assertOk</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: Dict&amp;lt;{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[MAP] mapDict returns something truthy\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;string>(found: string, expected: string, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: Dict&amp;lt;{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >cherry</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"cherry\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">&apos;[MAP] .cherry has a \"name\" property with value \"cherry\"&apos;</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;number>(found: number, expected: number, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: Dict&amp;lt;{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >cherry</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) kg: number' >kg</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">0.005</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">&apos;[MAP] .cherry has a \"kg\" property with value 0.005&apos;</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;number>(found: number, expected: number, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: Dict&amp;lt;{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >cherry</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">&apos;[MAP] .cherry has a \"mass\" property with value 5&apos;</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;number>(found: number, expected: number, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)' >keys</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const fruitsWithKgMass: Dict&amp;lt;{&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    kg: number;&amp;#13;    name: string;&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >fruitsWithKgMass</data-lsp></span><span style=\"color: #000000\">).</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&amp;lt;string>.length: number' >length</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[MAP] fruitsWithKgMass should have 8 keys\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div>\n<div class='line'><span style=\"color: #008000\">// FILTER</span></div><div class='line'><span style=\"color: #008000\">// only red fruits</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const redFruits: Dict&amp;lt;{&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >redFruits</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function filterDict&amp;lt;{&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>(inputDict: Dict&amp;lt;...>, filterFunction: (value: {&amp;#13;    ...;&amp;#13;} | ... 6 more ... | {&amp;#13;    ...;&amp;#13;}, key: string) => boolean): Dict&amp;lt;...>' >filterDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruits: {&amp;#13;    apple: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    grape: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    banana: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    lemon: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    pear: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    orange: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    raspberry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    cherry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;}' >fruits</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >fruit</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >fruit</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) color: string' >color</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"red\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertOk(value: any, message: string): void' >assertOk</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const redFruits: Dict&amp;lt;{&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >redFruits</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[FILTER] filterDict returns something truthy\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;number>(found: number, expected: number, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)' >keys</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const redFruits: Dict&amp;lt;{&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >redFruits</data-lsp></span><span style=\"color: #000000\">).</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&amp;lt;string>.length: number' >length</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[FILTER] 4 fruits that satisfy the filter\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;string>(found: string, expected: string, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #267F99\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)' >keys</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const redFruits: Dict&amp;lt;{&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >redFruits</data-lsp></span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;string>.sort(compareFn?: ((a: string, b: string) => number) | undefined): string[]' >sort</data-lsp></span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;string>.join(separator?: string | undefined): string' >join</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\", \"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"apple, cherry, grape, raspberry\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">&apos;[FILTER] Keys are \"apple, cherry, grape, raspberry\"&apos;</span></div><div class='line'><span style=\"color: #000000\">)</span></div>\n<div class='line'><span style=\"color: #008000\">// REDUCE</span></div><div class='line'><span style=\"color: #008000\">// If we had one of each fruit, how much would the total mass be?</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const oneOfEachFruitMass: number' >oneOfEachFruitMass</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function reduceDict&amp;lt;{&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}, number>(inputDict: Dict&amp;lt;...>, reducerFunction: (currentVal: number, dictItem: {&amp;#13;    ...;&amp;#13;} | ... 6 more ... | {&amp;#13;    ...;&amp;#13;}, key: string) => number, initialValue: number): number' >reduceDict</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const fruits: {&amp;#13;    apple: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    grape: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    banana: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    lemon: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    pear: {&amp;#13;        color: string;&amp;#13;        mass: number;&amp;#13;    };&amp;#13;    orange: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    raspberry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;    cherry: {&amp;#13;        ...;&amp;#13;    };&amp;#13;}' >fruits</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) currentMass: number' >currentMass</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >fruit</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) currentMass: number' >currentMass</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fruit: {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}' >fruit</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) mass: number' >mass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">0</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertOk(value: any, message: string): void' >assertOk</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const redFruits: Dict&amp;lt;{&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    color: string;&amp;#13;    mass: number;&amp;#13;} | {&amp;#13;    ...;&amp;#13;} | {&amp;#13;    ...;&amp;#13;}>' >redFruits</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[REDUCE] reduceDict returns something truthy\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;string>(found: string, expected: string, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const oneOfEachFruitMass: number' >oneOfEachFruitMass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[REDUCE] reduceDict returns a number\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function assertEquals&amp;lt;number>(found: number, expected: number, message: string): void' >assertEquals</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const oneOfEachFruitMass: number' >oneOfEachFruitMass</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #098658\">817</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"[REDUCE] 817g mass if we had one of each fruit\"</span></div><div class='line'><span style=\"color: #000000\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0Bco4FcCmAoE+DCjiSi9SwAVAUQGVKBJAOQHFQBVRgGQcbtArByRUADsA9mKxYAJukkBbcTPgAzAJ7oAFlkhYBxYYOMmQORONGRxAGywA6RHYCGsABQBKHDlUZRyeEtQZ0g9WGhqAEcMZxtIAB5KAD43HFBQVXE-GTRKABo00CwADwAHLGRZXIL0hV1IZwBzLDQYBFFGnA9QAG9CtVA3TOzQAEIAXnGisoroWS909OgtWHEAdykN6lhV90LF0AADQBlyUABBUKxwwNEM53g7HNAAEh660KasAF8AHVES8qVJ6vAGzWS-UTDUTAnpQmRfQ77UALUAWKy2Bw2cSNNyHQCg5KAAPIAaReb3qnwRXi+3l8-mgN2Cl3ChIA1m4AG6xbBoZyidR5UDvBrNVpweAdbp9dIDNyjLk2bAopYrdabUDbXa404XMIMoKqe6PNCvYWUw4otHWOz2LE4-FE0mminNKk4Gn4UAAWh9iAw0B9Xu8hFAtDOAFkAApcaigAAiZ0oZ1AADFCQAlUAATUJ7Ez1AAGpHqOmGOHqEwk4xCUxQNHqGdaHnY24ZJIJNAhco1OovFbO6pYBh4NBIKAptLgqVSnY0D1UbZxLA0AAiWCyFeChQhSBoACMAAYD6AvjVQI1YM5ynOF1jl6A1xutzu0ABWE9ngBGfJ-N4sd9XdQsBsLE1k3IUX1APcAA4AGYP0KOwlFEP9F3vFcgJA9ZwO3UI0Gg49T0KcpXFQgCHwvaRRBwyC9wAdmghD0iXPlRV6W8l1XFiOiwGi8NAAAmAA2ASmNAS9IFKT8rlgdQyM4h91xkPjd1AAAWMTEB0HY5PY-8FMfZTn3498iJpHAJTmWBDUQfQ4yQaBEiSXpCgAbVZMV2kaABdXJ3WDMAzh2Zx1HsUpVmgcRoHUcp7G3UpBU-f0MiXeMHJ8PwAiCeL7OQRJBVoFJ+lEUp-Vy1A0ry5Iz3ilNMv1FDBiXeBGglWJqlAVksF0toJUabpxmc2gujQcr4kKlz0n7UAsmgcrRoc8bnInGl0kyWBBjsTtWRm1QiU-AArWZ7C69RIDcCVSrmhyPClJFpuWeBIAANVicdQEusqHPc7ykVm8qfve2r6puNxHpe2JBVZFFVvErBoAwWBbn+9KPUC4LQvCqKopihxVAeKzEuS9bKugDL6UZfGbCssbklSGUSq+5AFqqpIzypqy6opyw0E5bkWlAfJOu6zy+oG5zP3EDE+RG0mnMmhcrE7FHmbl5J3p6WGSbcLbOt2-ajuQE7uvOz7ruQW6FamywYG0J7Xpsd6zYB1lfoOWUOauLmstEMGtHtyHOstlXoEBqZwYdwpYfXBGkZmpmybR84MbCiKcdipSMFsomB1S8ryZ9uGZCzrBaYKoqGau+a1bZwpM9s2BvYa3n7sR9dRGgB20FoM90hUZAGDmBRqiRU7RY6QpxdDM8JRHeBYgdnlQ1l2gFd1hVsCd0Q54X-nCm13WdvEPbCUO47TtNxnzegS3J2tpW7Yhx2pmd77XaRDf9CmeuvZByw+cVFgQUEdA7QyjnXeGiNbif38kYUw8CSBwJIILOglBQzsF4LGeBSCQBiHbNIOQkUuwqA0NoXQ+hEEIKoYg8goBwxnEjOYG2A4hwjkgAAdRHFoYkjRww7iBlecqQxWGjkFMI4c0BBSiGcHUKebhJz2EUYOCRZ5WSNDQAeewR49ygAAFQZBEXFHcZ5pF1AKF8W6TCH5IUsEwGRAteodHesothnDlg8L4aEW0WBkL2FMbgXB4BRxehahIdcXoZJLisbbQ0DwuA+NsfYtAogMAKGkhtKYLjRxuO4bwnc3jfH+JwDuK40A2T0wMRIjhXCPHGMKCuVy9DIzeQgqUcqcNY5WFANYOoj0nGYGWOoFcXRinMgiNEWI5194iOqe4vJXitIyVCv4s8K5Fk6U3IUAA5I0hhLTHDaVkqALQIRggPn8SuUAWNyjhE0GsLhoBP4PnWbJFcWyRklPCFEGIcQKlZNmbkzxkADlLJOo0M8mijyvjPDspp+yXmaBOWOZwD41GXOuaUu5DynmQoPK+d5XhPnjJ+VMtaMycm1IWYc0KuFIBnmhds3ZzTQAgp0sc05KKVy0vRasG50VQD3OWI8-moB8UfLGd8yZFTT6G2gMbM64jXE1PmZADw3iOjLDPNBVZTKWn-IpSq7pWgsg2DkCcjk+hGIX2GV4WhKYGBcBoOmWhlgbCaCUpUth0TOxKRTDM5xBMrhCOmVUs8iqb7jmclkxwaFxyTEUhucVepykQJkH60N9TXL2sdSWPVgbYDtJjlAscPT4b+36UOQZNrRl6klb8woMrz4mzcL6mZaq7Aaq0GeNSOrs1OpaRpf52hnCdgaAySApDlj6E9rAatRK62koNk2hVraqlqusOETw9gDriAlG4cCK4PCrKvDOIBqJqWCgvFeM9EkpJLM2ekHZfbc2gGJCbYI64HwnrsIKBFl7LzlEFLe9JryCUBVAOmagcZ2AAGFqC0IYHtNY+gTlyEsPoY+RRnBaU9ZI45aoFBZy0AKk1hCdDyGgG9WloBpIAH5vUzX+ISVQ1BsNaHTSOIF70f7BrJRm9Ibg-Q7CwB3IFgoslTyE+3aAXGADUuGjGhAhUm0pKb0irrYTqyD0G4MtJ4w5DpxbuniF6eWxo6BK1aCGSpr5Ez61LFxph9DzHWNaQ4zJup6QVwpLSVcB9D5XLadg9QPTsgS6FsgUjZFYhUnpLnRKuzi7nMsbY+5sThRoL0S01B4LLTMt0XM9RgYyH2Vof+PrLAbHcM2qAA'>Try</a></div></pre>\n</details>","tableOfContents":"","fields":{"slug":"/course/fundamentals-v3/15-dict-map-filter-reduce/"},"frontmatter":{"title":"Dictionary map, filter and reduce","course":"fundamentals-v3","date":"June 08, 2021","description":"Many of us use array the higher-order functions map, filter and reduce\nquite often. Let's build out similar utilities that operate on dictionaries!\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/15-dict-map-filter-reduce/","title":"Dictionary map, filter and reduce","course":"fundamentals-v3","order":15,"previous":{"fields":{"slug":"/course/fundamentals-v3/14-generics/"},"frontmatter":{"title":"Generics","order":14,"course":"fundamentals-v3","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v3/16-type-param-scopes-and-constraints/"},"frontmatter":{"title":"Generics Scopes and Constraints","order":16,"course":"fundamentals-v3","isExercise":null}}}},"staticQueryHashes":["2074799692","2841359383"]}