{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/course/fundamentals-v3/07-interfaces-and-type-aliases/","result":{"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"}]}},"markdownRemark":{"id":"e12c48f1-8530-51f2-b167-7f30a60209b1","excerpt":"TypeScript provides two mechanisms for centrally defining types and giving them\nuseful and meaningful names: interfaces and type aliases. We will study both…","html":"<p>TypeScript provides two mechanisms for centrally defining types and giving them\nuseful and meaningful names: <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces\">interfaces</a> and <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases\">type aliases</a>. We will study both\nconcepts in depth, and explain when it makes sense to use each type.</p>\n<h2 id=\"type-aliases\" style=\"position:relative;\"><a href=\"#type-aliases\" aria-label=\"type aliases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type aliases</h2>\n<p>Think back to the <code>: {name: string, email: string}</code> syntax we’ve used up until this point for type annotations. This\nsyntax will get increasingly complicated as more properties are added to this type. Furthermore, if we pass\nobjects of this type around through various functions and variables, we will end up with a <em>lot</em> of types that need to be manually updated whenever we need to make any changes!</p>\n<p>Type aliases help to address this, by allowing us to:</p>\n<ul>\n<li>define <strong>a more meaningful name</strong> for this type</li>\n<li>declare the particulars of the type <strong>in a single place</strong></li>\n<li><strong>import and export</strong> this type from modules, the same as if it were an exported value</li>\n</ul>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">///////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #008000\">// @filename: types.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type UserContactInfo = {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;}' >UserContactInfo</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) email: string' >email</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">///////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #008000\">// @filename: utilities.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) type UserContactInfo = {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;}&amp;#13;import UserContactInfo' >UserContactInfo</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./types\"</span></div><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>(alias) type UserContactInfo = {\n    name: string;\n    email: string;\n}\nimport UserContactInfo</span>\n<div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printContactInfo(info: UserContactInfo): void' >printContactInfo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) info: UserContactInfo' >info</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(alias) type UserContactInfo = {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;}&amp;#13;import UserContactInfo' >UserContactInfo</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) info: UserContactInfo' style='border-bottom: solid 2px lightgrey;'>info</data-lsp></span><span style=\"color: #000000\">)</span></div><span class='popover-prefix'>               </span><span class='popover'><div class='arrow'></div>(parameter) info: UserContactInfo</span>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) info: UserContactInfo' >info</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) email: string' style='border-bottom: solid 2px lightgrey;'>email</data-lsp></span><span style=\"color: #000000\">)</span></div><span class='popover-prefix'>                    </span><span class='popover'><div class='arrow'></div>(property) email: string</span>\n<div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQ18ZXTYFAgAQAEBmBLANgUwHYEMBbbALkQBcBPAB2wGcA6cuubAD2oHsAncim7IgCqdbNwDCnXOXwBjcgElcqTogC8iAN5xEiAsTJ1y3dLgDmOxNkL4sh46YsBfBLDfuPUVygw59pRABXcix0EPomFnRCLl4tYVEJKRl5JRVEJ0RUbk5CRAAiBmAqWjp8711KyoA9AH44VEDceXQpRGoTaUlpOUVlTgAKUxUyETFulL6VAEotS1kpOk4cBkxOMyH+6cskKr3EOvnF5exV9c2VBmtbTG3dXf3Hg-qnIA'>Try</a></div></pre>\n<p>We can see a couple of things here:</p>\n<ul>\n<li>the tooltip on <code>info</code> is now a lot cleaner and <strong>more semantic</strong> (meaningful, in connection with the concept behind it)</li>\n<li>import/export of this <code>type</code> works just as it would for a function or a class in JavaScript</li>\n</ul>\n<blockquote>\n<p>It’s important to realize that the <strong>name</strong> <code>UserContactInfo</code> is just for our convenience. This is still a structural type system</p>\n</blockquote>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">///////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #008000\">// @filename: utilities.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) type UserContactInfo = {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;}&amp;#13;import UserContactInfo' >UserContactInfo</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./types\"</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printContactInfo(info: UserContactInfo): void' >printContactInfo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) info: UserContactInfo' >info</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(alias) type UserContactInfo = {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;}&amp;#13;import UserContactInfo' >UserContactInfo</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) info: UserContactInfo' >info</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) info: UserContactInfo' >info</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) email: string' >email</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const painter: {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;    favoriteColor: string;&amp;#13;}' >painter</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Robert Ross\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) email: string' >email</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"bross@pbs.org\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) favoriteColor: string' >favoriteColor</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Titanium White\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printContactInfo(info: UserContactInfo): void' >printContactInfo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const painter: {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;    favoriteColor: string;&amp;#13;}' >painter</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #008000\">// totally fine</span></div><span class='popover-prefix'>                   </span><span class='popover'><div class='arrow'></div>const painter: {\n    name: string;\n    email: string;\n    favoriteColor: string;\n}</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKALgTwA7wDOAdNkQFDwAe+A9gE7Y4HygCqR8DAwnYtmQBjbAElEkOqAC8oAN4VQoFOixFsDaIgDmi0PFTI4ajVt0BfCiDABaO0ICu2OzavX3Hz1+8-fntxAwCCqYoE5w0NjQxGSU0Kj0TPIcXLz8giLikqDmoJAMdKigAEQkwHiERMUUkA6IItD8oPiaAnwCwmISdAAUWpJYnNztGV2SAJTyekL8RHQIJLB02n3d49Oz8-CLy6uSJAZGsOuWM4jqzUYC3DJTSiFYxQBKdABG3MwvRFUANHqHxhKrwK33A+FepEY2mKfyUkGQADdGJF4HwlgxHgAVSLIRDQBxFADqAAsUTCKJYKC0tNgRp0sr18FdsNxJiAcHRBLBYLg8lp4AElELhSKlAA9AD8QA'>Try</a></div></pre>\n<p>Let’s look at the declaration syntax for a moment:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type UserContactInfo = {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;}' >UserContactInfo</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) email: string' >email</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAqgzhATgYQPYDtgEMDGwCS6AZqlALxQDeAUFFOlgLYQBcUcwiAlugOa1QIjLFwA2bDtz7UAvkA'>Try</a></div></pre>\n<p>A few things to point out here:</p>\n<ol>\n<li>This is a rare occasion where we see type information on the right hand side of the assignment operator (<code>=</code>)</li>\n<li>We’re using <code>TitleCase</code> to format the alias’ name. This is a common convention</li>\n<li>As we can see below, we can only declare an alias of a given name <em>once</em> within a given scope. This is kind of like how a <code>let</code> or <code>const</code> variable declaration works</li>\n</ol>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-err><data-lsp lsp='type UserContactInfo = {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;}' >UserContactInfo</data-lsp></data-err></span><span style=\"color: #000000\"> = {</span></div><span class=\"error\"><span>Duplicate identifier 'UserContactInfo'.</span><span class=\"code\">2300</span></span><span class=\"error-behind\">Duplicate identifier 'UserContactInfo'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) email: string' >email</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-err><data-lsp lsp='type UserContactInfo = {&amp;#13;    fail: &amp;quot;this will not work&amp;quot;;&amp;#13;}' >UserContactInfo</data-lsp></data-err></span><span style=\"color: #000000\"> = {</span></div><span class=\"error\"><span>Duplicate identifier 'UserContactInfo'.</span><span class=\"code\">2300</span></span><span class=\"error-behind\">Duplicate identifier 'UserContactInfo'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) fail: &amp;quot;this will not work&amp;quot;' >fail</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"this will not work\"</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAMX3awFAAuAngA6SgCqiMAwnAHZECGAxkQJKMBmcoAXlABvAqFCMWAW0ipERaAEtGAczGhIUlooA2chcrUBfAsXKUa9Jqw7c+gkep7a9oAEREAFosSgA7ro6EnBE-ggA1m4ERkA'>Try</a></div></pre>\n<p>A type alias can hold <em>any type</em>, as it’s literally an alias (name) for a type of some sort.</p>\n<p>Here’s an example of how we can “cleaned up” an the code from our Union and Intersection Types section (previous chapter) through the use of type aliases:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">///////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #008000\">// @filename: original.ts</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * ORIGINAL version</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function maybeGetUserInfo(): [&amp;quot;error&amp;quot;, Error] | [&amp;quot;success&amp;quot;, {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;}]' >maybeGetUserInfo</data-lsp></span><span style=\"color: #000000\">():</span></div><div class='line'><span style=\"color: #000000\">  | [</span><span style=\"color: #A31515\">\"error\"</span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\"><data-lsp lsp='interface Error' >Error</data-lsp></span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  | [\"</span><span style=\"color: #795E26\">success</span><span style=\"color: #000000\">&quot;, { <data-lsp lsp='(property) name: string' >name</data-lsp>: </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">; <data-lsp lsp='(property) email: string' >email</data-lsp>: </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\"> }] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// implementation is the same in both examples</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #267F99\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() &gt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #A31515\">\"success\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Mike North\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) email: string' >email</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mike@example.com\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">    ]</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #A31515\">\"error\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Error: ErrorConstructor&amp;#13;new (message?: string | undefined) => Error' >Error</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"The coin landed on TAILS :(\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    ]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #008000\">///////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #008000\">// @filename: with-aliases.ts</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type UserInfoOutcomeError = [&amp;quot;error&amp;quot;, Error]' >UserInfoOutcomeError</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\">\"error\"</span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\"><data-lsp lsp='interface Error' >Error</data-lsp></span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type UserInfoOutcomeSuccess = [&amp;quot;success&amp;quot;, {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;}]' >UserInfoOutcomeSuccess</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"success\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) email: string' >email</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type UserInfoOutcome = UserInfoOutcomeError | UserInfoOutcomeSuccess' >UserInfoOutcome</data-lsp></span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">  | </span><span style=\"color: #267F99\"><data-lsp lsp='type UserInfoOutcomeError = [&amp;quot;error&amp;quot;, Error]' >UserInfoOutcomeError</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  | </span><span style=\"color: #267F99\"><data-lsp lsp='type UserInfoOutcomeSuccess = [&amp;quot;success&amp;quot;, {&amp;#13;    name: string;&amp;#13;    email: string;&amp;#13;}]' >UserInfoOutcomeSuccess</data-lsp></span></div>\n<div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * CLEANED UP version</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function maybeGetUserInfo(): UserInfoOutcome' >maybeGetUserInfo</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #267F99\"><data-lsp lsp='type UserInfoOutcome = UserInfoOutcomeError | UserInfoOutcomeSuccess' >UserInfoOutcome</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// implementation is the same in both examples</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #267F99\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() &gt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #A31515\">\"success\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Mike North\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) email: string' >email</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mike@example.com\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">    ]</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #A31515\">\"error\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Error: ErrorConstructor&amp;#13;new (message?: string | undefined) => Error' >Error</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"The coin landed on TAILS :(\"</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    ]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQ18ZXTYFAgAQAEBmBLANgUwHYEMBbbALkQHsAndAc3QMwDoAXAZwQCoO5EPEB5AEoBJAOLCAcgEEAMogBu2Sq3TlcPDsDjYAHgAcqzRKgCuuAMbNVuRIXwBPAEbZR2ZgFVWS4blTkAFACUJDyIAD6IANoAREqUVNEANIgAopTxlAC6oRExrCbm5tisrEmIAN6IBMRkrMzUuDQA3IjYdli19fQ0iAC+mRWhSOiEejjEuMz4VmqI6KyIzAAW2IisRKv0iI7ky606RGPFoeioiP4AstNLjJT4uAAm5IRBiAB8iAAMjACsgYOIQGIShuEyUGyRUJAxDRfKFYqlRJQoGVaqkGEXdAAa1WEkMSzKbXwHRhhGx2GQukOOEY5me0T6SOh2UBvVamC8AKBIOYYIhyMBsXSCSZ0Kq2AA7qlhZR-NEACorRB0raYe4PbAPCg2eVSYQyADKiBIcsCosBLL6cF6cAQsHtDsdUDtKAwODRZAl6GWAFp8Jh0PgvKwWOxmPY9KtPN5fOR+CZmHTiGkMogALxRIUZMopqjZcORxDRyg+PzxxPPbAGgpFErpqKhWE1hFJUKojadBrNVrtTCd7pW-MRqNeEux8tJ1ZpnJF0eluMJye5ygz4vzieV6vwkq24BcDSIADCMhSUgkKQAIkWAAoKJQqNQaLS6AyUIymCwzGx2JwuNxr2MgjIACy0XSsuWGUZxjwKYvzmBZllWdZiDmGwdj2KkoOOQFTnOK5lludVnleD5vj+LlAR5PkGzFGE4VrREBQqKoOwxclEDxN8CWSIkSWiMkcUpA4sNpelGWRS02WwDlVnKZEqPBGixSzEUmNwSVpQyOVFVWFUbDVR5NW1RBdX1I0TWiM0JNCG1eiAA'>Try</a></div></pre>\n<h3 id=\"inheritance\" style=\"position:relative;\"><a href=\"#inheritance\" aria-label=\"inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inheritance</h3>\n<p>You can create type aliases that combine existing types with new behavior\nby using Intersection (<code>&#x26;</code>) types.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type SpecialDate = Date &amp;amp; {&amp;#13;    getReason(): string;&amp;#13;}' >SpecialDate</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\"> & { </span><span style=\"color: #795E26\"><data-lsp lsp='(method) getReason(): string' >getReason</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> }</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const newYearsEve: SpecialDate' >newYearsEve</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type SpecialDate = Date &amp;amp; {&amp;#13;    getReason(): string;&amp;#13;}' >SpecialDate</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  ...</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Date: DateConstructor&amp;#13;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(),</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) getReason(): string' >getReason</data-lsp></span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Last day of the year\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const newYearsEve: SpecialDate' >newYearsEve</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(method) getReason(): string' >getReason</data-lsp></span></div>               <span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>get</span>Date<span></li><li class=''><span><span class='result-found'>get</span>Day<span></li><li class=''><span><span class='result-found'>get</span>FullYear<span></li><li class=''><span><span class='result-found'>get</span>Hours<span></li><li class=''><span><span class='result-found'>get</span>Milliseconds<span></li><li class=''><span><span class='result-found'>get</span>Minutes<span></li><li class=''><span><span class='result-found'>get</span>Month<span></li><li class=''><span><span class='result-found'>get</span>Reason<span></li><li class=''><span><span class='result-found'>get</span>Seconds<span></li><li class=''><span><span class='result-found'>get</span>Time<span></li><li class=''><span><span class='result-found'>get</span>TimezoneOffset<span></li><li class=''><span><span class='result-found'>get</span>UTCDate<span></li><li class=''><span><span class='result-found'>get</span>UTCDay<span></li><li class=''><span><span class='result-found'>get</span>UTCFullYear<span></li><li class=''><span><span class='result-found'>get</span>UTCHours<span></li><li class=''><span><span class='result-found'>get</span>UTCMilliseconds<span></li><li class=''><span><span class='result-found'>get</span>UTCMinutes<span></li><li class=''><span><span class='result-found'>get</span>UTCMonth<span></li><li class=''><span><span class='result-found'>get</span>UTCSeconds<span></li><li class=''><span><span class='result-found'>get</span>VarDate<span></li></ul></span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAypDGBLAhgGwCLONAvFT2UAZFAN5QDmEwAShMgM4D2AdgBQCUAXFA8AE6IWFKAF8AUOPis+UFhADuATXr8GAUQBuEHnAhI0BXGXFQoAOkvyF+LBE4AaU5Wp1GrHpyg4AfFABEADKMwFAAJsggUEwAZlDAABbQIKr+ThLWKshqWhDmVLT0zCziAPSlZpVVVQB6AD5AA'>Try</a></div></pre>\n<p>While there’s no true <code>extends</code> keyword that can be used when defining type aliases, this pattern has a very similar effect</p>\n<h2 id=\"interfaces\" style=\"position:relative;\"><a href=\"#interfaces\" aria-label=\"interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interfaces</h2>\n<p>An <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces\">interface</a> is a way of defining an <a href=\"https://www.typescriptlang.org/docs/handbook/2/objects.html\"><em>object type</em></a>. An “object type”\ncan be thought of as, “an instance of a class could conceivably look like this”.</p>\n<p>For example, <code>string | number</code> is not an object type, because it\nmakes use of the <strong>union type operator</strong>.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface UserInfo' >UserInfo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserInfo.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserInfo.email: string' >email</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printUserInfo(info: UserInfo): void' >printUserInfo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) info: UserInfo' >info</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface UserInfo' >UserInfo</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) info: UserInfo' >info</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserInfo.name: string' style='border-bottom: solid 2px lightgrey;'>name</data-lsp></span></div><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>(property) UserInfo.name: string</span>\n<div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKoGdoEkQwPbIDeAUMsiHALYQBcy6YUoA5qchJXMADZ0NMhWAX2IwAriARhgeEMgAOAsBmy48AClD46KqDnwBKImy14AdBWpsA9NbLIAegH5iQoA'>Try</a></div></pre>\n<p>Like type aliases, interfaces can be imported/exported between\nmodules just like values, and they serve to provide a “name”\nfor a specific type.</p>\n<h3 id=\"inheritance-1\" style=\"position:relative;\"><a href=\"#inheritance-1\" aria-label=\"inheritance 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inheritance:</h3>\n<h4 id=\"extends\" style=\"position:relative;\"><a href=\"#extends\" aria-label=\"extends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>extends</code></h4>\n<p>If you’ve ever seen a JavaScript class that “inherits” behavior from a base class,\nyou’ve seen an example of what TypeScript calls a <strong>heritage clause</strong>: <a href=\"course/fundamentals-v3\"><code>extends</code></a></p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Animal.eat(food: any): void' >eat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='function consumeFood(arg: any): void' >consumeFood</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.bark(): string' >bark</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"woof\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const d: Dog' >d</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Dog(): Dog' >Dog</data-lsp></span><span style=\"color: #000000\">()</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const d: Dog' >d</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(method) Animal.eat(food: any): void' style='border-bottom: solid 2px lightgrey;'>eat</data-lsp></span></div><span class='popover-prefix'>  </span><span class='popover'><div class='arrow'></div>(method) Animal.eat(food: any): void</span>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='const d: Dog' >d</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(method) Dog.bark(): string' style='border-bottom: solid 2px lightgrey;'>bark</data-lsp></span></div><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>(method) Dog.bark(): string</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABBBBnEBbApgMTnAEwAoBDAJwHMBKRAbwF8AoAelcQFpOIQpP3GIAGxKpUiAIJgYGEoLqNEiLCShFg+AjVoLFyNJlwa1GqjqZMhIsQBE4FJQA8oWMATGTps+YoBG5ANZEWjqKZFhQIGRIAEQA7vjA0WaMTAJoUIgEiAC8iGBYsYi2FEGMBAB0ylAszIgAegD8ZeV+ZP41io1AA'>Try</a></div></pre>\n<ul>\n<li>Just as in in JavaScript, <strong>a subclass <code>extends</code> from a base class</strong>.</li>\n<li>Additionally <strong>a “sub-interface” <code>extends</code> from a base interface</strong>, as shown in the example below</li>\n</ul>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Animal.isAlive(): boolean' >isAlive</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #267F99\">boolean</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface Mammal' >Mammal</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Mammal.getFurOrHairColor(): string' >getFurOrHairColor</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface Mammal' >Mammal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.getBreed(): string' >getBreed</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function careForDog(dog: Dog): void' >careForDog</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dog: Dog' >dog</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dog: Dog' >dog</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(method) Dog.getBreed(): string' >getBreed</data-lsp></span></div>       <span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>g</span>etBreed<span></li><li class=''><span><span class='result-found'>g</span>etFurOrHairColor<span></li></ul></span>\n<div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgIImAWzgG2QbwChllgBnVHYANwgAoBKALmQCMB7dnCOEQgX0KhIsRCgCycTNjwQAHpBAATMmgwyCxZAHMIYAGIBXKAHkoACTjAoAYS7sojFmTBRQ2gUPDR4SZABF2bWR5RRVkSWlcTRJdMAAhKAgIJSdkFzcQD0EYQxAEMGB2EGQEOCT9B0DtOiUglmqGGOQ67QA6OMTkpS0Ael6SZAA9AB8BIA'>Try</a></div></pre>\n<h4 id=\"implements\" style=\"position:relative;\"><a href=\"#implements\" aria-label=\"implements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>implements</code></h4>\n<p>TypeScript adds a second heritage clause that can be used to\nstate that <strong>a given class should produce instances that confirm\nto a given interface</strong>: <a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#implements-clauses\"><code>implements</code></a>.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface AnimalLike' >AnimalLike</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) AnimalLike.eat(food: any): void' >eat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #267F99\">void</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-err><data-lsp lsp='class Dog' >Dog</data-lsp></data-err></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface AnimalLike' >AnimalLike</data-lsp></span><span style=\"color: #000000\"> {</span></div><span class=\"error\"><span>Class 'Dog' incorrectly implements interface 'AnimalLike'.\n  Property 'eat' is missing in type 'Dog' but required in type 'AnimalLike'.</span><span class=\"code\">2420</span></span><span class=\"error-behind\">Class 'Dog' incorrectly implements interface 'AnimalLike'.\n  Property 'eat' is missing in type 'Dog' but required in type 'AnimalLike'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.bark(): string' >bark</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"woof\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAgTUBOT0TlxATACycAMoTgGYhATlokArpHRZU0SKHQLKk+NQBi0aABMAFGSYBzAJSgA3gF96DALT30krPdu1UkLM3LpqoPKngKABlUAGtfc1pQUGoyLD0SbR0TYgA3aFQdWmtadGQySkpQABFoI1AAlGp1DyL-QOQQ8Iso0AAjQ1C9M0jo6KZqLEkmRQAiAHdtElHW60sgA'>Try</a></div></pre>\n<p>In the example above, we can see that TypeScript is objecting\nto us failing to add an <code>eat()</code> method to our <code>Dog</code> class.\nWithout this method, instances of <code>Dog</code> do not conform to the\n<code>AnimalLike</code> interface. Let’s update our code:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface AnimalLike' >AnimalLike</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) AnimalLike.eat(food: any): void' >eat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #267F99\">void</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface AnimalLike' >AnimalLike</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.bark(): string' >bark</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"woof\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.eat(food: any): void' >eat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='function consumeFood(arg: any): void' >consumeFood</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0ko67lD81AYtGgATABRkATgHMAlKADeAX1ogwAWg3oGWDWtqpIWahPLpqoPKngUAMqgDW5+bVChqZLKJJDhM4gDdoVGFaZVp0ZDJKSlAAEWgpUCsUaj5DGMtrZDtHBRdQACNJe1E5Z1dXCWosBgkOACIAdyESevzlV3dPbxEy-NcuSB4+QREvHxl20KA'>Try</a></div></pre>\n<p>There, that’s better. While TypeScript (and JavaScript) does\nnot support true <a href=\"https://en.wikipedia.org/wiki/Multiple_inheritance\"><em>multiple inheritance</em></a> (extending from more than one base class),\nthis <code>implements</code> keyword gives us the ability to validate, at compile time, that instances of a class conform to one or more “contracts” (types). Note that both <code>extends</code> and <code>implements</code> can be used together:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class LivingOrganism' >LivingOrganism</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) LivingOrganism.isAlive(): boolean' >isAlive</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface AnimalLike' >AnimalLike</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) AnimalLike.eat(food: any): void' >eat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #267F99\">void</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface CanBark' >CanBark</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) CanBark.bark(): string' >bark</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class Dog' >Dog</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class LivingOrganism' >LivingOrganism</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface AnimalLike' >AnimalLike</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #267F99\"><data-lsp lsp='interface CanBark' >CanBark</data-lsp></span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.bark(): string' >bark</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"woof\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.eat(food: any): void' >eat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='function consumeFood(arg: any): void' >consumeFood</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0ko67lD81AYtGgATABRkATgHMAlKADeAX1ogwAWg3oGWDWtrpkZSpVAAZVADdUkKQHlpZSKkrwFtUKGc40F6qLny7h6gEtRYDBIcWBIMdB7KytZY1BLk6NSgeKjwFOYA1hmBHtRkWKIkQsIyxBbQqMK0iZDJqWTpoADCjgBCknluHgBGff7ElNHWUo20+obGoAAi0FPFAB7JkMIm5lY29lKOzvBB2SjUfM0mWTnI+dQANJ09fbRFoMMSef4DwaHhkaAAEQAdyEJEBQWUxVK5UqASCHi4kB4fEEIlhIhkkMaQA'>Try</a></div></pre>\n<p>While it’s possible to use <code>implements</code> with a type alias, if the type ever breaks the “object type” rules there’s some\npotential for problems…</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type CanBark = number | {&amp;#13;    bark(): string;&amp;#13;}' >CanBark</data-lsp></span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">  | </span><span style=\"color: #267F99\">number</span></div><div class='line'><span style=\"color: #000000\">  | {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #795E26\"><data-lsp lsp='(method) bark(): string' >bark</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">    }</span></div>\n<div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-err><data-lsp lsp='type CanBark = number | {&amp;#13;    bark(): string;&amp;#13;}' >CanBark</data-lsp></data-err></span><span style=\"color: #000000\"> {</span></div><span class=\"error\"><span>A class can only implement an object type or intersection of object types with statically known members.</span><span class=\"code\">2422</span></span><span class=\"error-behind\">A class can only implement an object type or intersection of object types with statically known members.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.bark(): string' >bark</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"woof\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.eat(food: any): void' >eat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='function consumeFood(arg: any): void' >consumeFood</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAgTUBOT0TlxATACyeeicAzAAZutEgFdI6LKmiRQ6eZQnxqAMWjQAJgAoyTAOYBKUAG8AvvQYBaO+glY7N2lnyJqoAMJlIAIQMAa1AAXlpQUAAfUEhVACNmcKjzJIiIuKDdY2JKLCZUSENU0CtadGQySkpQABFoQ1BUJGRqNUgsap9-IJT0zNMzYqZqLAkmBQAiAHctEgmkqwjqMixdEi1tAeKlSBU1TR01jeMF2gsgA'>Try</a></div></pre>\n<p>For this reason, it is best to use interfaces for types that\nare used with the <code>implements</code> heritage clause.</p>\n<h3 id=\"open-interfaces\" style=\"position:relative;\"><a href=\"#open-interfaces\" aria-label=\"open interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Open Interfaces</h3>\n<p>TypeScript interfaces are “open”, meaning that unlike in type aliases, you can have\nmultiple declarations in the same scope:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface AnimalLike' >AnimalLike</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) AnimalLike.isAlive(): boolean' >isAlive</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #267F99\">boolean</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function feed(animal: AnimalLike): void' >feed</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) animal: AnimalLike' >animal</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface AnimalLike' >AnimalLike</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) animal: AnimalLike' >animal</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(method) AnimalLike.eat(food: any): void' style='border-bottom: solid 2px lightgrey;'>eat</data-lsp></span></div><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>(method) AnimalLike.eat(food: any): void</span>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) animal: AnimalLike' >animal</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(method) AnimalLike.isAlive(): boolean' style='border-bottom: solid 2px lightgrey;'>isAlive</data-lsp></span></div><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(method) AnimalLike.isAlive(): boolean</span>\n<div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #008000\">// SECOND DECLARATION OF THE SAME NAME</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface AnimalLike' >AnimalLike</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) AnimalLike.eat(food: any): void' >eat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) food: any' >food</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #267F99\">void</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFCqRbUBO561oeq8FAMqgGsOAb1qhQqSjjQA3agAoAlMQBG0aMmplItAL60SAV0josqaJFLVqAE3nbuFYlx7J+QxaFHiHrgHRaWGKgIOJhYQB6APzBvhR+ktKocsGh4ZEx+rShAMoAogDCAPIAcgAioGWFvDgASjgAKrCloEUAYqANABJ5oDk4ALK9JYN59IwsbBwufIIiwYHyJOo2yqAy0Kg2ekA'>Try</a></div></pre>\n<p>These declarations are merged together to create a result\nidentical to what you would see if both the <code>isAlive</code> and <code>eat</code>\nmethods were on a single interface declaration.</p>\n<p>You may be asking yourself: <strong>where and how is this useful?</strong></p>\n<p>Imagine a situation where you want to add a global property\nto the <code>window</code> object</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var window: Window &amp;amp; typeof globalThis' >window</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) document: Document' style='border-bottom: solid 2px lightgrey;'>document</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// an existing property</span></div><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) document: Document</span>\n<div class='line'><span style=\"color: #001080\"><data-lsp lsp='var window: Window &amp;amp; typeof globalThis' >window</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Window.exampleProperty: number' style='border-bottom: solid 2px lightgrey;'>exampleProperty</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">42</span></div><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>(property) Window.exampleProperty: number</span>\n<div class='line'><span style=\"color: #008000\">// tells TS that `exampleProperty` exists</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface Window' >Window</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Window.exampleProperty: number' >exampleProperty</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/O4SwdgJg9sB00GMCuBbApmALgAgPS+wEMxs0APEAZ03AHNsAHAJygbScwE8AofbfgQD0A-N1CQYscoRQMANmgAKLNh07YAvNgAsAJl4EB-EQeyY0cuZWwAVAMpmAFoRwADabIXLW7Lq9IU1JTc4OZMAGaECGjYAOrg0MDYAN7c-B7ySiq+nABc2GCoAEbs3AC+QA'>Try</a></div></pre>\n<p>What we have done here is <em>augment</em> an existing <code>Window</code> interface\nthat TypeScript has set up for us behind the scene.</p>\n<h2 id=\"choosing-which-to-use\" style=\"position:relative;\"><a href=\"#choosing-which-to-use\" aria-label=\"choosing which to use permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Choosing which to use</h2>\n<p>In many situations, either a <code>type</code> alias or an <code>interface</code> would be\nperfectly fine, however…</p>\n<ol>\n<li><strong>If you need to define something other than an object type</strong> (e.g., use of the <code>|</code> union type operator), you must use a type alias</li>\n<li>If you need to define a type <strong>to use with the <code>implements</code> heritage term</strong>, it’s best to use an interface</li>\n<li>If you need to <strong>allow consumers of your types to <em>augment</em> them</strong>, you must use an interface.</li>\n</ol>\n<h2 id=\"recursion\" style=\"position:relative;\"><a href=\"#recursion\" aria-label=\"recursion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recursion</h2>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#recursive-conditional-types\">Recursive types</a>, are self-referential, and are often used to describe infinitely nestable types.\nFor example, consider infinitely nestable arrays of numbers</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">;[</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">, [</span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">, [</span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">], </span><span style=\"color: #098658\">59</span><span style=\"color: #000000\">], </span><span style=\"color: #098658\">221</span><span style=\"color: #000000\">]</span></div></code></div></pre>\n<p>You may read or see things that indicate you must use a combination of <code>interface</code> and <code>type</code>\nfor recursive types. <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-3-7-rc/#more-recursive-type-aliases\">As of TypeScript 3.7</a>\nthis is now much easier, and works with either type aliases or interfaces.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type NestedNumbers = number | NestedNumbers[]' >NestedNumbers</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #267F99\"><data-lsp lsp='type NestedNumbers = number | NestedNumbers[]' >NestedNumbers</data-lsp></span><span style=\"color: #000000\">[]</span></div>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const val: NestedNumbers' >val</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type NestedNumbers = number | NestedNumbers[]' >NestedNumbers</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">, [</span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">, [</span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">], </span><span style=\"color: #098658\">59</span><span style=\"color: #000000\">], </span><span style=\"color: #098658\">221</span><span style=\"color: #000000\">]</span></div>\n<div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const val: NestedNumbers[]' >val</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const val: NestedNumbers[]' >val</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;NestedNumbers>.push(...items: NestedNumbers[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">41</span><span style=\"color: #000000\">)</span></div><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>(method) Array&lt;NestedNumbers&gt;.push(...items: NestedNumbers[]): number</span>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const val: NestedNumbers[]' >val</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;NestedNumbers>.push(...items: NestedNumbers[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\"><data-err>&quot;this will not work&quot;</data-err></span><span style=\"color: #000000\">)</span></div><span class=\"error\"><span>Argument of type 'string' is not assignable to parameter of type 'NestedNumbers'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'string' is not assignable to parameter of type 'NestedNumbers'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAC4CeADpKAHKSIGQAmFArgLYBGMioAvKAHYvtooAD6VqtBgI4BtALp48AYzi8aoAG4BDADaoqNekzYduoaRgA0oLFek4rANlsB2WVZwBON+jQBGeXgAlgBmoAAUxGRwoVraoACEXDwARPzG0MkAlKAA3nigGjoAdCSMiAAWYVi+mfmgIAUAegD8dbElZZXJBOWBnADugdpxvHAEoP0IANZZeAC+QA'>Try</a></div></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#type-aliases\">Type aliases</a></p>\n<ul>\n<li><a href=\"#inheritance\">Inheritance</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#interfaces\">Interfaces</a></p>\n<ul>\n<li>\n<p><a href=\"#inheritance-1\">Inheritance:</a></p>\n<ul>\n<li><a href=\"#extends\"><code>extends</code></a></li>\n<li><a href=\"#implements\"><code>implements</code></a></li>\n</ul>\n</li>\n<li><a href=\"#open-interfaces\">Open Interfaces</a></li>\n</ul>\n</li>\n<li><a href=\"#choosing-which-to-use\">Choosing which to use</a></li>\n<li><a href=\"#recursion\">Recursion</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v3/07-interfaces-and-type-aliases/"},"frontmatter":{"title":"Interfaces and Type Aliases","course":"fundamentals-v3","date":"June 08, 2021","description":"TypeScript provides two mechanisms for centrally defining types and giving them\nuseful and meaningful names: interfaces and type aliases. We will study both \nconcepts in depth, and explain when it makes sense to use each.\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/07-interfaces-and-type-aliases/","title":"Interfaces and Type Aliases","course":"fundamentals-v3","order":7,"previous":{"fields":{"slug":"/course/fundamentals-v3/06-union-and-intersection-types/"},"frontmatter":{"title":"Union and Intersection Types","order":6,"course":"fundamentals-v3","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v3/08-exercise-json-types/"},"frontmatter":{"title":"JSON types","order":8,"course":"fundamentals-v3","isExercise":true}}}},"staticQueryHashes":["2074799692","2841359383"]}