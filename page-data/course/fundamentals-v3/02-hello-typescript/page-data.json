{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/course/fundamentals-v3/02-hello-typescript/","result":{"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"}]}},"markdownRemark":{"id":"ad71f44b-a5fe-5a27-b01f-c8a9c79ca1cb","excerpt":"Anatomy of the project Open your packages/hello-ts folder to find\nour first tiny project. There are only three files package.json\n(view source)  Note that we…","html":"<h2 id=\"anatomy-of-the-project\" style=\"position:relative;\"><a href=\"#anatomy-of-the-project\" aria-label=\"anatomy of the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Anatomy of the project</h2>\n<p>Open your <a href=\"https://github.com/mike-north/ts-fundamentals-v3/blob/main/packages/hello-ts/\"><code>packages/hello-ts</code></a> folder to find\nour first tiny project. There are only three files</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">package.json  </span><span style=\"color: #008000\"># Package manifest</span></div><div class='line'><span style=\"color: #000000\">tsconfig.json  </span><span style=\"color: #008000\"># TypeScript compiler settings</span></div><div class='line'><span style=\"color: #000000\">src/index.ts  </span><span style=\"color: #008000\"># \"the program\"</span></div></code></div></pre>\n<p><code>package.json</code>\n<a href=\"https://github.com/mike-north/ts-fundamentals-v3/blob/main/packages/hello-ts/package.json\">(view source)</a> <br /></p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"hello-ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"license\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"NOLICENSE\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"devDependencies\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"typescript\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"^4.3.2\"</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"scripts\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"dev\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"tsc --watch --preserveWatchOutput\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Note that we just have one dependency in our package.json: <code>typescript</code>. We have a <code>dev</code> script (this is\nwhat runs when you invoke <code>yarn dev-hello-ts</code> from the project root) that runs the typescript compiler in “watch”\nmode (watches for source changes, and rebuilds automatically).</p>\n<p><code>tsconfig.json</code>\n<a href=\"https://github.com/mike-north/ts-fundamentals-v3/blob/main/packages/hello-ts/tsconfig.json\">(view source)</a> <br /></p>\n<p>This is just about the simplest possible config file for the TS compiler</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"outDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dist\"</span><span style=\"color: #000000\">, </span><span style=\"color: #008000\">// where to put the TS files</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ES3\"</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// which level of JS support to target</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src\"</span><span style=\"color: #000000\">] </span><span style=\"color: #008000\">// which files to compile</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>All of these things could be specified on the command line (e.g., <code>tsc --outDir dist</code>), but particularly as\nthings get increasingly complicated, we’ll benefit a lot from having this config file</p>\n<p><code>src/index.ts</code>\n<a href=\"https://github.com/mike-north/ts-fundamentals-v3/blob/main/packages/hello-ts/src/index.ts\">(view source)</a> <br /></p>\n<p>Finally, we have a relatively simple and pointless TypeScript program. It does\nhave a few interesting things in it that should make changes to the <code>\"target\"</code>\nproperty in our <code>tsconfig.json</code> more obvious</p>\n<ul>\n<li>Use of a built in <code>Promise</code> constructor that was introduced in ES2015 (“ES6”)</li>\n<li>Use of <code>async</code> and <code>await</code>, which were introduced in ES2017</li>\n</ul>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Create a promise that resolves after some time</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">n</span><span style=\"color: #008000\"> number of milliseconds before promise resolves</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function timeout(n: number): Promise&amp;lt;unknown>' >timeout</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='var Promise: PromiseConstructor&amp;#13;new &amp;lt;unknown>(executor: (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void) => Promise&amp;lt;unknown>' >Promise</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) res: (value: unknown) => void' >res</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function setTimeout(handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]): number' >setTimeout</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) res: (value: unknown) => void' >res</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Add three numbers</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #008000\"> first number</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #008000\"> second</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function addNumbers(a: number, b: number): Promise&amp;lt;number>' >addNumbers</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function timeout(n: number): Promise&amp;lt;unknown>' >timeout</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">500</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #008000\">//== Run the program ==//</span></div><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function addNumbers(a: number, b: number): Promise&amp;lt;number>' >addNumbers</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">})();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUhhAnApgQwC6MsyAHeB7AWwEsBnDVACzUiRLwBsA3REzAM3XkjoPKN6gwAAtmTxkBSADtpAVwIAjRFzxtIxevVKIAxnikATVkrZ4kOfMTI0WDZiUHBwbWVJ2oi+yB955ZqAAopAC45RWUASkgAbygbVFl4GSlEAHdIAAVLbQCA2iiAXgA+bkRUABV+RD9A2gAaaQiIgG5wAF9wcFAIaEgAQQMDbwokDCl5JXgHXpExCUxINiIp1DDJwUhZ8UkFUr1DR3BEAA9sM1XkEgBPN0XXd08ZZEGAOQnlEgDkUPHw+AaFD93vAorFIJhUsgiKsfNV-AEAKwABiRLTiSASSQWAGpIApWh0usACgVIAAlVzDDC4PAAc22kBJwCcX2utwChRKYMg+zo9EQADp6HSvpDoZhXsDPgBmBoAFiaBIiHOaQA'>Try</a></div></pre>\n<p>Note that when you hover over certain code points on this website, you get\nthe equivalent of a “vscode tooltip”. This is one of our most important\ntools for learning about how TypeScript understands our code</p>\n<p><img src=\"/636499e3abb0c1ae63a33e6bdf6a021f/cursor-tooltip-ts.gif\" alt=\"cursor hovering\"></p>\n<h2 id=\"running-the-compiler\" style=\"position:relative;\"><a href=\"#running-the-compiler\" aria-label=\"running the compiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running the compiler</h2>\n<p>Run the following terminal command from the root of your project</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">yarn dev-hello-ts</span></div></code></div></pre>\n<p>You should see something in your terminal like</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">hello-ts: 12:01:57 PM - Starting compilation </span><span style=\"color: #AF00DB\">in</span><span style=\"color: #000000\"> watch mode...</span></div></code></div></pre>\n<p>Note that within the “hello-ts” project, a <code>./dist</code> folder has appeared,\nand inside it is an <code>index.js</code> file. Open this file — it will be a <em>mess</em></p>\n<h3 id=\"changing-target-language-level\" style=\"position:relative;\"><a href=\"#changing-target-language-level\" aria-label=\"changing target language level permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changing target language level</h3>\n<p>Now, go to your <code>hello-ts/tsconfig.json</code> and change the “compilerOptions.target” property</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #000000\">        \"outDir\": \"dist\",</span></div><div class='line'><span style=\"color: #A31515\">-       \"target\": \"ES3\"</span></div><div class='line'><span style=\"color: #098658\">+       \"target\": \"ES2015\"</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">    \"include\": [\"src\"]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Look at that <code>dist/index.js</code> folder again — it’s much cleaner now! What do you notice has changed? Can you find a <code>Promise</code> constructor? Maybe the <code>yield</code> keyword?</p>\n<p>Now let’s bump the language level up even more, to 2017</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #000000\">        \"outDir\": \"dist\",</span></div><div class='line'><span style=\"color: #A31515\">-       \"target\": \"ES2015\"</span></div><div class='line'><span style=\"color: #098658\">+       \"target\": \"ES2017\"</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">    \"include\": [\"src\"]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>It’s even cleaner! We start to see <code>async</code> and <code>await</code>, and lose the <code>_awaiter</code> helper. In fact, this looks a lot like some of the type information has just been stripped away from our original <code>.ts</code> source code.</p>\n<h3 id=\"types-of-modules\" style=\"position:relative;\"><a href=\"#types-of-modules\" aria-label=\"types of modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types of modules</h3>\n<p>Did you notice that the <code>export</code> keyword was still present in the build output for our program? We’re generating <a href=\"(https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015)\">ES2015 modules</a> from our TypeScript source. Try to run this file via node</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">node packages/hello-ts/dist/index.js</span></div></code></div></pre>\n<p>There’s an error!</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> async </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">addNumbers(a,</span><span style=\"color: #000000\"> b) {</span></div><div class='line'><span style=\"color: #000000\">^^^^^^</span></div><div class='line'><span style=\"color: #000000\">SyntaxError: Unexpected token </span><span style=\"color: #A31515\">'export'</span></div></code></div></pre>\n<p>It seems that, at least with most recent versions of Node.js and the way\nour project is currently set up, this file can’t be run directly quite so easily.</p>\n<p>Node expects <a href=\"(https://en.wikipedia.org/wiki/CommonJS)\">CommonJS modules</a> <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, so we’ll have to tell TypeScript to output\nthis kind of code. </p>\n<p>Let’s add a new property to our <code>tsconfig</code></p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">\"compilerOptions\": {</span></div><div class='line'><span style=\"color: #000000\">    \"outDir\": \"dist\",</span></div><div class='line'><span style=\"color: #098658\">+   \"module\": \"CommonJS\",</span></div></code></div></pre>\n<p>Look at your <code>packages/hello-ts/dist/index.js</code> one more time now. You should see\nthat the way the <code>addNumbers</code> function is exported has changed</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #267F99\"><data-lsp lsp='(alias) function addNumbers(a: any, b: any): Promise&amp;lt;any>&amp;#13;import addNumbers' >exports</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(alias) function addNumbers(a: any, b: any): Promise&amp;lt;any>&amp;#13;import addNumbers' >addNumbers</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function addNumbers(a: any, b: any): Promise&amp;lt;any>' >addNumbers</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/IYZwngdgxgBAZgV2gFwJYHsI2AExwOQQFsAjAUwCcQAKYAGhhIEoYBvAKBi+wHdhVkMNETLoEyagFYADNKYBuTtwplkCClmAwA1I0UBfdgHoTMALQWo4i2fZkAHgAd0FZCAB0uAsXJUYAXmw8QlJKEHkgA'>Try</a></div></pre>\n<p>This is an indication that we’re emitting CommonJS modules! Let’s try running\nthis program with <code>node</code> one more time</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">node packages/hello-ts/dist/index.js</span></div></code></div></pre>\n<p>If your program works correctly at this point, you should see it pause for a short\ntime and then print <code>7</code> to the console, before ending successfully.</p>\n<p>CONGRATS! You’ve just written your first TypeScript program!</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>There are certainly ways of making modern versions of Node happy to run <a href=\"(https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015)\">ES2015 modules</a>, and they’ll likely soon be the default type of JS module, but <code>.js</code> files passed directly into <code>node</code> with no flags or other arguments are still treated as CommonJS</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li><a href=\"#anatomy-of-the-project\">Anatomy of the project</a></li>\n<li>\n<p><a href=\"#running-the-compiler\">Running the compiler</a></p>\n<ul>\n<li><a href=\"#changing-target-language-level\">Changing target language level</a></li>\n<li><a href=\"#types-of-modules\">Types of modules</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/fundamentals-v3/02-hello-typescript/"},"frontmatter":{"title":"Hello TypeScript","course":"fundamentals-v3","date":"May 01, 2015","description":"In this unit, we'll get hands on with our first TypeScript program and the\ncompiler CLI command\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/02-hello-typescript/","title":"Hello TypeScript","course":"fundamentals-v3","order":2,"previous":{"fields":{"slug":"/course/fundamentals-v3/01-project-setup/"},"frontmatter":{"title":"Intro","order":1,"course":"fundamentals-v3"}},"next":{"fields":{"slug":"/course/fundamentals-v3/03-variables-and-values/"},"frontmatter":{"title":"Variables and Values","order":3,"course":"fundamentals-v3"}}}},"staticQueryHashes":["1246554614","2841359383"]}