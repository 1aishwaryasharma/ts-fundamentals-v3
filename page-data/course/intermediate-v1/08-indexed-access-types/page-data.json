{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v1/08-indexed-access-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"},{"id":"making-typescript-stick","title":"Making TypeScript Stick","summary":"Completing an introductory TypeScript workshop is a great first step your TS\nlearning journey, but being able to apply the language to solve challenging\nand varied problems can require a deeper understanding, and a well-formed\nmental model. In this workshop, we'll tackle a series of challenges designed\nto reinforce your knowledge and make the important concepts truly \"stick\"\nin your mind.\n"},{"id":"full-stack-typescript","title":"Full Stack TypeScript","summary":"TypeScript offers a delightful authoring experience, but for many apps all\nbets are off once you make an API call and receive an `any` response back.\nIn this workshop we'll combine TypeScript and GraphQL's type systems to\ncreate full-stack, fully-type-checked codebases (even the data layer!)\nthat are shockingly easy to evolve, refactor and maintain.\n"}]}},"markdownRemark":{"id":"e606dd0b-9a29-5adc-bc34-04a75109676f","excerpt":"Indexed Access types provide a mechanism for retrieving\npart(s) of an array or object type via indices. We’ll\nlook at how this kind of type works, and a couple…","html":"<p>Indexed Access types provide a mechanism for retrieving\npart(s) of an array or object type via indices. We’ll\nlook at how this kind of type works, and a couple of practical\nexamples of where you might use them.</p>\n<p>At the simplest level, <strong>these kinds of types are all about\n<em>accessing</em> some part of another type, via <em>an index</em></strong></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">interface</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292E\"> {</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">number</span></div><div class='line'><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\"><data-lsp lsp='(property) Car.color: {&#10;    red: string;&#10;    green: string;&#10;    blue: string;&#10;}' >color</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='(property) red: string' >red</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='(property) green: string' >green</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span></div><div class='line'><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\"><data-lsp lsp='(property) blue: string' >blue</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span></div><div class='line'><span style=\"color: #24292E\">  }</span></div><div class='line'><span style=\"color: #24292E\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let carColor: {&#10;    red: string;&#10;    green: string;&#10;    blue: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>carColor</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292E\">[</span><span style=\"color: #032F62\">\"color\"</span><span style=\"color: #24292E\">]</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let carColor: {\n    red: string;\n    green: string;\n    blue: string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJysg3gKGcgWzgGsIAuZAZzClAHM9CB7AEwgBsLraQH8BPCBgogArgQBG0RgibsmUCrnz4oEFlxr1G+OmoghNPPiontR5Klt6MAvjns52EMMgQZUchRXRQA2gBEsvJQAQC6OAD0kSrIAHoA-EA'>Try</a></div></pre>\n<p>In this situation <code>'color'</code> is the “index”.</p>\n<p>The index you use <em>must</em> be a valid “key” you could use on\na value of type <code>Car</code>. Below you can see what happens if you\ntry to break this rule:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let carColor: any' >carColor</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292E\">[</span><span style=\"color: #032F62\"><data-err>&quot;not-something-on-car&quot;</data-err></span><span style=\"color: #24292E\">]</span></div><span class=\"error\"><span>Property 'not-something-on-car' does not exist on type 'Car'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'not-something-on-car' does not exist on type 'Car'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBLAOwBcYAzAQwGNJQBhC6UAb11FAFsKBrSVRYtCIBzNpzgATSABt+gkWICekRqkIBXDgCMYYqnGkJUrdu2iQJcoYVGnQw85EJWFdrdPV9QA67dABfXECQMABacKp1YnDQ3GlIYlAqRjoDI3pGAG0AIkI4aMQ4DgSACxFQuEJQ5OhsgF0gA'>Try</a></div></pre>\n<p>You can also reach deeper into the object through multiple “accesses”</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let carColorRedComponent: string' style='border-bottom: solid 2px lightgrey;'>carColorRedComponent</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292E\">[</span><span style=\"color: #032F62\">\"color\"</span><span style=\"color: #24292E\">][</span><span style=\"color: #032F62\">\"red\"</span><span style=\"color: #24292E\">]</span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>let carColorRedComponent: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJysg3gKGcgWzgGsIAuZAZzClAHM9CB7AEwgBsLraQH8BPCBgogArgQBG0RgibsmUCrnz4oEFlxr1G+OmoghNPPiontR5Klt6MAvjnsB6Z8gC07hKLDvXOdhDBkBAxUOQUAJXVQggAHJhADMAp0KABtACJZeSh0gF0MtRY8nBcVZAA9AH4gA'>Try</a></div></pre>\n<p>…and <strong>you can pass or “project” a union type (<code>|</code>) through\n<code>Car</code> as an index, as long as all parts of the union type\nare <em>each</em> a valid index</strong></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292e\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> <data-lsp lsp='let carProperty: number | {&#10;    red: string;&#10;    green: string;&#10;    blue: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>carProperty</data-lsp></span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292E\">[</span><span style=\"color: #032F62\">\"color\"</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">\"year\"</span><span style=\"color: #24292E\">]</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>let carProperty: number | {\n    red: string;\n    green: string;\n    blue: string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJysg3gKGcgWzgGsIAuZAZzClAHM9CB7AEwgBsLraQH8BPCBgogArgQBG0RgibsmUCrnz4oEFlxr1G+OmoghNPPiontR5Klt6MAvjnsB6Z8gC07hKLDvXOdhDBkBAwABSgmAAdoMH4KdCgAbQAiWXkoJOQAH2QkwQwkgF0cFxVkAD0AfiA'>Try</a></div></pre>","tableOfContents":"","fields":{"slug":"/course/intermediate-v1/08-indexed-access-types/"},"frontmatter":{"title":"Indexed Access Types","course":"intermediate-v1","date":"June 10, 2021","description":"Indexed Access types provide a mechanism for retrieving\npart(s) of an array or object type via indices.\n"}}},"pageContext":{"slug":"/course/intermediate-v1/08-indexed-access-types/","title":"Indexed Access Types","course":"intermediate-v1","order":8,"previous":{"fields":{"slug":"/course/intermediate-v1/07-infer/"},"frontmatter":{"title":"Inference with conditional types","order":7,"course":"intermediate-v1","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v1/09-mapped-types/"},"frontmatter":{"title":"Mapped Types","order":9,"course":"intermediate-v1","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}