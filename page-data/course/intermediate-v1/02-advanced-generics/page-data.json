{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/course/intermediate-v1/02-advanced-generics/","result":{"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"}]}},"markdownRemark":{"id":"1a3fa150-8170-5ba1-a958-376fb66b4104","excerpt":"Generics are one of the harder language features to get comfortable with in TypeScript, \nand they can be challenging to use effectively. When use wisely and…","html":"<p>Generics are one of the harder language features to get comfortable with in TypeScript,\nand they can be challenging to use effectively. When use wisely and effectively,\nthese this tool for abstraction can lead to high code reuse with minimal pain. </p>\n<blockquote>\n<p>When used improperly, they can add very little value, and increase the complexity dramatically. </p>\n</blockquote>\n<p>In this chapter, we’ll cover <strong>the finer points of using generics</strong>, and leave you with\na clear understanding of when they’re the right tool for the job.</p>\n<h2 id=\"generic-constraints\" style=\"position:relative;\"><a href=\"#generic-constraints\" aria-label=\"generic constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic Constraints</h2>\n<h3 id=\"motivating-use-case\" style=\"position:relative;\"><a href=\"#motivating-use-case\" aria-label=\"motivating use case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Motivating use case</h3>\n<p>In <a href=\"/course/fundamentals-v3\">TypeScript Fundamentals v3</a> we discussed an example\nof a generic utility function that could <strong>transform a an array to a dictionary</strong></p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #008000\">// array as input</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' >idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// fn for obtaining item&apos;s id</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\"> } {</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// create dict to fill</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">: { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\"> } = {}</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let item: T' >item</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #000000\">) { </span><span style=\"color: #008000\">// for each item</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' >idGen</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let item: T' >item</data-lsp></span><span style=\"color: #000000\">)] = </span><span style=\"color: #001080\"><data-lsp lsp='let item: T' >item</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// make a key store in dict</span></div><div class='line'><span style=\"color: #000000\">  }</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dict: {&amp;#13;    [k: string]: T;&amp;#13;}' >dict</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">// result</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgZygFTgERtAHkwD4AKAKERXSgC5FMBtAXQBpEB6DxAQwCc+PAJ680iGGAAOIKJXEATAOIBTMPVL8A5vUwBKRAF5iiDHwmbO3YEmBw+iOACMoPCefFRlAWwDkYmPLkuvQA3oiMANb0pubMOogAvogh5HJciBB8yjyeiPL4UIhQcIjAMMjIchAIGHkFoeFRJlBmYJpxDImGyQmpVLb2pMjKhTCeXg7A1Bj6YekDiNkQABYe3nJU+dCMASpgpGPeuszdhxPpXjwRyryI1yIYdjcSddByvXJZUCB8SFuF6SyaBAyFkCSAA'>Try</a></div></pre>\n<p>Let’s strip away some noise and <strong>just study the function signature</strong></p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >listToDict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">[],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' >idGen</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">): { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[], idGen: (arg: T) => string): {&amp;#13;    [k: string]: T;&amp;#13;}' >T</data-lsp></span><span style=\"color: #000000\"> } {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgZygFTgERtAHkwD4AKAKERXSgC5FMBtAXQBpLEYATAcQFMw9UgEMATgHN6mAJSIAvMUQZRMMOPLT6Ab0SMA1vWWrxzKYgC+iLR1F8oIUUi3ny5oA'>Try</a></div></pre>\n<p>In this situation, we ask the caller of <code>listToDict</code> to provide us with a means\nof obtaining an id, but let’s imagine that <strong>every type we wish to use this\nwith has an <code>id: string</code> property</strong>, and we should just use that as a key.</p>\n<p>How might we implement this without generics?</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) HasId.id: string' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in Dict&amp;lt;T>' >T</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict(list: HasId[]): Dict&amp;lt;HasId>' >listToDict</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: HasId[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #000000\">[]): </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: Dict&amp;lt;HasId>' >dict</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #000000\">&gt; = {}</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: HasId[]' >list</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;HasId>.forEach(callbackfn: (value: HasId, index: number, array: HasId[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: HasId' >item</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='const dict: Dict&amp;lt;HasId>' >dict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: HasId' >item</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) HasId.id: string' >id</data-lsp></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: HasId' >item</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  })</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dict: Dict&amp;lt;HasId>' >dict</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\"> }</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgBJwM4EkAmyDeAUMssDgFzIZhSgDmhAvoaJLIigCLAJgA8AFQB8BYsgDaAa0rVaIOgF1KApoUIwAriF7AA9iGQAbYNQG7uvABTHqldNhziFASkoX+93CKIkE+6sg4PGBuwXyeOCIAvATMYjZgAHQwulAAoogAFpaWwJAAts7IUd5iJEG84nkQ+YlkCsWkBWKMzmokUBBgGlAGFWAA3MSMQA'>Try</a></div></pre>\n<p>Great, now let’s make it generic</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) HasId.id: string' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in Dict&amp;lt;T>' >T</data-lsp></span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function listToDict&amp;lt;T>(list: T[]): Dict&amp;lt;T>' >listToDict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[]): Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[]): Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[]): </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[]): Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dict: Dict&amp;lt;T>' >dict</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='interface Dict&amp;lt;T>' >Dict</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in listToDict&amp;lt;T>(list: T[]): Dict&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = {}</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&amp;lt;T>.forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='const dict: Dict&amp;lt;T>' >dict</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >id</data-lsp></data-err></span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span></div><span class=\"error\"><span>Property 'id' does not exist on type 'T'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'id' does not exist on type 'T'.</span><div class='line'><span style=\"color: #000000\">  })</span></div>\n<div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dict: Dict&amp;lt;T>' >dict</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\"> }</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBLAOwBcYAzAQwGNJQAJCxASQBNQBvXUUfF1RYtCIBzXAF8CJctVoARfFWIAeACoA+Dl1ABtANb9BIgLqoV43LjIBXQovxxCoADb4BKuPMWq1AChcDTbSMASlRPZXVNbioHAVAWBWIwxO9QAF4OCS1-YgA6MgQAUWoACx8ffFIAW2D0jU5ubgTFbUrIKtzeI3Seaq0xYItuaEhiK2hHZuIAbi4xIA'>Try</a></div></pre>\n<p>The problem here is that <strong><code>T</code> can be <em>anything</em></strong>, potentially\nincluding things that don’t have this <code>id: string</code> property. We\nwere able to get away with this in our initial solution (with the <code>idGen</code> function)\nbecause <strong><code>listToDict</code> didn’t really do anything with <code>T</code> other than store a reference\nto it in a dictionary</strong>.</p>\n<h3 id=\"describing-the-constraint\" style=\"position:relative;\"><a href=\"#describing-the-constraint\" aria-label=\"describing the constraint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Describing the constraint</h3>\n<p>The way we define constraints on generics is using the\n<code>extends</code> keyword.</p>\n<p>The correct way of making our function generic is shown\nin the 1-line change below</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">- function listToDict(list: HasId[]): Dict&lt;HasId&gt; {</span></div><div class='line'><span style=\"color: #098658\">+ function listToDict&lt;T extends HasId&gt;(list: T[]): Dict&lt;T&gt; {</span></div></code></div></pre>\n<p>Note that our “requirement” for our argument type (<code>HasId[]</code>)\nis now represented in two places</p>\n<ul>\n<li><code>extends HasId</code> as the constraint on <code>T</code></li>\n<li><code>list: T[]</code> to ensure that we still receive an array</li>\n</ul>\n<h4 id=\"t-extends-vs-class-extends\" style=\"position:relative;\"><a href=\"#t-extends-vs-class-extends\" aria-label=\"t extends vs class extends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>T extends</code> vs <code>class extends</code></h4>\n<p>The <code>extends</code> keyword is used in object-oriented inheritance,\nand while this has a similar logical meaning, </p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#generic-constraints\">Generic Constraints</a></p>\n<ul>\n<li><a href=\"#motivating-use-case\">Motivating use case</a></li>\n<li>\n<p><a href=\"#describing-the-constraint\">Describing the constraint</a></p>\n<ul>\n<li><a href=\"#t-extends-vs-class-extends\"><code>T extends</code> vs <code>class extends</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/intermediate-v1/02-advanced-generics/"},"frontmatter":{"title":"Advanced Generics","course":"intermediate-v1","date":"May 28, 2015","description":"In this chapter, we'll learn about scopes and constraints, as they pertain to\ntype params, and what the language would look like if we didn't have these\nimportant tools\n"}}},"pageContext":{"slug":"/course/intermediate-v1/02-advanced-generics/","title":"Advanced Generics","course":"intermediate-v1","order":2,"previous":{"fields":{"slug":"/course/intermediate-v1/01-project-setup/"},"frontmatter":{"title":"Intro","order":1,"course":"intermediate-v1","isExercise":null}},"next":null}},"staticQueryHashes":["1246554614","2841359383"]}