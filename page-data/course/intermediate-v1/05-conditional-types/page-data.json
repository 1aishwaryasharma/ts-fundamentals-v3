{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/course/intermediate-v1/05-conditional-types/","result":{"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","title":"TypeScript Fundamentals v3","summary":"By adding static types to the JavaScript programming language, TypeScript delivers a rich and productive code authoring and review experience, while catching entire categories of bugs at compile time instead of runtime. In this workshop, you'll learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","title":"Intermediate TypeScript","summary":"It's relatively easy to get started with TypeScript, but the learning curve\nbecomes much steeper once things become more complex and abstract. This workshop\nteaches you how to leverage TypeScript's strengths to provide clarity\nin the face of complexity, while protecting your codebase and team\nfrom it's weaknesses.\n"}]}},"markdownRemark":{"id":"2693caa1-066a-5b5d-85bf-1bfd19e397b5","excerpt":"Ternary operator with values In a wide range of programming languages, we can find if/then/else logic.\nJavaScript provides a ternary operator that allows us to…","html":"<h2 id=\"ternary-operator-with-values\" style=\"position:relative;\"><a href=\"#ternary-operator-with-values\" aria-label=\"ternary operator with values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ternary operator with <em>values</em></h2>\n<p>In a wide range of programming languages, we can find <code>if</code>/<code>then</code>/<code>else</code> logic.\nJavaScript provides a ternary<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> operator that allows us to express this kind of logic concisely.\nFor example.</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const x: 16' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">16</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const isXPositive: &amp;quot;yes&amp;quot; | &amp;quot;no&amp;quot;' >isXPositive</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const x: 16' >x</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"yes\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"no\"</span></div><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>const isXPositive: \"yes\" | \"no\"</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAHjAvDAjANgFCkrAlhADQAUQJcpcA3AUyXhgD4YAGGAfhgCIBPaiTmAC4uYEJwwB6CTBmyAemyA'>Try</a></div></pre>\n<p>The general format of this expression in the regular JS/TS\nworld, when used with <em>values</em> (as shown in the snippet above) is:</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">condition ? exprIfTrue : exprIfFalse</span></div></code></div></pre>\n<h2 id=\"conditional-types\" style=\"position:relative;\"><a href=\"#conditional-types\" aria-label=\"conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional types</h2>\n<p>Conditional types allow for types to be expressed using a very similar (basically, <em>the same</em>)\nsyntax</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class Grill' >Grill</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Grill.startGas(): void' >startGas</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Grill.stopGas(): void' >stopGas</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='class Oven' >Oven</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Oven.setTemperature(degrees: number): void' >setTemperature</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) degrees: number' >degrees</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">) {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div>\n<div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type CookingDevice&amp;lt;T> = T extends &amp;quot;grill&amp;quot; ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in type CookingDevice&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in type CookingDevice&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"grill\"</span><span style=\"color: #000000\"> ? </span><span style=\"color: #267F99\"><data-lsp lsp='class Grill' >Grill</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #267F99\"><data-lsp lsp='class Oven' >Oven</data-lsp></span></div>\n<div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let device1: Grill' style='border-bottom: solid 2px lightgrey;'>device1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type CookingDevice&amp;lt;T> = T extends &amp;quot;grill&amp;quot; ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"grill\"</span><span style=\"color: #000000\">&gt;</span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let device1: Grill</span>\n<div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let device2: Oven' style='border-bottom: solid 2px lightgrey;'>device2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type CookingDevice&amp;lt;T> = T extends &amp;quot;grill&amp;quot; ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"oven\"</span><span style=\"color: #000000\">&gt;</span></div><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let device2: Oven</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDiBOBLEJoG8BQ1oQC5nl1kgAoBKdAXyx1wHsAHYicqja0SGAeQDcBTAHboaEfrgAq-ALYN+8MLgCu8fiQAm-AOar+EAFzRBS6QCN5FNNWoZcATznQAwnToBrRIK0ARfr0TA-AA8EgB80AC80BLQ-AAeuELqMABEOsggKdAA-HBIKNCGfEIYGCDi0Jr+gQCMhi7unj5+AcFp+ZmhGAD03djQAHrZZRVVrQBM9a4eXr7VbXQCgildvf1DQA'>Try</a></div></pre>\n<p>Let’s remove everything except for the conditional type,\nand simplify it a little bit</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type CookingDevice&amp;lt;T> = T extends &amp;quot;grill&amp;quot; ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in type CookingDevice&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in type CookingDevice&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"grill\"</span><span style=\"color: #000000\"> ? </span><span style=\"color: #267F99\"><data-lsp lsp='class Grill' >Grill</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #267F99\"><data-lsp lsp='class Oven' >Oven</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDiBOBLEJoG8BQ1oQC5nl1kgAoBKdAXyx1wHsAHYicqja0SGAeQDcBTAHboaEfrgAq-ALYN+8MLgCu8fiQAm-AOar+EAFzRBS6QCN5FNNWoB6O9AC0T4EtxOHGXAE850AMJ0dADWiIJaACL8vIjA-AA8EgB80AC80BLQ-AAeuELqMABEOsggBdAA-HBIKNCGfEJAA'>Try</a></div></pre>\n<h3 id=\"expressing-conditions\" style=\"position:relative;\"><a href=\"#expressing-conditions\" aria-label=\"expressing conditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expressing conditions</h3>\n<p>On the right side of the <code>=</code> operator, you can see the same three parts\nfrom our definition of a traditional value-based ternary operator</p>\n<pre class=\"shiki   \" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">condition ? exprIfTrue : exprIfFalse</span></div></code></div></pre>\n<table>\n<thead>\n<tr>\n<th>part</th>\n<th>expression</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>condition</td>\n<td><code>T extends \"grill\"</code></td>\n</tr>\n<tr>\n<td>exprIfTrue</td>\n<td><code>Grill</code></td>\n</tr>\n<tr>\n<td>exprIfFalse</td>\n<td><code>Oven</code></td>\n</tr>\n</tbody>\n</table>\n<p>You probably notice the <code>extends</code> keyword in the condition. As of TypeScript v4.3, is the <em>only</em>\nmechanism of expressing any kind of condition. You can think of it kind of like a <code>>=</code> comparison</p>\n<h3 id=\"quiz-expressing-conditions\" style=\"position:relative;\"><a href=\"#quiz-expressing-conditions\" aria-label=\"quiz expressing conditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quiz: Expressing conditions</h3>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\">QUIZ: Conditional type - condition expressions</div><div class=\"custom-block-body\"><p>Let’s study a few examples of <code>extends</code> scenarios and see if we can figure out whether it will evaluate to <code>true</code> or <code>false</code></p><table>\n<thead>\n<tr>\n<th></th>\n<th>condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code>64 extends number</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>number extends 64</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>string[] extends any</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>string[] extends any[]</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td><code>never extends any</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><code>any extends any</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td><code>Date extends {new (...args: any[]): any }</code></td>\n</tr>\n</tbody>\n</table></div></div>\n<details>\n  <summary>Click to reveal answers // SPOILER WARNING </summary>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type answer_1 = true' style='border-bottom: solid 2px lightgrey;'>answer_1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">64</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\"> ? </span><span style=\"color: #267F99\">true</span><span style=\"color: #000000\"> : </span><span style=\"color: #267F99\">false</span></div><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_1 = true</span>\n<div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type answer_2 = false' style='border-bottom: solid 2px lightgrey;'>answer_2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">64</span><span style=\"color: #000000\"> ? </span><span style=\"color: #267F99\">true</span><span style=\"color: #000000\"> : </span><span style=\"color: #267F99\">false</span></div><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_2 = false</span>\n<div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type answer_3 = true' style='border-bottom: solid 2px lightgrey;'>answer_3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">[] </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #267F99\">true</span><span style=\"color: #000000\"> : </span><span style=\"color: #267F99\">false</span></div><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_3 = true</span>\n<div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type answer_4 = true' style='border-bottom: solid 2px lightgrey;'>answer_4</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">string</span><span style=\"color: #000000\">[] </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">[] ? </span><span style=\"color: #267F99\">true</span><span style=\"color: #000000\"> : </span><span style=\"color: #267F99\">false</span></div><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_4 = true</span>\n<div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type answer_5 = true' style='border-bottom: solid 2px lightgrey;'>answer_5</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">never</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #267F99\">true</span><span style=\"color: #000000\"> : </span><span style=\"color: #267F99\">false</span></div><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_5 = true</span>\n<div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type answer_6 = true' style='border-bottom: solid 2px lightgrey;'>answer_6</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #267F99\">true</span><span style=\"color: #000000\"> : </span><span style=\"color: #267F99\">false</span></div><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_6 = true</span>\n<div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type answer_7 = false' >answer_7</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #267F99\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\">[]): </span><span style=\"color: #267F99\">any</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #008000\">//     ^?</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #267F99\">true</span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #267F99\">false</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAhgdgZwO4QE4H0CMUC8UBsALFBAB7ARwAmCUcArgLYBGaUA-FMKvdAFxQAZjAA2CCACgA9FKhy5APXYTQkWIhQYATLjpNWqEuUo0CxTt15QBwsZJnzFy1dHjI06AMy6E3AJZwAOYA2gC6RhTUtPAgHFw8-EKi4tKyjkoq4K4aHsR4vqgBIeFkkaYxYXGWibYpDunOWeruGACsunAQAG5spSbRcLEWCdZJdqmOUBkuzZro+LoxEf3qQ-FWNsn2afLTTW5zAOy6ACIwFMtRUADedBBIUAAUAHSvMKiBCAIVoQCU34MoABfCRyTj1XbKRzVUGjWoQIA'>Try</a></div></pre>\n</details>\n<h2 id=\"type-inference-in-conditional-types\" style=\"position:relative;\"><a href=\"#type-inference-in-conditional-types\" aria-label=\"type inference in conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type inference in conditional types</h2>\n<p>In <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\">the same release where conditional types were added to TypeScript</a>\na new <code>infer</code> keyword was added as well. This keyword can <em>only</em> be used\nin the context of a condition expression, within a conditional type declaration.</p>\n<p>Here’s an example of <code>infer</code> in action:</p>\n<pre class=\"shiki   twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * If type T looks like a Promise, unwrap it and provide</span></div><div class='line'><span style=\"color: #008000\"> * us with the type that the Promise _resolves to_</span></div><div class='line'><span style=\"color: #008000\"> *</span></div><div class='line'><span style=\"color: #008000\"> * Non-promise values should pass through, unaltered</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='type UnwrapIfPromise&amp;lt;T> = T extends PromiseLike&amp;lt;infer U> ? U : T' >UnwrapIfPromise</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in type UnwrapIfPromise&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in type UnwrapIfPromise&amp;lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='interface PromiseLike&amp;lt;T>' >PromiseLike</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) U' >U</data-lsp></span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) U' >U</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #267F99\"><data-lsp lsp='(type parameter) T in type UnwrapIfPromise&amp;lt;T>' >T</data-lsp></span></div>\n<div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let val_1: number' style='border-bottom: solid 2px lightgrey;'>val_1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type UnwrapIfPromise&amp;lt;T> = T extends PromiseLike&amp;lt;infer U> ? U : T' >UnwrapIfPromise</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\"><data-lsp lsp='interface Promise&amp;lt;T>' >Promise</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">&gt;&gt;</span></div><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let val_1: number</span>\n<div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let val_2: number' style='border-bottom: solid 2px lightgrey;'>val_2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type UnwrapIfPromise&amp;lt;T> = T extends PromiseLike&amp;lt;infer U> ? U : T' >UnwrapIfPromise</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #267F99\">number</span><span style=\"color: #000000\">&gt;</span></div><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let val_2: number</span>\n<div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const fetchResult: Promise&amp;lt;Response>' >fetchResult</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function fetch(input: RequestInfo, init?: RequestInit | undefined): Promise&amp;lt;Response>' >fetch</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"http://example.com\"</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let val_3: Response' style='border-bottom: solid 2px lightgrey;'>val_3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #267F99\"><data-lsp lsp='type UnwrapIfPromise&amp;lt;T> = T extends PromiseLike&amp;lt;infer U> ? U : T' >UnwrapIfPromise</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const fetchResult: Promise&amp;lt;Response>' >fetchResult</data-lsp></span><span style=\"color: #000000\">&gt;</span></div><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>let val_3: Response</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUhJAzSAXAngBwKaQCqQDYD2BA1gM74CWxWAhpAAoBOBAthaRgDSQCuAdgHdGNNJApJINPgBNIaZgDcK0jFBg9yA8QAtk2rKkx6aEpPobM2HSAH1GGUgTwKHyAjbVrIAOQJ8AtPKs7FgKNHg8rqTaBDx4smg0pORmzDwA5trc-OFIGPbSasDghlgAqoLCaAhMwRwAPNgAfJAAvDiQGAAeeTLktVYYADJUGPUUfPD5kGVNUJAA-DPzAFw44OB4GBJheDYAjGsVQiI1liH1Axd8PCwARvlNc8DAkG8Aegub25C7NgBMR0qp3gVwaN3uj3ALzekE+4AAxn5SBIpkgEdoAEoOOISdpojEACgARNokEg0CsXt0aCw0FsAHRIljEgCU3x24RsAGYgSdqqDzg1SgREASsTi8Ehnq8PgsgA'>Try</a></div></pre>\n<p><code>infer</code> goes immediately to the left of what looks like a <code>U</code>\ntype param (one that we didn’t define in the <code>&#x3C;T></code> param list)\nand we can then use that <code>U</code> in either the <code>exprIfTrue</code> or <code>exprIfFalse</code>\ntypes</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Definition of ternary: three-part</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li><a href=\"#ternary-operator-with-values\">Ternary operator with <em>values</em></a></li>\n<li>\n<p><a href=\"#conditional-types\">Conditional types</a></p>\n<ul>\n<li><a href=\"#expressing-conditions\">Expressing conditions</a></li>\n<li><a href=\"#quiz-expressing-conditions\">Quiz: Expressing conditions</a></li>\n</ul>\n</li>\n<li><a href=\"#type-inference-in-conditional-types\">Type inference in conditional types</a></li>\n</ul>","fields":{"slug":"/course/intermediate-v1/05-conditional-types/"},"frontmatter":{"title":"Conditional Types","course":"intermediate-v1","date":"May 28, 2015","description":"Conditional types can be thought of as \"a ternary operator, for types\". \nWhile there is no \"control flow\" in a world where we're describing constraints with types\n(instead of procedural steps to execute \"in a flow\"), this tool does provide\nan important foundation for switching logic based on type information\n"}}},"pageContext":{"slug":"/course/intermediate-v1/05-conditional-types/","title":"Conditional Types","course":"intermediate-v1","order":5,"previous":{"fields":{"slug":"/course/intermediate-v1/04-type-queries/"},"frontmatter":{"title":"Type Queries","order":4,"course":"intermediate-v1","isExercise":null}},"next":null}},"staticQueryHashes":["2074799692","2841359383"]}